
../../parti-badge/firmware/target/firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001f244  2**0
                  CONTENTS
  3 .data         00000928  2003d7e0  000de8f0  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000006f8  2003e108  2003e108  0002e108  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000df218  000df218  0001f218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000df240  000df240  0001f240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0011523d  00000000  00000000  0001f244  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001cda7  00000000  00000000  00134481  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001b4c2  00000000  00000000  00151228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002a38  00000000  00000000  0016c6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003fe0  00000000  00000000  0016f122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000357b1  00000000  00000000  00173102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0004d2a0  00000000  00000000  001a88b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005d148  00000000  00000000  001f5b53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d96c  00000000  00000000  00252c9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	6c c4 0d 00                                         l...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f008 f948 	bl	dc2c2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f008 f94d 	bl	dc2d8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d7e0 	.word	0x2003d7e0
   d4048:	000de8f0 	.word	0x000de8f0
   d404c:	2003e108 	.word	0x2003e108
   d4050:	2003e108 	.word	0x2003e108
   d4054:	2003e800 	.word	0x2003e800

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f007 f99f 	bl	db39c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000de8e4 	.word	0x000de8e4
   d4080:	000de8a8 	.word	0x000de8a8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbae 	b.w	d47e4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8a3 	bl	d41d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f007 b951 	b.w	db338 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f005 bb13 	b.w	d96c0 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f005 bb11 	b.w	d96c0 <malloc>

000d409e <_ZdlPv>:
   d409e:	f005 bb17 	b.w	d96d0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f005 fa48 	bl	d9540 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d90f1 	.word	0x000d90f1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40c8:	6810      	ldr	r0, [r2, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40cc:	4770      	bx	lr

000d40ce <_ZN10WearerInfoD1Ev>:
#define EEPROM_FIRSTNAME_LOCATION 50
#define EEPROM_LASTNAME_LOCATION 120
#define EEPROM_TWITTER_LOCATION 190
#define STRING_BUFFER_SIZE 50

class WearerInfo {
   d40ce:	b510      	push	{r4, lr}
   d40d0:	4604      	mov	r4, r0
   d40d2:	3024      	adds	r0, #36	; 0x24
   d40d4:	f006 fa96 	bl	da604 <_ZN6StringD1Ev>
   d40d8:	f104 0014 	add.w	r0, r4, #20
   d40dc:	f006 fa92 	bl	da604 <_ZN6StringD1Ev>
   d40e0:	1d20      	adds	r0, r4, #4
   d40e2:	f006 fa8f 	bl	da604 <_ZN6StringD1Ev>
   d40e6:	4620      	mov	r0, r4
   d40e8:	bd10      	pop	{r4, pc}

000d40ea <_Z16checkTempHandler6String>:
  return 1;
}

// Check the temp and humidity when called from a cloud function
int checkTempHandler(String data)
{
   d40ea:	b508      	push	{r3, lr}
  getTempAndHumidity();
   d40ec:	f003 f95c 	bl	d73a8 <_Z18getTempAndHumidityv>

  return 1;
}
   d40f0:	2001      	movs	r0, #1
   d40f2:	bd08      	pop	{r3, pc}

000d40f4 <_Z22updateFirstNameHandler6String>:
  }
}

//Update the first name when called from a cloud function
int updateFirstNameHandler(String data)
{
   d40f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  wearerFirstName = data;
   d40f6:	4601      	mov	r1, r0
   d40f8:	480b      	ldr	r0, [pc, #44]	; (d4128 <_Z22updateFirstNameHandler6String+0x34>)
   d40fa:	f006 fafa 	bl	da6f2 <_ZN6StringaSERKS_>
  wearerInfo.setFirstName(wearerFirstName);
   d40fe:	490a      	ldr	r1, [pc, #40]	; (d4128 <_Z22updateFirstNameHandler6String+0x34>)
   d4100:	4668      	mov	r0, sp
   d4102:	f006 fb05 	bl	da710 <_ZN6StringC1ERKS_>
   d4106:	4669      	mov	r1, sp
   d4108:	4808      	ldr	r0, [pc, #32]	; (d412c <_Z22updateFirstNameHandler6String+0x38>)
   d410a:	f000 fc31 	bl	d4970 <_ZN10WearerInfo12setFirstNameE6String>
   d410e:	4668      	mov	r0, sp
   d4110:	f006 fa78 	bl	da604 <_ZN6StringD1Ev>

  if (displayingWearerDetails)
   d4114:	4b06      	ldr	r3, [pc, #24]	; (d4130 <_Z22updateFirstNameHandler6String+0x3c>)
   d4116:	781b      	ldrb	r3, [r3, #0]
   d4118:	b10b      	cbz	r3, d411e <_Z22updateFirstNameHandler6String+0x2a>
  {
    displayWearerDetails();
   d411a:	f001 f99d 	bl	d5458 <_Z20displayWearerDetailsv>
  }
  return 1;
}
   d411e:	2001      	movs	r0, #1
   d4120:	b005      	add	sp, #20
   d4122:	f85d fb04 	ldr.w	pc, [sp], #4
   d4126:	bf00      	nop
   d4128:	2003e120 	.word	0x2003e120
   d412c:	2003e144 	.word	0x2003e144
   d4130:	2003e24c 	.word	0x2003e24c

000d4134 <_Z21updateLastNameHandler6String>:

//Update the last name when called from a cloud function
int updateLastNameHandler(String data)
{
   d4134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  wearerLastName = data;
   d4136:	4601      	mov	r1, r0
   d4138:	480b      	ldr	r0, [pc, #44]	; (d4168 <_Z21updateLastNameHandler6String+0x34>)
   d413a:	f006 fada 	bl	da6f2 <_ZN6StringaSERKS_>
  wearerInfo.setLastName(wearerLastName);
   d413e:	490a      	ldr	r1, [pc, #40]	; (d4168 <_Z21updateLastNameHandler6String+0x34>)
   d4140:	4668      	mov	r0, sp
   d4142:	f006 fae5 	bl	da710 <_ZN6StringC1ERKS_>
   d4146:	4669      	mov	r1, sp
   d4148:	4808      	ldr	r0, [pc, #32]	; (d416c <_Z21updateLastNameHandler6String+0x38>)
   d414a:	f000 fc33 	bl	d49b4 <_ZN10WearerInfo11setLastNameE6String>
   d414e:	4668      	mov	r0, sp
   d4150:	f006 fa58 	bl	da604 <_ZN6StringD1Ev>

  if (displayingWearerDetails)
   d4154:	4b06      	ldr	r3, [pc, #24]	; (d4170 <_Z21updateLastNameHandler6String+0x3c>)
   d4156:	781b      	ldrb	r3, [r3, #0]
   d4158:	b10b      	cbz	r3, d415e <_Z21updateLastNameHandler6String+0x2a>
  {
    displayWearerDetails();
   d415a:	f001 f97d 	bl	d5458 <_Z20displayWearerDetailsv>
  }
  return 1;
}
   d415e:	2001      	movs	r0, #1
   d4160:	b005      	add	sp, #20
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4
   d4166:	bf00      	nop
   d4168:	2003e1b0 	.word	0x2003e1b0
   d416c:	2003e144 	.word	0x2003e144
   d4170:	2003e24c 	.word	0x2003e24c

000d4174 <_Z20updateTwitterHandler6String>:

int updateTwitterHandler(String data)
{
   d4174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  wearerTwitter = data;
   d4176:	4601      	mov	r1, r0
   d4178:	480b      	ldr	r0, [pc, #44]	; (d41a8 <_Z20updateTwitterHandler6String+0x34>)
   d417a:	f006 faba 	bl	da6f2 <_ZN6StringaSERKS_>
  wearerInfo.setTwitter(wearerTwitter);
   d417e:	490a      	ldr	r1, [pc, #40]	; (d41a8 <_Z20updateTwitterHandler6String+0x34>)
   d4180:	4668      	mov	r0, sp
   d4182:	f006 fac5 	bl	da710 <_ZN6StringC1ERKS_>
   d4186:	4669      	mov	r1, sp
   d4188:	4808      	ldr	r0, [pc, #32]	; (d41ac <_Z20updateTwitterHandler6String+0x38>)
   d418a:	f000 fc36 	bl	d49fa <_ZN10WearerInfo10setTwitterE6String>
   d418e:	4668      	mov	r0, sp
   d4190:	f006 fa38 	bl	da604 <_ZN6StringD1Ev>

  if (displayingWearerDetails)
   d4194:	4b06      	ldr	r3, [pc, #24]	; (d41b0 <_Z20updateTwitterHandler6String+0x3c>)
   d4196:	781b      	ldrb	r3, [r3, #0]
   d4198:	b10b      	cbz	r3, d419e <_Z20updateTwitterHandler6String+0x2a>
  {
    displayWearerDetails();
   d419a:	f001 f95d 	bl	d5458 <_Z20displayWearerDetailsv>
  }
  return 1;
}
   d419e:	2001      	movs	r0, #1
   d41a0:	b005      	add	sp, #20
   d41a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d41a6:	bf00      	nop
   d41a8:	2003e110 	.word	0x2003e110
   d41ac:	2003e144 	.word	0x2003e144
   d41b0:	2003e24c 	.word	0x2003e24c

000d41b4 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.4>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
   d41b4:	b507      	push	{r0, r1, r2, lr}
    {
        spark_variable_t extra;
        extra.size = sizeof(extra);
   d41b6:	2308      	movs	r3, #8
   d41b8:	f8ad 3000 	strh.w	r3, [sp]
        extra.update = update_string_variable;
   d41bc:	4b04      	ldr	r3, [pc, #16]	; (d41d0 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.4+0x1c>)
   d41be:	9301      	str	r3, [sp, #4]
        return CLOUD_FN(spark_variable(varKey, userVar, CloudVariableTypeString::value(), &extra), false);
   d41c0:	2204      	movs	r2, #4
   d41c2:	466b      	mov	r3, sp
   d41c4:	f005 fa1c 	bl	d9600 <spark_variable>
    }
   d41c8:	b003      	add	sp, #12
   d41ca:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ce:	bf00      	nop
   d41d0:	000d40c9 	.word	0x000d40c9

000d41d4 <loop>:
  // Scroll the title text on the screen
  display.startscrollleft(0x00, 0x0F);
}

void loop()
{
   d41d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned long currentMillis = millis();
  int clickedItem = 0;

  if (menuShowing == false)
   d41d6:	4ea2      	ldr	r6, [pc, #648]	; (d4460 <loop+0x28c>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41d8:	f004 ff9a 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d41dc:	7833      	ldrb	r3, [r6, #0]
   d41de:	4607      	mov	r7, r0
   d41e0:	bb3b      	cbnz	r3, d4232 <loop+0x5e>
  {
    redButtonADebouncer.update();
   d41e2:	48a0      	ldr	r0, [pc, #640]	; (d4464 <loop+0x290>)
   d41e4:	f004 fe06 	bl	d8df4 <_ZN8Debounce6updateEv>
    blueButtonBDebouncer.update();
   d41e8:	489f      	ldr	r0, [pc, #636]	; (d4468 <loop+0x294>)
   d41ea:	f004 fe03 	bl	d8df4 <_ZN8Debounce6updateEv>
    greenButtonCDebouncer.update();
   d41ee:	489f      	ldr	r0, [pc, #636]	; (d446c <loop+0x298>)
   d41f0:	f004 fe00 	bl	d8df4 <_ZN8Debounce6updateEv>
    yellowButtonDDebouncer.update();
   d41f4:	489e      	ldr	r0, [pc, #632]	; (d4470 <loop+0x29c>)
   d41f6:	f004 fdfd 	bl	d8df4 <_ZN8Debounce6updateEv>
    joystickCenterDebouncer.update();
   d41fa:	489e      	ldr	r0, [pc, #632]	; (d4474 <loop+0x2a0>)
   d41fc:	f004 fdfa 	bl	d8df4 <_ZN8Debounce6updateEv>

    if (redButtonADebouncer.read() == LOW ||
   d4200:	4898      	ldr	r0, [pc, #608]	; (d4464 <loop+0x290>)
   d4202:	f004 fe27 	bl	d8e54 <_ZN8Debounce4readEv>
        blueButtonBDebouncer.read() == LOW ||
        greenButtonCDebouncer.read() == LOW ||
        yellowButtonDDebouncer.read() == LOW ||
   d4206:	2800      	cmp	r0, #0
   d4208:	d07d      	beq.n	d4306 <loop+0x132>
    greenButtonCDebouncer.update();
    yellowButtonDDebouncer.update();
    joystickCenterDebouncer.update();

    if (redButtonADebouncer.read() == LOW ||
        blueButtonBDebouncer.read() == LOW ||
   d420a:	4897      	ldr	r0, [pc, #604]	; (d4468 <loop+0x294>)
   d420c:	f004 fe22 	bl	d8e54 <_ZN8Debounce4readEv>
    blueButtonBDebouncer.update();
    greenButtonCDebouncer.update();
    yellowButtonDDebouncer.update();
    joystickCenterDebouncer.update();

    if (redButtonADebouncer.read() == LOW ||
   d4210:	2800      	cmp	r0, #0
   d4212:	d078      	beq.n	d4306 <loop+0x132>
        blueButtonBDebouncer.read() == LOW ||
        greenButtonCDebouncer.read() == LOW ||
   d4214:	4895      	ldr	r0, [pc, #596]	; (d446c <loop+0x298>)
   d4216:	f004 fe1d 	bl	d8e54 <_ZN8Debounce4readEv>
    greenButtonCDebouncer.update();
    yellowButtonDDebouncer.update();
    joystickCenterDebouncer.update();

    if (redButtonADebouncer.read() == LOW ||
        blueButtonBDebouncer.read() == LOW ||
   d421a:	2800      	cmp	r0, #0
   d421c:	d073      	beq.n	d4306 <loop+0x132>
        greenButtonCDebouncer.read() == LOW ||
        yellowButtonDDebouncer.read() == LOW ||
   d421e:	4894      	ldr	r0, [pc, #592]	; (d4470 <loop+0x29c>)
   d4220:	f004 fe18 	bl	d8e54 <_ZN8Debounce4readEv>
    yellowButtonDDebouncer.update();
    joystickCenterDebouncer.update();

    if (redButtonADebouncer.read() == LOW ||
        blueButtonBDebouncer.read() == LOW ||
        greenButtonCDebouncer.read() == LOW ||
   d4224:	2800      	cmp	r0, #0
   d4226:	d06e      	beq.n	d4306 <loop+0x132>
        yellowButtonDDebouncer.read() == LOW ||
        joystickCenterDebouncer.read() == LOW)
   d4228:	4892      	ldr	r0, [pc, #584]	; (d4474 <loop+0x2a0>)
   d422a:	f004 fe13 	bl	d8e54 <_ZN8Debounce4readEv>
    joystickCenterDebouncer.update();

    if (redButtonADebouncer.read() == LOW ||
        blueButtonBDebouncer.read() == LOW ||
        greenButtonCDebouncer.read() == LOW ||
        yellowButtonDDebouncer.read() == LOW ||
   d422e:	2800      	cmp	r0, #0
   d4230:	d069      	beq.n	d4306 <loop+0x132>
      clearScreen();
      menu.InitMenu(mnuRoot, cntRoot, 1);
    }
  }

  if (btncounter > 0 && menuShowing)
   d4232:	4d91      	ldr	r5, [pc, #580]	; (d4478 <loop+0x2a4>)
   d4234:	782b      	ldrb	r3, [r5, #0]
   d4236:	b15b      	cbz	r3, d4250 <loop+0x7c>
   d4238:	7833      	ldrb	r3, [r6, #0]
   d423a:	2b00      	cmp	r3, #0
   d423c:	d16e      	bne.n	d431c <loop+0x148>
   d423e:	e007      	b.n	d4250 <loop+0x7c>
    case 5:
      clickedItem = menu.ProcessMenu(ACTION_SELECT);
      btncounter--;
      break;
    case 2:
      menu.ProcessMenu(ACTION_DOWN);
   d4240:	2102      	movs	r1, #2
      btncounter--;
      break;
    case 3:
      menu.ProcessMenu(ACTION_UP);
   d4242:	488e      	ldr	r0, [pc, #568]	; (d447c <loop+0x2a8>)
   d4244:	f004 ff22 	bl	d908c <_ZN11qMenuSystem11ProcessMenuEi>
      btncounter--;
   d4248:	782b      	ldrb	r3, [r5, #0]
   d424a:	3b01      	subs	r3, #1
   d424c:	b2db      	uxtb	r3, r3
   d424e:	702b      	strb	r3, [r5, #0]
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 8);
    }
  }

  if (displayingCarousel)
   d4250:	4b8b      	ldr	r3, [pc, #556]	; (d4480 <loop+0x2ac>)
   d4252:	781b      	ldrb	r3, [r3, #0]
   d4254:	b10b      	cbz	r3, d425a <loop+0x86>
  {
    displayCarousel();
   d4256:	f001 f89b 	bl	d5390 <_Z15displayCarouselv>
  }

  if (currentMillis - previousBatteryReading > BATT_CHECK_INTERVAL)
   d425a:	498a      	ldr	r1, [pc, #552]	; (d4484 <loop+0x2b0>)
   d425c:	680b      	ldr	r3, [r1, #0]
   d425e:	1afa      	subs	r2, r7, r3
   d4260:	4b89      	ldr	r3, [pc, #548]	; (d4488 <loop+0x2b4>)
   d4262:	429a      	cmp	r2, r3
   d4264:	461c      	mov	r4, r3
   d4266:	d902      	bls.n	d426e <loop+0x9a>
  {
    previousBatteryReading = currentMillis;
   d4268:	600f      	str	r7, [r1, #0]
    getBatteryReading();
   d426a:	f003 f92f 	bl	d74cc <_Z17getBatteryReadingv>
  }

  if (currentMillis - previousEnvReading > TEMP_CHECK_INTERVAL)
   d426e:	4a87      	ldr	r2, [pc, #540]	; (d448c <loop+0x2b8>)
   d4270:	6813      	ldr	r3, [r2, #0]
   d4272:	1afb      	subs	r3, r7, r3
   d4274:	42a3      	cmp	r3, r4
   d4276:	d902      	bls.n	d427e <loop+0xaa>
  {
    previousEnvReading = currentMillis;
   d4278:	6017      	str	r7, [r2, #0]
    getTempAndHumidity();
   d427a:	f003 f895 	bl	d73a8 <_Z18getTempAndHumidityv>
  }

  blueButtonBDebouncer.update();
   d427e:	487a      	ldr	r0, [pc, #488]	; (d4468 <loop+0x294>)
   d4280:	f004 fdb8 	bl	d8df4 <_ZN8Debounce6updateEv>
  if (blueButtonBDebouncer.read() == LOW)
   d4284:	4878      	ldr	r0, [pc, #480]	; (d4468 <loop+0x294>)
   d4286:	f004 fde5 	bl	d8e54 <_ZN8Debounce4readEv>
   d428a:	b908      	cbnz	r0, d4290 <loop+0xbc>
  {
    fireTowerSendEvent();
   d428c:	f001 fbf4 	bl	d5a78 <_Z18fireTowerSendEventv>
  }

  if (!showingLightAnimation)
   d4290:	4b7f      	ldr	r3, [pc, #508]	; (d4490 <loop+0x2bc>)
   d4292:	781c      	ldrb	r4, [r3, #0]
   d4294:	2c00      	cmp	r4, #0
   d4296:	f040 81da 	bne.w	d464e <loop+0x47a>
  {
    redButtonADebouncer.update();
   d429a:	4872      	ldr	r0, [pc, #456]	; (d4464 <loop+0x290>)
   d429c:	f004 fdaa 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (redButtonADebouncer.read() == LOW)
   d42a0:	4870      	ldr	r0, [pc, #448]	; (d4464 <loop+0x290>)
   d42a2:	f004 fdd7 	bl	d8e54 <_ZN8Debounce4readEv>
   d42a6:	b908      	cbnz	r0, d42ac <loop+0xd8>
    {
      analogWrite(RED_LED, 255);
   d42a8:	21ff      	movs	r1, #255	; 0xff
   d42aa:	e000      	b.n	d42ae <loop+0xda>
    }
    else
    {
      analogWrite(RED_LED, 0);
   d42ac:	4621      	mov	r1, r4
   d42ae:	2010      	movs	r0, #16
   d42b0:	f007 f8fc 	bl	db4ac <_Z11analogWritetm>
    }

    blueButtonBDebouncer.update();
   d42b4:	486c      	ldr	r0, [pc, #432]	; (d4468 <loop+0x294>)
   d42b6:	f004 fd9d 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (blueButtonBDebouncer.read() == LOW)
   d42ba:	486b      	ldr	r0, [pc, #428]	; (d4468 <loop+0x294>)
   d42bc:	f004 fdca 	bl	d8e54 <_ZN8Debounce4readEv>
   d42c0:	b908      	cbnz	r0, d42c6 <loop+0xf2>
    {
      analogWrite(BLUE_LED, 255);
   d42c2:	21ff      	movs	r1, #255	; 0xff
   d42c4:	e000      	b.n	d42c8 <loop+0xf4>
    }
    else
    {
      analogWrite(BLUE_LED, 0);
   d42c6:	2100      	movs	r1, #0
   d42c8:	2012      	movs	r0, #18
   d42ca:	f007 f8ef 	bl	db4ac <_Z11analogWritetm>
    }

    greenButtonCDebouncer.update();
   d42ce:	4867      	ldr	r0, [pc, #412]	; (d446c <loop+0x298>)
   d42d0:	f004 fd90 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (greenButtonCDebouncer.read() == LOW)
   d42d4:	4865      	ldr	r0, [pc, #404]	; (d446c <loop+0x298>)
   d42d6:	f004 fdbd 	bl	d8e54 <_ZN8Debounce4readEv>
   d42da:	b908      	cbnz	r0, d42e0 <loop+0x10c>
    {
      analogWrite(GREEN_LED, 255);
   d42dc:	21ff      	movs	r1, #255	; 0xff
   d42de:	e000      	b.n	d42e2 <loop+0x10e>
    }
    else
    {
      analogWrite(GREEN_LED, 0);
   d42e0:	2100      	movs	r1, #0
   d42e2:	2011      	movs	r0, #17
   d42e4:	f007 f8e2 	bl	db4ac <_Z11analogWritetm>
    }

    yellowButtonDDebouncer.update();
   d42e8:	4861      	ldr	r0, [pc, #388]	; (d4470 <loop+0x29c>)
   d42ea:	f004 fd83 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (yellowButtonDDebouncer.read() == LOW)
   d42ee:	4860      	ldr	r0, [pc, #384]	; (d4470 <loop+0x29c>)
   d42f0:	f004 fdb0 	bl	d8e54 <_ZN8Debounce4readEv>
   d42f4:	b908      	cbnz	r0, d42fa <loop+0x126>
    {
      analogWrite(YELLOW_LED, 255);
   d42f6:	21ff      	movs	r1, #255	; 0xff
   d42f8:	e000      	b.n	d42fc <loop+0x128>
    }
    else
    {
      analogWrite(YELLOW_LED, 0);
   d42fa:	2100      	movs	r1, #0
   d42fc:	2013      	movs	r0, #19
    }
  }
}
   d42fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    {
      analogWrite(YELLOW_LED, 255);
    }
    else
    {
      analogWrite(YELLOW_LED, 0);
   d4302:	f007 b8d3 	b.w	db4ac <_Z11analogWritetm>
        blueButtonBDebouncer.read() == LOW ||
        greenButtonCDebouncer.read() == LOW ||
        yellowButtonDDebouncer.read() == LOW ||
        joystickCenterDebouncer.read() == LOW)
    {
      menuShowing = true;
   d4306:	2401      	movs	r4, #1
   d4308:	7034      	strb	r4, [r6, #0]

      clearScreen();
   d430a:	f001 f88d 	bl	d5428 <_Z11clearScreenv>
      menu.InitMenu(mnuRoot, cntRoot, 1);
   d430e:	4623      	mov	r3, r4
   d4310:	2209      	movs	r2, #9
   d4312:	4960      	ldr	r1, [pc, #384]	; (d4494 <loop+0x2c0>)
   d4314:	4859      	ldr	r0, [pc, #356]	; (d447c <loop+0x2a8>)
   d4316:	f004 fea9 	bl	d906c <_ZN11qMenuSystem8InitMenuEPPKcii>
   d431a:	e78a      	b.n	d4232 <loop+0x5e>
    }
  }

  if (btncounter > 0 && menuShowing)
  {
    switch (btnid)
   d431c:	4b5e      	ldr	r3, [pc, #376]	; (d4498 <loop+0x2c4>)
   d431e:	781b      	ldrb	r3, [r3, #0]
   d4320:	3b01      	subs	r3, #1
   d4322:	2b04      	cmp	r3, #4
   d4324:	d894      	bhi.n	d4250 <loop+0x7c>
   d4326:	a201      	add	r2, pc, #4	; (adr r2, d432c <loop+0x158>)
   d4328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   d432c:	000d4341 	.word	0x000d4341
   d4330:	000d4241 	.word	0x000d4241
   d4334:	000d4345 	.word	0x000d4345
   d4338:	000d4349 	.word	0x000d4349
   d433c:	000d4341 	.word	0x000d4341
    {
    case 1:
    case 5:
      clickedItem = menu.ProcessMenu(ACTION_SELECT);
   d4340:	2103      	movs	r1, #3
   d4342:	e002      	b.n	d434a <loop+0x176>
    case 2:
      menu.ProcessMenu(ACTION_DOWN);
      btncounter--;
      break;
    case 3:
      menu.ProcessMenu(ACTION_UP);
   d4344:	2101      	movs	r1, #1
   d4346:	e77c      	b.n	d4242 <loop+0x6e>
      btncounter--;
      break;
    case 4:
      clickedItem = menu.ProcessMenu(ACTION_BACK);
   d4348:	2104      	movs	r1, #4
   d434a:	484c      	ldr	r0, [pc, #304]	; (d447c <loop+0x2a8>)
   d434c:	f004 fe9e 	bl	d908c <_ZN11qMenuSystem11ProcessMenuEi>
      btncounter--;
   d4350:	782b      	ldrb	r3, [r5, #0]
   d4352:	3b01      	subs	r3, #1
   d4354:	b2db      	uxtb	r3, r3
      break;
    }
  }

  if (clickedItem > 0 && menuShowing)
   d4356:	2800      	cmp	r0, #0
    case 3:
      menu.ProcessMenu(ACTION_UP);
      btncounter--;
      break;
    case 4:
      clickedItem = menu.ProcessMenu(ACTION_BACK);
   d4358:	4604      	mov	r4, r0
      btncounter--;
   d435a:	702b      	strb	r3, [r5, #0]
      break;
    }
  }

  if (clickedItem > 0 && menuShowing)
   d435c:	f340 813b 	ble.w	d45d6 <loop+0x402>
   d4360:	7833      	ldrb	r3, [r6, #0]
   d4362:	2b00      	cmp	r3, #0
   d4364:	f43f af74 	beq.w	d4250 <loop+0x7c>
  {
    clearScreen();
   d4368:	f001 f85e 	bl	d5428 <_Z11clearScreenv>

    if (menu.CurrentMenu == mnuRoot)
   d436c:	4843      	ldr	r0, [pc, #268]	; (d447c <loop+0x2a8>)
   d436e:	4949      	ldr	r1, [pc, #292]	; (d4494 <loop+0x2c0>)
   d4370:	6803      	ldr	r3, [r0, #0]
   d4372:	428b      	cmp	r3, r1
   d4374:	d12d      	bne.n	d43d2 <loop+0x1fe>
    {
      switch (clickedItem)
   d4376:	3c01      	subs	r4, #1
   d4378:	2c08      	cmp	r4, #8
   d437a:	f63f af69 	bhi.w	d4250 <loop+0x7c>
   d437e:	e8df f004 	tbb	[pc, r4]
   d4382:	0905      	.short	0x0905
   d4384:	1915110d 	.word	0x1915110d
   d4388:	211d      	.short	0x211d
   d438a:	25          	.byte	0x25
   d438b:	00          	.byte	0x00
      {
      case 1:
        menu.InitMenu((const char **)mnuDisplay, cntDisplay, 1);
   d438c:	2301      	movs	r3, #1
   d438e:	2206      	movs	r2, #6
   d4390:	4942      	ldr	r1, [pc, #264]	; (d449c <loop+0x2c8>)
   d4392:	e158      	b.n	d4646 <loop+0x472>
        break;
      case 2:
        menu.InitMenu((const char **)mnuMesh, cntMesh, 1);
   d4394:	2301      	movs	r3, #1
   d4396:	2204      	movs	r2, #4
   d4398:	4941      	ldr	r1, [pc, #260]	; (d44a0 <loop+0x2cc>)
   d439a:	e154      	b.n	d4646 <loop+0x472>
        break;
      case 3:
        menu.InitMenu((const char **)mnuSensors, cntSensors, 1);
   d439c:	2301      	movs	r3, #1
   d439e:	2203      	movs	r2, #3
   d43a0:	4940      	ldr	r1, [pc, #256]	; (d44a4 <loop+0x2d0>)
   d43a2:	e150      	b.n	d4646 <loop+0x472>
        break;
      case 4:
        menu.InitMenu((const char **)mnuMusic, cntMusic, 1);
   d43a4:	2301      	movs	r3, #1
   d43a6:	2205      	movs	r2, #5
   d43a8:	493f      	ldr	r1, [pc, #252]	; (d44a8 <loop+0x2d4>)
   d43aa:	e14c      	b.n	d4646 <loop+0x472>
        break;
      case 5:
        menu.InitMenu((const char **)mnuGames, cntGames, 1);
   d43ac:	2301      	movs	r3, #1
   d43ae:	2204      	movs	r2, #4
   d43b0:	493e      	ldr	r1, [pc, #248]	; (d44ac <loop+0x2d8>)
   d43b2:	e148      	b.n	d4646 <loop+0x472>
        break;
      case 6:
        menu.InitMenu((const char **)mnuGraphics, cntGraphics, 1);
   d43b4:	2301      	movs	r3, #1
   d43b6:	2205      	movs	r2, #5
   d43b8:	493d      	ldr	r1, [pc, #244]	; (d44b0 <loop+0x2dc>)
   d43ba:	e144      	b.n	d4646 <loop+0x472>
        break;
      case 7:
        menu.InitMenu((const char **)mnuAnimations, cntAnimations, 1);
   d43bc:	2301      	movs	r3, #1
   d43be:	2208      	movs	r2, #8
   d43c0:	493c      	ldr	r1, [pc, #240]	; (d44b4 <loop+0x2e0>)
   d43c2:	e140      	b.n	d4646 <loop+0x472>
        break;
      case 8:
        menu.InitMenu((const char **)mnuBlinky, cntBlinky, 1);
   d43c4:	2301      	movs	r3, #1
   d43c6:	2206      	movs	r2, #6
   d43c8:	493b      	ldr	r1, [pc, #236]	; (d44b8 <loop+0x2e4>)
   d43ca:	e13c      	b.n	d4646 <loop+0x472>
        break;
      case 9:
        displayCredits();
   d43cc:	f001 fa4a 	bl	d5864 <_Z14displayCreditsv>
        break;
   d43d0:	e73e      	b.n	d4250 <loop+0x7c>
      }
    }
    // Logic for sub menus
    else if (menu.CurrentMenu == mnuDisplay)
   d43d2:	4a32      	ldr	r2, [pc, #200]	; (d449c <loop+0x2c8>)
   d43d4:	4293      	cmp	r3, r2
   d43d6:	d11b      	bne.n	d4410 <loop+0x23c>
    {
      switch (clickedItem)
   d43d8:	3c01      	subs	r4, #1
   d43da:	2c05      	cmp	r4, #5
   d43dc:	f63f af38 	bhi.w	d4250 <loop+0x7c>
   d43e0:	e8df f004 	tbb	[pc, r4]
   d43e4:	360e0b03 	.word	0x360e0b03
   d43e8:	1411      	.short	0x1411
      {
      case 1:
        showTitle();
   d43ea:	f000 ffa3 	bl	d5334 <_Z9showTitlev>
        display.startscrollleft(0x00, 0x0F);
   d43ee:	220f      	movs	r2, #15
   d43f0:	2100      	movs	r1, #0
   d43f2:	4832      	ldr	r0, [pc, #200]	; (d44bc <loop+0x2e8>)
   d43f4:	f004 fa2b 	bl	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
        break;
   d43f8:	e72a      	b.n	d4250 <loop+0x7c>
      case 2:
        displayWearerDetails();
   d43fa:	f001 f82d 	bl	d5458 <_Z20displayWearerDetailsv>
        break;
   d43fe:	e727      	b.n	d4250 <loop+0x7c>
      case 3:
        displayTwitterHandle();
   d4400:	f001 f9a4 	bl	d574c <_Z20displayTwitterHandlev>
        break;
   d4404:	e724      	b.n	d4250 <loop+0x7c>
      case 4:
        showTempAndHumidity();
        break;
      case 5:
        displayCarousel();
   d4406:	f000 ffc3 	bl	d5390 <_Z15displayCarouselv>
        break;
   d440a:	e721      	b.n	d4250 <loop+0x7c>
      case 6:
        menu.InitMenu(mnuRoot, cntRoot, 1);
   d440c:	2301      	movs	r3, #1
   d440e:	e118      	b.n	d4642 <loop+0x46e>
        break;
      }
    }
    else if (menu.CurrentMenu == mnuMesh)
   d4410:	4a23      	ldr	r2, [pc, #140]	; (d44a0 <loop+0x2cc>)
   d4412:	4293      	cmp	r3, r2
   d4414:	d112      	bne.n	d443c <loop+0x268>
    {
      switch (clickedItem)
   d4416:	3c01      	subs	r4, #1
   d4418:	2c03      	cmp	r4, #3
   d441a:	f63f af19 	bhi.w	d4250 <loop+0x7c>
   d441e:	e8df f004 	tbb	[pc, r4]
   d4422:	0502      	.short	0x0502
   d4424:	0b08      	.short	0x0b08
      {
      case 1:
        getMeshNetworkInfo();
   d4426:	f002 fe23 	bl	d7070 <_Z18getMeshNetworkInfov>
        break;
   d442a:	e711      	b.n	d4250 <loop+0x7c>
      case 2:
        fireHelloPingEvent();
   d442c:	f001 fb44 	bl	d5ab8 <_Z18fireHelloPingEventv>
        break;
   d4430:	e70e      	b.n	d4250 <loop+0x7c>
      case 3:
        fireGatewayPingEvent();
   d4432:	f001 fb6b 	bl	d5b0c <_Z20fireGatewayPingEventv>
        break;
   d4436:	e70b      	b.n	d4250 <loop+0x7c>
      case 4:
        menu.InitMenu(mnuRoot, cntRoot, 3);
   d4438:	2303      	movs	r3, #3
   d443a:	e102      	b.n	d4642 <loop+0x46e>
        break;
      }
    }
    else if (menu.CurrentMenu == mnuSensors)
   d443c:	4a19      	ldr	r2, [pc, #100]	; (d44a4 <loop+0x2d0>)
   d443e:	4293      	cmp	r3, r2
   d4440:	d13e      	bne.n	d44c0 <loop+0x2ec>
    {
      switch (clickedItem)
   d4442:	2c02      	cmp	r4, #2
   d4444:	d007      	beq.n	d4456 <loop+0x282>
   d4446:	2c03      	cmp	r4, #3
   d4448:	d008      	beq.n	d445c <loop+0x288>
   d444a:	2c01      	cmp	r4, #1
   d444c:	f47f af00 	bne.w	d4250 <loop+0x7c>
      {
      case 1:
        showTempAndHumidity();
   d4450:	f001 f85e 	bl	d5510 <_Z19showTempAndHumidityv>
        break;
   d4454:	e6fc      	b.n	d4250 <loop+0x7c>
      case 2:
        showBattery();
   d4456:	f001 f9a3 	bl	d57a0 <_Z11showBatteryv>
        break;
   d445a:	e6f9      	b.n	d4250 <loop+0x7c>
      case 3:
        menu.InitMenu(mnuRoot, cntRoot, 3);
   d445c:	4623      	mov	r3, r4
   d445e:	e0da      	b.n	d4616 <loop+0x442>
   d4460:	2003e10c 	.word	0x2003e10c
   d4464:	2003e2e0 	.word	0x2003e2e0
   d4468:	2003e2f8 	.word	0x2003e2f8
   d446c:	2003e2d0 	.word	0x2003e2d0
   d4470:	2003e2d8 	.word	0x2003e2d8
   d4474:	2003e2c8 	.word	0x2003e2c8
   d4478:	2003e1c0 	.word	0x2003e1c0
   d447c:	2003e20c 	.word	0x2003e20c
   d4480:	2003e245 	.word	0x2003e245
   d4484:	2003e1ec 	.word	0x2003e1ec
   d4488:	0001d4c0 	.word	0x0001d4c0
   d448c:	2003e1c4 	.word	0x2003e1c4
   d4490:	2003e24d 	.word	0x2003e24d
   d4494:	2003d7e0 	.word	0x2003d7e0
   d4498:	2003e208 	.word	0x2003e208
   d449c:	000dc660 	.word	0x000dc660
   d44a0:	000dc530 	.word	0x000dc530
   d44a4:	000dc514 	.word	0x000dc514
   d44a8:	000dc4a0 	.word	0x000dc4a0
   d44ac:	000dc500 	.word	0x000dc500
   d44b0:	000dc6a4 	.word	0x000dc6a4
   d44b4:	000dc5e0 	.word	0x000dc5e0
   d44b8:	000dc63c 	.word	0x000dc63c
   d44bc:	2003e1c8 	.word	0x2003e1c8
        break;
      }
    }
    else if (menu.CurrentMenu == mnuMusic)
   d44c0:	4a63      	ldr	r2, [pc, #396]	; (d4650 <loop+0x47c>)
   d44c2:	4293      	cmp	r3, r2
   d44c4:	d11a      	bne.n	d44fc <loop+0x328>
    {
      switch (clickedItem)
   d44c6:	3c01      	subs	r4, #1
   d44c8:	2c04      	cmp	r4, #4
   d44ca:	f63f aec1 	bhi.w	d4250 <loop+0x7c>
   d44ce:	e8df f004 	tbb	[pc, r4]
   d44d2:	0803      	.short	0x0803
   d44d4:	100d      	.short	0x100d
   d44d6:	13          	.byte	0x13
   d44d7:	00          	.byte	0x00
      {
      case 1:
        playStartup(BUZZER_PIN, true);
   d44d8:	2101      	movs	r1, #1
   d44da:	2008      	movs	r0, #8
   d44dc:	f002 fe20 	bl	d7120 <_Z11playStartupib>
        break;
   d44e0:	e6b6      	b.n	d4250 <loop+0x7c>
      case 2:
        playGameOver(BUZZER_PIN, true);
   d44e2:	2101      	movs	r1, #1
   d44e4:	2008      	movs	r0, #8
   d44e6:	f002 fe21 	bl	d712c <_Z12playGameOverib>
        break;
   d44ea:	e6b1      	b.n	d4250 <loop+0x7c>
      case 3:
        playRoll();
   d44ec:	f002 ff44 	bl	d7378 <_Z8playRollv>
        break;
   d44f0:	e6ae      	b.n	d4250 <loop+0x7c>
      case 4:
        playBeegees();
   d44f2:	f002 fe21 	bl	d7138 <_Z11playBeegeesv>
        break;
   d44f6:	e6ab      	b.n	d4250 <loop+0x7c>
      case 5:
        menu.InitMenu(mnuRoot, cntRoot, 4);
   d44f8:	2304      	movs	r3, #4
   d44fa:	e0a2      	b.n	d4642 <loop+0x46e>
        break;
      }
    }
    else if (menu.CurrentMenu == mnuGames)
   d44fc:	4a55      	ldr	r2, [pc, #340]	; (d4654 <loop+0x480>)
   d44fe:	4293      	cmp	r3, r2
   d4500:	d112      	bne.n	d4528 <loop+0x354>
    {
      switch (clickedItem)
   d4502:	3c01      	subs	r4, #1
   d4504:	2c03      	cmp	r4, #3
   d4506:	f63f aea3 	bhi.w	d4250 <loop+0x7c>
   d450a:	e8df f004 	tbb	[pc, r4]
   d450e:	0502      	.short	0x0502
   d4510:	0b08      	.short	0x0b08
      {
      case 1:
        etchASketch();
   d4512:	f001 fc1f 	bl	d5d54 <_Z11etchASketchv>
        break;
   d4516:	e69b      	b.n	d4250 <loop+0x7c>
      case 2:
        snakeGame();
   d4518:	f001 fe74 	bl	d6204 <_Z9snakeGamev>
        break;
   d451c:	e698      	b.n	d4250 <loop+0x7c>
      case 3:
        initSimon();
   d451e:	f002 f837 	bl	d6590 <_Z9initSimonv>
        break;
   d4522:	e695      	b.n	d4250 <loop+0x7c>
      case 4:
        menu.InitMenu(mnuRoot, cntRoot, 5);
   d4524:	2305      	movs	r3, #5
   d4526:	e08c      	b.n	d4642 <loop+0x46e>
        break;
      }
    }
    else if (menu.CurrentMenu == mnuGraphics)
   d4528:	4a4b      	ldr	r2, [pc, #300]	; (d4658 <loop+0x484>)
   d452a:	4293      	cmp	r3, r2
   d452c:	d114      	bne.n	d4558 <loop+0x384>
    {
      switch (clickedItem)
   d452e:	3c01      	subs	r4, #1
   d4530:	2c04      	cmp	r4, #4
   d4532:	f63f ae8d 	bhi.w	d4250 <loop+0x7c>
   d4536:	e8df f004 	tbb	[pc, r4]
   d453a:	0603      	.short	0x0603
   d453c:	0c09      	.short	0x0c09
   d453e:	78          	.byte	0x78
   d453f:	00          	.byte	0x00
      {
      case 1:
        showSpark();
   d4540:	f001 f860 	bl	d5604 <_Z9showSparkv>
        break;
   d4544:	e684      	b.n	d4250 <loop+0x7c>
      case 2:
        showSpectra();
   d4546:	f000 fecd 	bl	d52e4 <_Z11showSpectrav>
        break;
   d454a:	e681      	b.n	d4250 <loop+0x7c>
      case 3:
        showMesh();
   d454c:	f001 f9c2 	bl	d58d4 <_Z8showMeshv>
        break;
   d4550:	e67e      	b.n	d4250 <loop+0x7c>
      case 4:
        showKonami();
   d4552:	f001 f997 	bl	d5884 <_Z10showKonamiv>
        break;
   d4556:	e67b      	b.n	d4250 <loop+0x7c>
      case 5:
        menu.InitMenu(mnuRoot, cntRoot, 6);
        break;
      }
    }
    else if (menu.CurrentMenu == mnuAnimations)
   d4558:	4a40      	ldr	r2, [pc, #256]	; (d465c <loop+0x488>)
   d455a:	4293      	cmp	r3, r2
   d455c:	d11e      	bne.n	d459c <loop+0x3c8>
    {
      switch (clickedItem)
   d455e:	3c01      	subs	r4, #1
   d4560:	2c07      	cmp	r4, #7
   d4562:	f63f ae75 	bhi.w	d4250 <loop+0x7c>
   d4566:	e8df f004 	tbb	[pc, r4]
   d456a:	0704      	.short	0x0704
   d456c:	13100d0a 	.word	0x13100d0a
   d4570:	6516      	.short	0x6516
      {
      case 1:
        snowflakes();
   d4572:	f000 fb9f 	bl	d4cb4 <_Z10snowflakesv>
        break;
   d4576:	e66b      	b.n	d4250 <loop+0x7c>
      case 2:
        drawCircles();
   d4578:	f000 fbd0 	bl	d4d1c <_Z11drawCirclesv>
        break;
   d457c:	e668      	b.n	d4250 <loop+0x7c>
      case 3:
        drawRectangles();
   d457e:	f000 fe1b 	bl	d51b8 <_Z14drawRectanglesv>
        break;
   d4582:	e665      	b.n	d4250 <loop+0x7c>
      case 4:
        drawTriangles();
   d4584:	f000 fc8e 	bl	d4ea4 <_Z13drawTrianglesv>
        break;
   d4588:	e662      	b.n	d4250 <loop+0x7c>
      case 5:
        drawRoundedRectangles();
   d458a:	f000 fd27 	bl	d4fdc <_Z21drawRoundedRectanglesv>
        break;
   d458e:	e65f      	b.n	d4250 <loop+0x7c>
      case 6:
        scrollText();
   d4590:	f000 fd96 	bl	d50c0 <_Z10scrollTextv>
        break;
   d4594:	e65c      	b.n	d4250 <loop+0x7c>
      case 7:
        cycleAnimations();
   d4596:	f000 fe25 	bl	d51e4 <_Z15cycleAnimationsv>
        break;
   d459a:	e659      	b.n	d4250 <loop+0x7c>
      case 8:
        menu.InitMenu(mnuRoot, cntRoot, 7);
        break;
      }
    }
    else if (menu.CurrentMenu == mnuBlinky)
   d459c:	4a30      	ldr	r2, [pc, #192]	; (d4660 <loop+0x48c>)
   d459e:	4293      	cmp	r3, r2
   d45a0:	f47f ae56 	bne.w	d4250 <loop+0x7c>
    {
      switch (clickedItem)
   d45a4:	3c01      	subs	r4, #1
   d45a6:	2c05      	cmp	r4, #5
   d45a8:	f63f ae52 	bhi.w	d4250 <loop+0x7c>
   d45ac:	e8df f004 	tbb	[pc, r4]
   d45b0:	0d0a0603 	.word	0x0d0a0603
   d45b4:	4810      	.short	0x4810
      {
      case 1:
        ledChase();
   d45b6:	f002 fbbb 	bl	d6d30 <_Z8ledChasev>
        break;
   d45ba:	e649      	b.n	d4250 <loop+0x7c>
      case 2:
        ledPulse(true);
   d45bc:	2001      	movs	r0, #1
   d45be:	f002 fc5b 	bl	d6e78 <_Z8ledPulseb>
        break;
   d45c2:	e645      	b.n	d4250 <loop+0x7c>
      case 3:
        ledPulseChase();
   d45c4:	f002 fc06 	bl	d6dd4 <_Z13ledPulseChasev>
        break;
   d45c8:	e642      	b.n	d4250 <loop+0x7c>
      case 4:
        ledRandom();
   d45ca:	f002 fc75 	bl	d6eb8 <_Z9ledRandomv>
        break;
   d45ce:	e63f      	b.n	d4250 <loop+0x7c>
      case 5:
        ledSeeSaw();
   d45d0:	f002 fca8 	bl	d6f24 <_Z9ledSeeSawv>
        break;
   d45d4:	e63c      	b.n	d4250 <loop+0x7c>
        menu.InitMenu(mnuRoot, cntRoot, 8);
        break;
      }
    }
  }
  else if (clickedItem == -1 && menuShowing)
   d45d6:	1c44      	adds	r4, r0, #1
   d45d8:	f47f ae3a 	bne.w	d4250 <loop+0x7c>
   d45dc:	7833      	ldrb	r3, [r6, #0]
   d45de:	2b00      	cmp	r3, #0
   d45e0:	f43f ae36 	beq.w	d4250 <loop+0x7c>
  {
    if (menu.CurrentMenu == mnuRoot)
   d45e4:	481f      	ldr	r0, [pc, #124]	; (d4664 <loop+0x490>)
   d45e6:	4920      	ldr	r1, [pc, #128]	; (d4668 <loop+0x494>)
   d45e8:	6803      	ldr	r3, [r0, #0]
   d45ea:	428b      	cmp	r3, r1
   d45ec:	f43f ae30 	beq.w	d4250 <loop+0x7c>
    { /* In root, do nothing */
    }

    //2nd level menus
    else if (menu.CurrentMenu == mnuDisplay)
   d45f0:	4a1e      	ldr	r2, [pc, #120]	; (d466c <loop+0x498>)
   d45f2:	4293      	cmp	r3, r2
   d45f4:	d101      	bne.n	d45fa <loop+0x426>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 1);
   d45f6:	2301      	movs	r3, #1
   d45f8:	e00d      	b.n	d4616 <loop+0x442>
    }
    else if (menu.CurrentMenu == mnuMesh)
   d45fa:	4a1d      	ldr	r2, [pc, #116]	; (d4670 <loop+0x49c>)
   d45fc:	4293      	cmp	r3, r2
   d45fe:	d101      	bne.n	d4604 <loop+0x430>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 2);
   d4600:	2302      	movs	r3, #2
   d4602:	e008      	b.n	d4616 <loop+0x442>
    }
    else if (menu.CurrentMenu == mnuSensors)
   d4604:	4a1b      	ldr	r2, [pc, #108]	; (d4674 <loop+0x4a0>)
   d4606:	4293      	cmp	r3, r2
   d4608:	d101      	bne.n	d460e <loop+0x43a>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 3);
   d460a:	2303      	movs	r3, #3
   d460c:	e003      	b.n	d4616 <loop+0x442>
    }
    else if (menu.CurrentMenu == mnuMusic)
   d460e:	4a10      	ldr	r2, [pc, #64]	; (d4650 <loop+0x47c>)
   d4610:	4293      	cmp	r3, r2
   d4612:	d102      	bne.n	d461a <loop+0x446>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 4);
   d4614:	2304      	movs	r3, #4
   d4616:	2209      	movs	r2, #9
   d4618:	e016      	b.n	d4648 <loop+0x474>
    }
    else if (menu.CurrentMenu == mnuGames)
   d461a:	4a0e      	ldr	r2, [pc, #56]	; (d4654 <loop+0x480>)
   d461c:	4293      	cmp	r3, r2
   d461e:	d101      	bne.n	d4624 <loop+0x450>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 5);
   d4620:	2305      	movs	r3, #5
   d4622:	e7f8      	b.n	d4616 <loop+0x442>
    }
    else if (menu.CurrentMenu == mnuGraphics)
   d4624:	4a0c      	ldr	r2, [pc, #48]	; (d4658 <loop+0x484>)
   d4626:	4293      	cmp	r3, r2
   d4628:	d101      	bne.n	d462e <loop+0x45a>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 6);
   d462a:	2306      	movs	r3, #6
   d462c:	e009      	b.n	d4642 <loop+0x46e>
    }
    else if (menu.CurrentMenu == mnuAnimations)
   d462e:	4a0b      	ldr	r2, [pc, #44]	; (d465c <loop+0x488>)
   d4630:	4293      	cmp	r3, r2
   d4632:	d101      	bne.n	d4638 <loop+0x464>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 7);
   d4634:	2307      	movs	r3, #7
   d4636:	e004      	b.n	d4642 <loop+0x46e>
    }
    else if (menu.CurrentMenu == mnuBlinky)
   d4638:	4a09      	ldr	r2, [pc, #36]	; (d4660 <loop+0x48c>)
   d463a:	4293      	cmp	r3, r2
   d463c:	f47f ae08 	bne.w	d4250 <loop+0x7c>
    {
      menu.InitMenu((const char **)mnuRoot, cntRoot, 8);
   d4640:	2308      	movs	r3, #8
   d4642:	4909      	ldr	r1, [pc, #36]	; (d4668 <loop+0x494>)
   d4644:	2209      	movs	r2, #9
   d4646:	4807      	ldr	r0, [pc, #28]	; (d4664 <loop+0x490>)
   d4648:	f004 fd10 	bl	d906c <_ZN11qMenuSystem8InitMenuEPPKcii>
   d464c:	e600      	b.n	d4250 <loop+0x7c>
   d464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4650:	000dc4a0 	.word	0x000dc4a0
   d4654:	000dc500 	.word	0x000dc500
   d4658:	000dc6a4 	.word	0x000dc6a4
   d465c:	000dc5e0 	.word	0x000dc5e0
   d4660:	000dc63c 	.word	0x000dc63c
   d4664:	2003e20c 	.word	0x2003e20c
   d4668:	2003d7e0 	.word	0x2003d7e0
   d466c:	000dc660 	.word	0x000dc660
   d4670:	000dc530 	.word	0x000dc530
   d4674:	000dc514 	.word	0x000dc514

000d4678 <_Z17initWearerDetailsv>:
  Particle.subscribe("pulseLed", pulseLEDHandler, MY_DEVICES);
}

// Fetch wearer details from our WearerInfo class
void initWearerDetails()
{
   d4678:	b510      	push	{r4, lr}
   d467a:	4c25      	ldr	r4, [pc, #148]	; (d4710 <_Z17initWearerDetailsv+0x98>)
   d467c:	b09a      	sub	sp, #104	; 0x68
  wearerInfo = WearerInfo();
   d467e:	4668      	mov	r0, sp
   d4680:	f000 fa00 	bl	d4a84 <_ZN10WearerInfoC1Ev>
   d4684:	4620      	mov	r0, r4
   d4686:	9b00      	ldr	r3, [sp, #0]
   d4688:	f840 3b04 	str.w	r3, [r0], #4
   d468c:	a901      	add	r1, sp, #4
   d468e:	f006 f84a 	bl	da726 <_ZN6StringaSEOS_>
   d4692:	a905      	add	r1, sp, #20
   d4694:	f104 0014 	add.w	r0, r4, #20
   d4698:	f006 f845 	bl	da726 <_ZN6StringaSEOS_>
   d469c:	a909      	add	r1, sp, #36	; 0x24
   d469e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d46a2:	f006 f840 	bl	da726 <_ZN6StringaSEOS_>
   d46a6:	2300      	movs	r3, #0
   d46a8:	eb0d 0103 	add.w	r1, sp, r3
   d46ac:	18e2      	adds	r2, r4, r3
   d46ae:	3301      	adds	r3, #1
   d46b0:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
   d46b4:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
   d46b8:	2b32      	cmp	r3, #50	; 0x32
   d46ba:	d1f5      	bne.n	d46a8 <_Z17initWearerDetailsv+0x30>
   d46bc:	4668      	mov	r0, sp
   d46be:	f7ff fd06 	bl	d40ce <_ZN10WearerInfoD1Ev>

  if (wearerInfo.isSet())
   d46c2:	4813      	ldr	r0, [pc, #76]	; (d4710 <_Z17initWearerDetailsv+0x98>)
   d46c4:	f000 f9bc 	bl	d4a40 <_ZN10WearerInfo5isSetEv>
   d46c8:	b300      	cbz	r0, d470c <_Z17initWearerDetailsv+0x94>
  {
    wearerFirstName = wearerInfo.getFirstName();
   d46ca:	4911      	ldr	r1, [pc, #68]	; (d4710 <_Z17initWearerDetailsv+0x98>)
   d46cc:	4668      	mov	r0, sp
   d46ce:	f000 fa23 	bl	d4b18 <_ZN10WearerInfo12getFirstNameEv>
   d46d2:	4669      	mov	r1, sp
   d46d4:	480f      	ldr	r0, [pc, #60]	; (d4714 <_Z17initWearerDetailsv+0x9c>)
   d46d6:	f006 f826 	bl	da726 <_ZN6StringaSEOS_>
   d46da:	4668      	mov	r0, sp
   d46dc:	f005 ff92 	bl	da604 <_ZN6StringD1Ev>
    wearerLastName = wearerInfo.getLastName();
   d46e0:	490b      	ldr	r1, [pc, #44]	; (d4710 <_Z17initWearerDetailsv+0x98>)
   d46e2:	4668      	mov	r0, sp
   d46e4:	f000 fa31 	bl	d4b4a <_ZN10WearerInfo11getLastNameEv>
   d46e8:	4669      	mov	r1, sp
   d46ea:	480b      	ldr	r0, [pc, #44]	; (d4718 <_Z17initWearerDetailsv+0xa0>)
   d46ec:	f006 f81b 	bl	da726 <_ZN6StringaSEOS_>
   d46f0:	4668      	mov	r0, sp
   d46f2:	f005 ff87 	bl	da604 <_ZN6StringD1Ev>
    wearerTwitter = wearerInfo.getTwitter();
   d46f6:	4906      	ldr	r1, [pc, #24]	; (d4710 <_Z17initWearerDetailsv+0x98>)
   d46f8:	4668      	mov	r0, sp
   d46fa:	f000 fa3f 	bl	d4b7c <_ZN10WearerInfo10getTwitterEv>
   d46fe:	4669      	mov	r1, sp
   d4700:	4806      	ldr	r0, [pc, #24]	; (d471c <_Z17initWearerDetailsv+0xa4>)
   d4702:	f006 f810 	bl	da726 <_ZN6StringaSEOS_>
   d4706:	4668      	mov	r0, sp
   d4708:	f005 ff7c 	bl	da604 <_ZN6StringD1Ev>
  }
}
   d470c:	b01a      	add	sp, #104	; 0x68
   d470e:	bd10      	pop	{r4, pc}
   d4710:	2003e144 	.word	0x2003e144
   d4714:	2003e120 	.word	0x2003e120
   d4718:	2003e1b0 	.word	0x2003e1b0
   d471c:	2003e110 	.word	0x2003e110

000d4720 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
   d4720:	4602      	mov	r2, r0
   d4722:	4801      	ldr	r0, [pc, #4]	; (d4728 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4724:	f005 b85e 	b.w	d97e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4728:	000d97b9 	.word	0x000d97b9

000d472c <_Z9cloudInitv>:
  }
}

// Init our Device Cloud variables and functions
void cloudInit()
{
   d472c:	b507      	push	{r0, r1, r2, lr}
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
   d472e:	4919      	ldr	r1, [pc, #100]	; (d4794 <_Z9cloudInitv+0x68>)
   d4730:	4819      	ldr	r0, [pc, #100]	; (d4798 <_Z9cloudInitv+0x6c>)
   d4732:	f7ff fd3f 	bl	d41b4 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.4>
   d4736:	4919      	ldr	r1, [pc, #100]	; (d479c <_Z9cloudInitv+0x70>)
   d4738:	4819      	ldr	r0, [pc, #100]	; (d47a0 <_Z9cloudInitv+0x74>)
   d473a:	f7ff fd3b 	bl	d41b4 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.4>
   d473e:	4919      	ldr	r1, [pc, #100]	; (d47a4 <_Z9cloudInitv+0x78>)
   d4740:	4819      	ldr	r0, [pc, #100]	; (d47a8 <_Z9cloudInitv+0x7c>)
   d4742:	f7ff fd37 	bl	d41b4 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK23CloudVariableTypeString.isra.4>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d4746:	2300      	movs	r3, #0
   d4748:	2202      	movs	r2, #2
   d474a:	4918      	ldr	r1, [pc, #96]	; (d47ac <_Z9cloudInitv+0x80>)
   d474c:	4818      	ldr	r0, [pc, #96]	; (d47b0 <_Z9cloudInitv+0x84>)
   d474e:	f004 ff57 	bl	d9600 <spark_variable>
   d4752:	2300      	movs	r3, #0
   d4754:	2202      	movs	r2, #2
   d4756:	4917      	ldr	r1, [pc, #92]	; (d47b4 <_Z9cloudInitv+0x88>)
   d4758:	4817      	ldr	r0, [pc, #92]	; (d47b8 <_Z9cloudInitv+0x8c>)
   d475a:	f004 ff51 	bl	d9600 <spark_variable>
  Particle.variable("wearerTwttr", wearerTwitter);

  Particle.variable("currentTemp", currentTemp);
  Particle.variable("currentHu", currentHumidity);

  Particle.function("updateFName", updateFirstNameHandler);
   d475e:	4917      	ldr	r1, [pc, #92]	; (d47bc <_Z9cloudInitv+0x90>)
   d4760:	4817      	ldr	r0, [pc, #92]	; (d47c0 <_Z9cloudInitv+0x94>)
   d4762:	f7ff ffdd 	bl	d4720 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("updateLName", updateLastNameHandler);
   d4766:	4917      	ldr	r1, [pc, #92]	; (d47c4 <_Z9cloudInitv+0x98>)
   d4768:	4817      	ldr	r0, [pc, #92]	; (d47c8 <_Z9cloudInitv+0x9c>)
   d476a:	f7ff ffd9 	bl	d4720 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("updateTwttr", updateTwitterHandler);
   d476e:	4917      	ldr	r1, [pc, #92]	; (d47cc <_Z9cloudInitv+0xa0>)
   d4770:	4817      	ldr	r0, [pc, #92]	; (d47d0 <_Z9cloudInitv+0xa4>)
   d4772:	f7ff ffd5 	bl	d4720 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>

  Particle.function("checkTemp", checkTempHandler);
   d4776:	4917      	ldr	r1, [pc, #92]	; (d47d4 <_Z9cloudInitv+0xa8>)
   d4778:	4817      	ldr	r0, [pc, #92]	; (d47d8 <_Z9cloudInitv+0xac>)
   d477a:	f7ff ffd1 	bl	d4720 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d477e:	2300      	movs	r3, #0
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	9300      	str	r3, [sp, #0]
   d4784:	461a      	mov	r2, r3
   d4786:	4915      	ldr	r1, [pc, #84]	; (d47dc <_Z9cloudInitv+0xb0>)
   d4788:	4815      	ldr	r0, [pc, #84]	; (d47e0 <_Z9cloudInitv+0xb4>)
   d478a:	f004 ff61 	bl	d9650 <spark_subscribe>

  Particle.subscribe("pulseLed", pulseLEDHandler, MY_DEVICES);
}
   d478e:	b003      	add	sp, #12
   d4790:	f85d fb04 	ldr.w	pc, [sp], #4
   d4794:	2003e120 	.word	0x2003e120
   d4798:	000dc6f6 	.word	0x000dc6f6
   d479c:	2003e1b0 	.word	0x2003e1b0
   d47a0:	000dc702 	.word	0x000dc702
   d47a4:	2003e110 	.word	0x2003e110
   d47a8:	000dc70e 	.word	0x000dc70e
   d47ac:	2003e1ac 	.word	0x2003e1ac
   d47b0:	000dc71a 	.word	0x000dc71a
   d47b4:	2003e130 	.word	0x2003e130
   d47b8:	000dc726 	.word	0x000dc726
   d47bc:	000d40f5 	.word	0x000d40f5
   d47c0:	000dc730 	.word	0x000dc730
   d47c4:	000d4135 	.word	0x000d4135
   d47c8:	000dc73c 	.word	0x000dc73c
   d47cc:	000d4175 	.word	0x000d4175
   d47d0:	000dc748 	.word	0x000dc748
   d47d4:	000d40eb 	.word	0x000d40eb
   d47d8:	000dc754 	.word	0x000dc754
   d47dc:	000d5b5d 	.word	0x000d5b5d
   d47e0:	000dc75e 	.word	0x000dc75e

000d47e4 <setup>:
int checkTempHandler(String data);
void cloudInit();
void initWearerDetails();

void setup()
{
   d47e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.begin();
   d47e6:	f006 fcd5 	bl	db194 <_Z16_fetch_usbserialv>
   d47ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47ee:	f006 fcc5 	bl	db17c <_ZN9USBSerial5beginEl>

  // setup Mesh
  meshSetup();
   d47f2:	f002 fbfa 	bl	d6fea <_Z9meshSetupv>

  resetDisplayBools();
   d47f6:	f000 fe01 	bl	d53fc <_Z17resetDisplayBoolsv>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
   d47fa:	4668      	mov	r0, sp
   d47fc:	f004 ff18 	bl	d9630 <spark_deviceID>

  // Get the current deviceId
  deviceId = System.deviceID();
   d4800:	4669      	mov	r1, sp
   d4802:	481b      	ldr	r0, [pc, #108]	; (d4870 <setup+0x8c>)
   d4804:	f005 ff8f 	bl	da726 <_ZN6StringaSEOS_>
   d4808:	4668      	mov	r0, sp
   d480a:	f005 fefb 	bl	da604 <_ZN6StringD1Ev>

  // Initialize Temp and Humidity sensor
  while (!envSensor.begin())
   d480e:	4819      	ldr	r0, [pc, #100]	; (d4874 <setup+0x90>)
   d4810:	f004 fab5 	bl	d8d7e <_ZN15Adafruit_Si70215beginEv>
   d4814:	2800      	cmp	r0, #0
   d4816:	d0fa      	beq.n	d480e <setup+0x2a>
    ;

  // Init OLED
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4818:	223c      	movs	r2, #60	; 0x3c
   d481a:	2102      	movs	r1, #2
   d481c:	4816      	ldr	r0, [pc, #88]	; (d4878 <setup+0x94>)
   d481e:	f003 ff1b 	bl	d8658 <_ZN16Adafruit_SSD13065beginEhh>

  // Show Particle Splashscreen
  showSplashscreen();
   d4822:	f000 ff5f 	bl	d56e4 <_Z16showSplashscreenv>

  // Show the title screen
  showTitle();
   d4826:	f000 fd85 	bl	d5334 <_Z9showTitlev>

  // Set up cloud variables and functions
  cloudInit();
   d482a:	f7ff ff7f 	bl	d472c <_Z9cloudInitv>

  // Set up mesh subscribe handlers
  setupMeshEvents();
   d482e:	f002 fbeb 	bl	d7008 <_Z15setupMeshEventsv>

  // Set the Piezo buzzer as an output
  pinMode(BUZZER_PIN, OUTPUT);
   d4832:	2101      	movs	r1, #1
   d4834:	2008      	movs	r0, #8
   d4836:	f006 fde5 	bl	db404 <pinMode>

  // Init the LED and Joystick Buttons
  initInputDebouncers();
   d483a:	f001 febf 	bl	d65bc <_Z19initInputDebouncersv>

  // Set up Interrupts
  setupJoystickInterrupts();
   d483e:	f002 f8d7 	bl	d69f0 <_Z23setupJoystickInterruptsv>

  // Get an initial temp and humidity reading
  getTempAndHumidity();
   d4842:	f002 fdb1 	bl	d73a8 <_Z18getTempAndHumidityv>

  // Get an Initial Battery Reading
  getBatteryReading();
   d4846:	f002 fe41 	bl	d74cc <_Z17getBatteryReadingv>

  //Init Tactile LED Buttons
  initLEDButtons();
   d484a:	f002 f9d3 	bl	d6bf4 <_Z14initLEDButtonsv>

  // Play a startup sound on the Piezo
  playStartup(BUZZER_PIN, false);
   d484e:	2100      	movs	r1, #0
   d4850:	2008      	movs	r0, #8
   d4852:	f002 fc65 	bl	d7120 <_Z11playStartupib>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4856:	f004 fee3 	bl	d9620 <spark_cloud_flag_connect>

  // Connect to the Particle device cloud
  Particle.connect();

  // Fetch badge wearer details from EEPROM
  initWearerDetails();
   d485a:	f7ff ff0d 	bl	d4678 <_Z17initWearerDetailsv>

  // Scroll the title text on the screen
  display.startscrollleft(0x00, 0x0F);
   d485e:	220f      	movs	r2, #15
   d4860:	2100      	movs	r1, #0
   d4862:	4805      	ldr	r0, [pc, #20]	; (d4878 <setup+0x94>)
   d4864:	f003 fff3 	bl	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
}
   d4868:	b005      	add	sp, #20
   d486a:	f85d fb04 	ldr.w	pc, [sp], #4
   d486e:	bf00      	nop
   d4870:	2003e1f8 	.word	0x2003e1f8
   d4874:	2003e134 	.word	0x2003e134
   d4878:	2003e1c8 	.word	0x2003e1c8

000d487c <_ZN16Adafruit_SSD1306D0Ev>:
   d487c:	b510      	push	{r4, lr}
   d487e:	4604      	mov	r4, r0
   d4880:	f7ff fc0d 	bl	d409e <_ZdlPv>
   d4884:	4620      	mov	r0, r4
   d4886:	bd10      	pop	{r4, pc}

000d4888 <_GLOBAL__sub_I_SystemMode>:
int checkTempHandler(String data)
{
  getTempAndHumidity();

  return 1;
}
   d4888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d488a:	4b2b      	ldr	r3, [pc, #172]	; (d4938 <_GLOBAL__sub_I_SystemMode+0xb0>)

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);

// Init Display
Adafruit_SSD1306 display(RESET);
   d488c:	4d2b      	ldr	r5, [pc, #172]	; (d493c <_GLOBAL__sub_I_SystemMode+0xb4>)
void resetDisplayBools();

// Menu Init
qMenuSystem menu = qMenuSystem(&display);

String deviceId;
   d488e:	4e2c      	ldr	r6, [pc, #176]	; (d4940 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4890:	4f2c      	ldr	r7, [pc, #176]	; (d4944 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4892:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d4896:	805a      	strh	r2, [r3, #2]
   d4898:	2400      	movs	r4, #0
   d489a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d489e:	701c      	strb	r4, [r3, #0]
   d48a0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48a2:	2002      	movs	r0, #2
   d48a4:	f004 fe5c 	bl	d9560 <set_system_mode>

#include "Adafruit_Si7021.h"
#include "events/events.h"

SYSTEM_MODE(SEMI_AUTOMATIC);
SYSTEM_THREAD(ENABLED);
   d48a8:	4621      	mov	r1, r4
   d48aa:	2001      	movs	r0, #1
   d48ac:	f004 fe68 	bl	d9580 <system_thread_set_state>

// Init Display
Adafruit_SSD1306 display(RESET);
   d48b0:	4621      	mov	r1, r4
   d48b2:	4c25      	ldr	r4, [pc, #148]	; (d4948 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d48b4:	4628      	mov	r0, r5
   d48b6:	f003 fe77 	bl	d85a8 <_ZN16Adafruit_SSD1306C1Ea>
   d48ba:	4622      	mov	r2, r4
   d48bc:	4923      	ldr	r1, [pc, #140]	; (d494c <_GLOBAL__sub_I_SystemMode+0xc4>)
   d48be:	4628      	mov	r0, r5
   d48c0:	f006 fe94 	bl	db5ec <__aeabi_atexit>
void resetDisplayBools();

// Menu Init
qMenuSystem menu = qMenuSystem(&display);
   d48c4:	4629      	mov	r1, r5
   d48c6:	4822      	ldr	r0, [pc, #136]	; (d4950 <_GLOBAL__sub_I_SystemMode+0xc8>)

String deviceId;
   d48c8:	4d22      	ldr	r5, [pc, #136]	; (d4954 <_GLOBAL__sub_I_SystemMode+0xcc>)
// Init Display
Adafruit_SSD1306 display(RESET);
void resetDisplayBools();

// Menu Init
qMenuSystem menu = qMenuSystem(&display);
   d48ca:	f004 fb77 	bl	d8fbc <_ZN11qMenuSystemC1EP16Adafruit_SSD1306>

String deviceId;
   d48ce:	4631      	mov	r1, r6
   d48d0:	4638      	mov	r0, r7
   d48d2:	f005 fede 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d48d6:	4638      	mov	r0, r7
WearerInfo wearerInfo;
   d48d8:	4f1f      	ldr	r7, [pc, #124]	; (d4958 <_GLOBAL__sub_I_SystemMode+0xd0>)
void resetDisplayBools();

// Menu Init
qMenuSystem menu = qMenuSystem(&display);

String deviceId;
   d48da:	4622      	mov	r2, r4
   d48dc:	4629      	mov	r1, r5
   d48de:	f006 fe85 	bl	db5ec <__aeabi_atexit>
WearerInfo wearerInfo;
   d48e2:	4638      	mov	r0, r7
   d48e4:	f000 f8ce 	bl	d4a84 <_ZN10WearerInfoC1Ev>
   d48e8:	4622      	mov	r2, r4
   d48ea:	491c      	ldr	r1, [pc, #112]	; (d495c <_GLOBAL__sub_I_SystemMode+0xd4>)
   d48ec:	4638      	mov	r0, r7
unsigned long startTime = 0;
unsigned long previousEnvReading = 0;
unsigned long previousBatteryReading = 0;

// Wearer details
String wearerFirstName;
   d48ee:	4f1c      	ldr	r7, [pc, #112]	; (d4960 <_GLOBAL__sub_I_SystemMode+0xd8>)

// Menu Init
qMenuSystem menu = qMenuSystem(&display);

String deviceId;
WearerInfo wearerInfo;
   d48f0:	f006 fe7c 	bl	db5ec <__aeabi_atexit>

// Initialize Si7021 sensor
Adafruit_Si7021 envSensor = Adafruit_Si7021();
   d48f4:	481b      	ldr	r0, [pc, #108]	; (d4964 <_GLOBAL__sub_I_SystemMode+0xdc>)
   d48f6:	f004 f8af 	bl	d8a58 <_ZN15Adafruit_Si7021C1Ev>
unsigned long startTime = 0;
unsigned long previousEnvReading = 0;
unsigned long previousBatteryReading = 0;

// Wearer details
String wearerFirstName;
   d48fa:	4631      	mov	r1, r6
   d48fc:	4638      	mov	r0, r7
   d48fe:	f005 fec8 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d4902:	4638      	mov	r0, r7
String wearerLastName;
   d4904:	4f18      	ldr	r7, [pc, #96]	; (d4968 <_GLOBAL__sub_I_SystemMode+0xe0>)
unsigned long startTime = 0;
unsigned long previousEnvReading = 0;
unsigned long previousBatteryReading = 0;

// Wearer details
String wearerFirstName;
   d4906:	4622      	mov	r2, r4
   d4908:	4629      	mov	r1, r5
   d490a:	f006 fe6f 	bl	db5ec <__aeabi_atexit>
String wearerLastName;
   d490e:	4631      	mov	r1, r6
   d4910:	4638      	mov	r0, r7
   d4912:	f005 febe 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d4916:	4638      	mov	r0, r7
String wearerTwitter;
   d4918:	4f14      	ldr	r7, [pc, #80]	; (d496c <_GLOBAL__sub_I_SystemMode+0xe4>)
unsigned long previousEnvReading = 0;
unsigned long previousBatteryReading = 0;

// Wearer details
String wearerFirstName;
String wearerLastName;
   d491a:	4622      	mov	r2, r4
   d491c:	4629      	mov	r1, r5
   d491e:	f006 fe65 	bl	db5ec <__aeabi_atexit>
String wearerTwitter;
   d4922:	4631      	mov	r1, r6
   d4924:	4638      	mov	r0, r7
   d4926:	f005 feb4 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d492a:	4622      	mov	r2, r4
   d492c:	4629      	mov	r1, r5
   d492e:	4638      	mov	r0, r7
int checkTempHandler(String data)
{
  getTempAndHumidity();

  return 1;
}
   d4930:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
unsigned long previousBatteryReading = 0;

// Wearer details
String wearerFirstName;
String wearerLastName;
String wearerTwitter;
   d4934:	f006 be5a 	b.w	db5ec <__aeabi_atexit>
   d4938:	2003e1f0 	.word	0x2003e1f0
   d493c:	2003e1c8 	.word	0x2003e1c8
   d4940:	000de5c8 	.word	0x000de5c8
   d4944:	2003e1f8 	.word	0x2003e1f8
   d4948:	2003e108 	.word	0x2003e108
   d494c:	000d40cd 	.word	0x000d40cd
   d4950:	2003e20c 	.word	0x2003e20c
   d4954:	000da605 	.word	0x000da605
   d4958:	2003e144 	.word	0x2003e144
   d495c:	000d40cf 	.word	0x000d40cf
   d4960:	2003e120 	.word	0x2003e120
   d4964:	2003e134 	.word	0x2003e134
   d4968:	2003e1b0 	.word	0x2003e1b0
   d496c:	2003e110 	.word	0x2003e110

000d4970 <_ZN10WearerInfo12setFirstNameE6String>:
    _twitter = getFromEEPROM(EEPROM_TWITTER_LOCATION);
  }
}

void WearerInfo::setFirstName(String name)
{
   d4970:	b530      	push	{r4, r5, lr}
   d4972:	460d      	mov	r5, r1
   d4974:	b08f      	sub	sp, #60	; 0x3c
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d4976:	2300      	movs	r3, #0
    _twitter = getFromEEPROM(EEPROM_TWITTER_LOCATION);
  }
}

void WearerInfo::setFirstName(String name)
{
   d4978:	4604      	mov	r4, r0
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d497a:	2232      	movs	r2, #50	; 0x32
   d497c:	a901      	add	r1, sp, #4
   d497e:	4628      	mov	r0, r5
}

void WearerInfo::setFirstName(String name)
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d4980:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d4984:	f005 ff5f 	bl	da846 <_ZNK6String8getBytesEPhjj>

  _firstName = name;
   d4988:	4629      	mov	r1, r5
   d498a:	1d20      	adds	r0, r4, #4
  _isSet = 1;
   d498c:	2501      	movs	r5, #1
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));

  _firstName = name;
   d498e:	f005 feb0 	bl	da6f2 <_ZN6StringaSERKS_>
  _isSet = 1;
   d4992:	6025      	str	r5, [r4, #0]

  EEPROM.put(EEPROM_FIRSTNAME_LOCATION, stringBuff);
   d4994:	f006 fdd4 	bl	db540 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d4998:	2232      	movs	r2, #50	; 0x32
   d499a:	a901      	add	r1, sp, #4
   d499c:	4610      	mov	r0, r2
   d499e:	f004 fbcf 	bl	d9140 <HAL_EEPROM_Put>
  EEPROM.put(EEPROM_SET_LOCATION, _isSet);
   d49a2:	f006 fdcd 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d49a6:	2204      	movs	r2, #4
   d49a8:	4621      	mov	r1, r4
   d49aa:	4628      	mov	r0, r5
   d49ac:	f004 fbc8 	bl	d9140 <HAL_EEPROM_Put>
}
   d49b0:	b00f      	add	sp, #60	; 0x3c
   d49b2:	bd30      	pop	{r4, r5, pc}

000d49b4 <_ZN10WearerInfo11setLastNameE6String>:

void WearerInfo::setLastName(String name)
{
   d49b4:	b530      	push	{r4, r5, lr}
   d49b6:	460d      	mov	r5, r1
   d49b8:	b08f      	sub	sp, #60	; 0x3c
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d49ba:	2300      	movs	r3, #0
  EEPROM.put(EEPROM_FIRSTNAME_LOCATION, stringBuff);
  EEPROM.put(EEPROM_SET_LOCATION, _isSet);
}

void WearerInfo::setLastName(String name)
{
   d49bc:	4604      	mov	r4, r0
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d49be:	2232      	movs	r2, #50	; 0x32
   d49c0:	a901      	add	r1, sp, #4
   d49c2:	4628      	mov	r0, r5
}

void WearerInfo::setLastName(String name)
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d49c4:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d49c8:	f005 ff3d 	bl	da846 <_ZNK6String8getBytesEPhjj>

  _lastName = name;
   d49cc:	4629      	mov	r1, r5
   d49ce:	f104 0014 	add.w	r0, r4, #20
  _isSet = 1;
   d49d2:	2501      	movs	r5, #1
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));

  _lastName = name;
   d49d4:	f005 fe8d 	bl	da6f2 <_ZN6StringaSERKS_>
  _isSet = 1;
   d49d8:	6025      	str	r5, [r4, #0]

  EEPROM.put(EEPROM_LASTNAME_LOCATION, stringBuff);
   d49da:	f006 fdb1 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d49de:	a901      	add	r1, sp, #4
   d49e0:	2232      	movs	r2, #50	; 0x32
   d49e2:	2078      	movs	r0, #120	; 0x78
   d49e4:	f004 fbac 	bl	d9140 <HAL_EEPROM_Put>
  EEPROM.put(EEPROM_SET_LOCATION, _isSet);
   d49e8:	f006 fdaa 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d49ec:	2204      	movs	r2, #4
   d49ee:	4621      	mov	r1, r4
   d49f0:	4628      	mov	r0, r5
   d49f2:	f004 fba5 	bl	d9140 <HAL_EEPROM_Put>
}
   d49f6:	b00f      	add	sp, #60	; 0x3c
   d49f8:	bd30      	pop	{r4, r5, pc}

000d49fa <_ZN10WearerInfo10setTwitterE6String>:

void WearerInfo::setTwitter(String name)
{
   d49fa:	b530      	push	{r4, r5, lr}
   d49fc:	460d      	mov	r5, r1
   d49fe:	b08f      	sub	sp, #60	; 0x3c
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d4a00:	2300      	movs	r3, #0
  EEPROM.put(EEPROM_LASTNAME_LOCATION, stringBuff);
  EEPROM.put(EEPROM_SET_LOCATION, _isSet);
}

void WearerInfo::setTwitter(String name)
{
   d4a02:	4604      	mov	r4, r0
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d4a04:	2232      	movs	r2, #50	; 0x32
   d4a06:	a901      	add	r1, sp, #4
   d4a08:	4628      	mov	r0, r5
}

void WearerInfo::setTwitter(String name)
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
   d4a0a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));
   d4a0e:	f005 ff1a 	bl	da846 <_ZNK6String8getBytesEPhjj>

  _twitter = name;
   d4a12:	4629      	mov	r1, r5
   d4a14:	f104 0024 	add.w	r0, r4, #36	; 0x24
  _isSet = 1;
   d4a18:	2501      	movs	r5, #1
{
  char stringBuff[STRING_BUFFER_SIZE];
  stringBuff[(sizeof(stringBuff) - 1)] = 0;
  name.getBytes((unsigned char *)stringBuff, sizeof(stringBuff));

  _twitter = name;
   d4a1a:	f005 fe6a 	bl	da6f2 <_ZN6StringaSERKS_>
  _isSet = 1;
   d4a1e:	6025      	str	r5, [r4, #0]

  EEPROM.put(EEPROM_TWITTER_LOCATION, stringBuff);
   d4a20:	f006 fd8e 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d4a24:	a901      	add	r1, sp, #4
   d4a26:	2232      	movs	r2, #50	; 0x32
   d4a28:	20be      	movs	r0, #190	; 0xbe
   d4a2a:	f004 fb89 	bl	d9140 <HAL_EEPROM_Put>
  EEPROM.put(EEPROM_SET_LOCATION, _isSet);
   d4a2e:	f006 fd87 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d4a32:	2204      	movs	r2, #4
   d4a34:	4621      	mov	r1, r4
   d4a36:	4628      	mov	r0, r5
   d4a38:	f004 fb82 	bl	d9140 <HAL_EEPROM_Put>
}
   d4a3c:	b00f      	add	sp, #60	; 0x3c
   d4a3e:	bd30      	pop	{r4, r5, pc}

000d4a40 <_ZN10WearerInfo5isSetEv>:

boolean WearerInfo::isSet()
{
  return _isSet;
   d4a40:	6800      	ldr	r0, [r0, #0]
}
   d4a42:	3000      	adds	r0, #0
   d4a44:	bf18      	it	ne
   d4a46:	2001      	movne	r0, #1
   d4a48:	4770      	bx	lr
	...

000d4a4c <_ZN10WearerInfo13getFromEEPROMEi>:

  return _twitter;
}

String WearerInfo::getFromEEPROM(int address)
{
   d4a4c:	b530      	push	{r4, r5, lr}
   d4a4e:	4615      	mov	r5, r2
   d4a50:	b08f      	sub	sp, #60	; 0x3c
   d4a52:	4604      	mov	r4, r0
  char value[STRING_BUFFER_SIZE];

  EEPROM.get(address, value);
   d4a54:	f006 fd74 	bl	db540 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4a58:	a901      	add	r1, sp, #4
   d4a5a:	2232      	movs	r2, #50	; 0x32
   d4a5c:	4628      	mov	r0, r5
   d4a5e:	f004 fb67 	bl	d9130 <HAL_EEPROM_Get>
  value[sizeof(value) - 1] = 0;
   d4a62:	2300      	movs	r3, #0
   d4a64:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

  if (value[0] != 255)
   d4a68:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4a6c:	2bff      	cmp	r3, #255	; 0xff
  {
    return String(value);
   d4a6e:	bf14      	ite	ne
   d4a70:	a901      	addne	r1, sp, #4
  }
  else
  {
    return String();
   d4a72:	4903      	ldreq	r1, [pc, #12]	; (d4a80 <_ZN10WearerInfo13getFromEEPROMEi+0x34>)
   d4a74:	4620      	mov	r0, r4
   d4a76:	f005 fe0c 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
  }
}
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	b00f      	add	sp, #60	; 0x3c
   d4a7e:	bd30      	pop	{r4, r5, pc}
   d4a80:	000de5c8 	.word	0x000de5c8

000d4a84 <_ZN10WearerInfoC1Ev>:
#include "WearerInfo.h"

WearerInfo::WearerInfo()
   d4a84:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a86:	4605      	mov	r5, r0
   d4a88:	2300      	movs	r3, #0
   d4a8a:	f845 3b04 	str.w	r3, [r5], #4
   d4a8e:	4604      	mov	r4, r0
   d4a90:	b085      	sub	sp, #20
   d4a92:	4920      	ldr	r1, [pc, #128]	; (d4b14 <_ZN10WearerInfoC1Ev+0x90>)
   d4a94:	4628      	mov	r0, r5
   d4a96:	f104 0714 	add.w	r7, r4, #20
   d4a9a:	f005 fdfa 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d4a9e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   d4aa2:	491c      	ldr	r1, [pc, #112]	; (d4b14 <_ZN10WearerInfoC1Ev+0x90>)
   d4aa4:	4638      	mov	r0, r7
   d4aa6:	f005 fdf4 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
   d4aaa:	491a      	ldr	r1, [pc, #104]	; (d4b14 <_ZN10WearerInfoC1Ev+0x90>)
   d4aac:	4630      	mov	r0, r6
   d4aae:	f005 fdf0 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
{
  EEPROM.get(EEPROM_SET_LOCATION, _isSet);
   d4ab2:	f006 fd45 	bl	db540 <_Z21__fetch_global_EEPROMv>
   d4ab6:	2204      	movs	r2, #4
   d4ab8:	4621      	mov	r1, r4
   d4aba:	2001      	movs	r0, #1
   d4abc:	f004 fb38 	bl	d9130 <HAL_EEPROM_Get>

  if (_isSet == 1)
   d4ac0:	6823      	ldr	r3, [r4, #0]
   d4ac2:	2b01      	cmp	r3, #1
   d4ac4:	d123      	bne.n	d4b0e <_ZN10WearerInfoC1Ev+0x8a>
  {
    _firstName = getFromEEPROM(EEPROM_FIRSTNAME_LOCATION);
   d4ac6:	2232      	movs	r2, #50	; 0x32
   d4ac8:	4621      	mov	r1, r4
   d4aca:	4668      	mov	r0, sp
   d4acc:	f7ff ffbe 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4ad0:	4669      	mov	r1, sp
   d4ad2:	4628      	mov	r0, r5
   d4ad4:	f005 fe27 	bl	da726 <_ZN6StringaSEOS_>
   d4ad8:	4668      	mov	r0, sp
   d4ada:	f005 fd93 	bl	da604 <_ZN6StringD1Ev>
    _lastName = getFromEEPROM(EEPROM_LASTNAME_LOCATION);
   d4ade:	2278      	movs	r2, #120	; 0x78
   d4ae0:	4621      	mov	r1, r4
   d4ae2:	4668      	mov	r0, sp
   d4ae4:	f7ff ffb2 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4ae8:	4669      	mov	r1, sp
   d4aea:	4638      	mov	r0, r7
   d4aec:	f005 fe1b 	bl	da726 <_ZN6StringaSEOS_>
   d4af0:	4668      	mov	r0, sp
   d4af2:	f005 fd87 	bl	da604 <_ZN6StringD1Ev>
    _twitter = getFromEEPROM(EEPROM_TWITTER_LOCATION);
   d4af6:	22be      	movs	r2, #190	; 0xbe
   d4af8:	4621      	mov	r1, r4
   d4afa:	4668      	mov	r0, sp
   d4afc:	f7ff ffa6 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4b00:	4669      	mov	r1, sp
   d4b02:	4630      	mov	r0, r6
   d4b04:	f005 fe0f 	bl	da726 <_ZN6StringaSEOS_>
   d4b08:	4668      	mov	r0, sp
   d4b0a:	f005 fd7b 	bl	da604 <_ZN6StringD1Ev>
  }
}
   d4b0e:	4620      	mov	r0, r4
   d4b10:	b005      	add	sp, #20
   d4b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4b14:	000de5c8 	.word	0x000de5c8

000d4b18 <_ZN10WearerInfo12getFirstNameEv>:
{
  return _isSet;
}

String WearerInfo::getFirstName()
{
   d4b18:	b530      	push	{r4, r5, lr}
  if (_firstName.length() == 0)
   d4b1a:	68cb      	ldr	r3, [r1, #12]
{
  return _isSet;
}

String WearerInfo::getFirstName()
{
   d4b1c:	460c      	mov	r4, r1
   d4b1e:	b085      	sub	sp, #20
   d4b20:	4605      	mov	r5, r0
   d4b22:	3404      	adds	r4, #4
  if (_firstName.length() == 0)
   d4b24:	b953      	cbnz	r3, d4b3c <_ZN10WearerInfo12getFirstNameEv+0x24>
  {
    _firstName = getFromEEPROM(EEPROM_FIRSTNAME_LOCATION);
   d4b26:	2232      	movs	r2, #50	; 0x32
   d4b28:	4668      	mov	r0, sp
   d4b2a:	f7ff ff8f 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4b2e:	4669      	mov	r1, sp
   d4b30:	4620      	mov	r0, r4
   d4b32:	f005 fdf8 	bl	da726 <_ZN6StringaSEOS_>
   d4b36:	4668      	mov	r0, sp
   d4b38:	f005 fd64 	bl	da604 <_ZN6StringD1Ev>
  }

  return _firstName;
   d4b3c:	4621      	mov	r1, r4
   d4b3e:	4628      	mov	r0, r5
   d4b40:	f005 fde6 	bl	da710 <_ZN6StringC1ERKS_>
}
   d4b44:	4628      	mov	r0, r5
   d4b46:	b005      	add	sp, #20
   d4b48:	bd30      	pop	{r4, r5, pc}

000d4b4a <_ZN10WearerInfo11getLastNameEv>:

String WearerInfo::getLastName()
{
   d4b4a:	b530      	push	{r4, r5, lr}
  if (_lastName.length() == 0)
   d4b4c:	69cb      	ldr	r3, [r1, #28]

  return _firstName;
}

String WearerInfo::getLastName()
{
   d4b4e:	460c      	mov	r4, r1
   d4b50:	b085      	sub	sp, #20
   d4b52:	4605      	mov	r5, r0
   d4b54:	3414      	adds	r4, #20
  if (_lastName.length() == 0)
   d4b56:	b953      	cbnz	r3, d4b6e <_ZN10WearerInfo11getLastNameEv+0x24>
  {
    _lastName = getFromEEPROM(EEPROM_LASTNAME_LOCATION);
   d4b58:	2278      	movs	r2, #120	; 0x78
   d4b5a:	4668      	mov	r0, sp
   d4b5c:	f7ff ff76 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4b60:	4669      	mov	r1, sp
   d4b62:	4620      	mov	r0, r4
   d4b64:	f005 fddf 	bl	da726 <_ZN6StringaSEOS_>
   d4b68:	4668      	mov	r0, sp
   d4b6a:	f005 fd4b 	bl	da604 <_ZN6StringD1Ev>
  }

  return _lastName;
   d4b6e:	4621      	mov	r1, r4
   d4b70:	4628      	mov	r0, r5
   d4b72:	f005 fdcd 	bl	da710 <_ZN6StringC1ERKS_>
}
   d4b76:	4628      	mov	r0, r5
   d4b78:	b005      	add	sp, #20
   d4b7a:	bd30      	pop	{r4, r5, pc}

000d4b7c <_ZN10WearerInfo10getTwitterEv>:

String WearerInfo::getTwitter()
{
   d4b7c:	b530      	push	{r4, r5, lr}
  if (_twitter.length() == 0)
   d4b7e:	6acb      	ldr	r3, [r1, #44]	; 0x2c

  return _lastName;
}

String WearerInfo::getTwitter()
{
   d4b80:	460c      	mov	r4, r1
   d4b82:	b085      	sub	sp, #20
   d4b84:	4605      	mov	r5, r0
   d4b86:	3424      	adds	r4, #36	; 0x24
  if (_twitter.length() == 0)
   d4b88:	b953      	cbnz	r3, d4ba0 <_ZN10WearerInfo10getTwitterEv+0x24>
  {
    _twitter = getFromEEPROM(EEPROM_TWITTER_LOCATION);
   d4b8a:	22be      	movs	r2, #190	; 0xbe
   d4b8c:	4668      	mov	r0, sp
   d4b8e:	f7ff ff5d 	bl	d4a4c <_ZN10WearerInfo13getFromEEPROMEi>
   d4b92:	4669      	mov	r1, sp
   d4b94:	4620      	mov	r0, r4
   d4b96:	f005 fdc6 	bl	da726 <_ZN6StringaSEOS_>
   d4b9a:	4668      	mov	r0, sp
   d4b9c:	f005 fd32 	bl	da604 <_ZN6StringD1Ev>
  }

  return _twitter;
   d4ba0:	4621      	mov	r1, r4
   d4ba2:	4628      	mov	r0, r5
   d4ba4:	f005 fdb4 	bl	da710 <_ZN6StringC1ERKS_>
}
   d4ba8:	4628      	mov	r0, r5
   d4baa:	b005      	add	sp, #20
   d4bac:	bd30      	pop	{r4, r5, pc}
	...

000d4bb0 <_Z10drawbitmapPKhhh>:
#define LOGO16_GLCD_WIDTH 16
static const unsigned char logo16_glcd_bmp[] =
    {0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000001, 0B00000000, 0B00010001, 0B10001000, 0B00001101, 0B00110000, 0B00001110, 0B11100000, 0B00000111, 0B11100000, 0B00111011, 0B11011100, 0B00010111, 0B11011000, 0B00000111, 0B11100000, 0B00001110, 0B01110000, 0B00001001, 0B10110000, 0B00010001, 0B10001000, 0B00000001, 0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000000};

void drawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h)
{
   d4bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
   d4bb4:	4b3a      	ldr	r3, [pc, #232]	; (d4ca0 <_Z10drawbitmapPKhhh+0xf0>)
#define LOGO16_GLCD_WIDTH 16
static const unsigned char logo16_glcd_bmp[] =
    {0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000001, 0B00000000, 0B00010001, 0B10001000, 0B00001101, 0B00110000, 0B00001110, 0B11100000, 0B00000111, 0B11100000, 0B00111011, 0B11011100, 0B00010111, 0B11011000, 0B00000111, 0B11100000, 0B00001110, 0B01110000, 0B00001001, 0B10110000, 0B00010001, 0B10001000, 0B00000001, 0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000000};

void drawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h)
{
   d4bb6:	4693      	mov	fp, r2
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
   d4bb8:	2201      	movs	r2, #1
#define LOGO16_GLCD_WIDTH 16
static const unsigned char logo16_glcd_bmp[] =
    {0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000001, 0B00000000, 0B00010001, 0B10001000, 0B00001101, 0B00110000, 0B00001110, 0B11100000, 0B00000111, 0B11100000, 0B00111011, 0B11011100, 0B00010111, 0B11011000, 0B00000111, 0B11100000, 0B00001110, 0B01110000, 0B00001001, 0B10110000, 0B00010001, 0B10001000, 0B00000001, 0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000000};

void drawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h)
{
   d4bba:	b08f      	sub	sp, #60	; 0x3c
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
   d4bbc:	701a      	strb	r2, [r3, #0]
  btnid = 0;
   d4bbe:	4a39      	ldr	r2, [pc, #228]	; (d4ca4 <_Z10drawbitmapPKhhh+0xf4>)
#define LOGO16_GLCD_WIDTH 16
static const unsigned char logo16_glcd_bmp[] =
    {0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000001, 0B00000000, 0B00010001, 0B10001000, 0B00001101, 0B00110000, 0B00001110, 0B11100000, 0B00000111, 0B11100000, 0B00111011, 0B11011100, 0B00010111, 0B11011000, 0B00000111, 0B11100000, 0B00001110, 0B01110000, 0B00001001, 0B10110000, 0B00010001, 0B10001000, 0B00000001, 0B00000000, 0B00000000, 0B00000000, 0B00000000, 0B00000000};

void drawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h)
{
   d4bc0:	9104      	str	r1, [sp, #16]
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
  btnid = 0;
   d4bc2:	2400      	movs	r4, #0
   d4bc4:	7014      	strb	r4, [r2, #0]
   d4bc6:	9305      	str	r3, [sp, #20]

  // initialize
  for (uint8_t f = 0; f < NUMFLAKES; f++)
  {
    icons[f][XPOS] = random(display.width());
   d4bc8:	ae06      	add	r6, sp, #24
    icons[f][YPOS] = 0;
   d4bca:	4627      	mov	r7, r4
  btnid = 0;

  // initialize
  for (uint8_t f = 0; f < NUMFLAKES; f++)
  {
    icons[f][XPOS] = random(display.width());
   d4bcc:	4836      	ldr	r0, [pc, #216]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
   d4bce:	f003 fb13 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4bd2:	f005 fc59 	bl	da488 <_Z6randomi>
   d4bd6:	1935      	adds	r5, r6, r4
   d4bd8:	5530      	strb	r0, [r6, r4]
    icons[f][YPOS] = 0;
   d4bda:	706f      	strb	r7, [r5, #1]
    icons[f][DELTAY] = random(5) + 1;
   d4bdc:	2005      	movs	r0, #5
   d4bde:	f005 fc53 	bl	da488 <_Z6randomi>
   d4be2:	3403      	adds	r4, #3
   d4be4:	3001      	adds	r0, #1
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
  btnid = 0;

  // initialize
  for (uint8_t f = 0; f < NUMFLAKES; f++)
   d4be6:	2c1e      	cmp	r4, #30
  {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
   d4be8:	70a8      	strb	r0, [r5, #2]
  uint8_t icons[NUMFLAKES][3];
  appmode = 1;
  btnid = 0;

  // initialize
  for (uint8_t f = 0; f < NUMFLAKES; f++)
   d4bea:	d1ef      	bne.n	d4bcc <_Z10drawbitmapPKhhh+0x1c>
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
  }

  setupLEDButtonInterrupt();
   d4bec:	f001 ff36 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d4bf0:	9b05      	ldr	r3, [sp, #20]
   d4bf2:	781b      	ldrb	r3, [r3, #0]
   d4bf4:	2b00      	cmp	r3, #0
   d4bf6:	d049      	beq.n	d4c8c <_Z10drawbitmapPKhhh+0xdc>
  {
    // draw each icon
    for (uint8_t f = 0; f < NUMFLAKES; f++)
    {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE);
   d4bf8:	f9bd 8010 	ldrsh.w	r8, [sp, #16]
   d4bfc:	2500      	movs	r5, #0
   d4bfe:	ac06      	add	r4, sp, #24
   d4c00:	1963      	adds	r3, r4, r5
   d4c02:	fa0f f68b 	sxth.w	r6, fp
   d4c06:	785a      	ldrb	r2, [r3, #1]
   d4c08:	5d61      	ldrb	r1, [r4, r5]
   d4c0a:	4827      	ldr	r0, [pc, #156]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
   d4c0c:	9601      	str	r6, [sp, #4]
   d4c0e:	2301      	movs	r3, #1
   d4c10:	9302      	str	r3, [sp, #8]
   d4c12:	f8cd 8000 	str.w	r8, [sp]
   d4c16:	4b25      	ldr	r3, [pc, #148]	; (d4cac <_Z10drawbitmapPKhhh+0xfc>)
   d4c18:	3503      	adds	r5, #3
   d4c1a:	f003 f9d1 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  setupLEDButtonInterrupt();

  while (appmode)
  {
    // draw each icon
    for (uint8_t f = 0; f < NUMFLAKES; f++)
   d4c1e:	2d1e      	cmp	r5, #30
   d4c20:	d1ed      	bne.n	d4bfe <_Z10drawbitmapPKhhh+0x4e>
    {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE);
    }
    display.display();
   d4c22:	4821      	ldr	r0, [pc, #132]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
   d4c24:	f003 fe96 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    delay(200);
   d4c28:	20c8      	movs	r0, #200	; 0xc8
   d4c2a:	f004 fd79 	bl	d9720 <delay>
   d4c2e:	2500      	movs	r5, #0

    // then erase it + move it
    for (uint8_t f = 0; f < NUMFLAKES; f++)
    {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK);
   d4c30:	462f      	mov	r7, r5
   d4c32:	f894 a001 	ldrb.w	sl, [r4, #1]
   d4c36:	4b1d      	ldr	r3, [pc, #116]	; (d4cac <_Z10drawbitmapPKhhh+0xfc>)
   d4c38:	481b      	ldr	r0, [pc, #108]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
   d4c3a:	f10d 0918 	add.w	r9, sp, #24
   d4c3e:	4652      	mov	r2, sl
   d4c40:	f819 1005 	ldrb.w	r1, [r9, r5]
   d4c44:	9702      	str	r7, [sp, #8]
   d4c46:	9601      	str	r6, [sp, #4]
   d4c48:	f8cd 8000 	str.w	r8, [sp]
   d4c4c:	f003 f9b8 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
   d4c50:	78a3      	ldrb	r3, [r4, #2]
      // if its gone, reinit
      if (icons[f][YPOS] > display.height())
   d4c52:	4815      	ldr	r0, [pc, #84]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
    // then erase it + move it
    for (uint8_t f = 0; f < NUMFLAKES; f++)
    {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
   d4c54:	449a      	add	sl, r3
   d4c56:	fa5f fa8a 	uxtb.w	sl, sl
   d4c5a:	f884 a001 	strb.w	sl, [r4, #1]
      // if its gone, reinit
      if (icons[f][YPOS] > display.height())
   d4c5e:	f003 face 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4c62:	4582      	cmp	sl, r0
   d4c64:	dd0c      	ble.n	d4c80 <_Z10drawbitmapPKhhh+0xd0>
      {
        icons[f][XPOS] = random(display.width());
   d4c66:	4810      	ldr	r0, [pc, #64]	; (d4ca8 <_Z10drawbitmapPKhhh+0xf8>)
   d4c68:	f003 fac6 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4c6c:	f005 fc0c 	bl	da488 <_Z6randomi>
   d4c70:	f809 0005 	strb.w	r0, [r9, r5]
        icons[f][YPOS] = 0;
   d4c74:	7067      	strb	r7, [r4, #1]
        icons[f][DELTAY] = random(5) + 1;
   d4c76:	2005      	movs	r0, #5
   d4c78:	f005 fc06 	bl	da488 <_Z6randomi>
   d4c7c:	3001      	adds	r0, #1
   d4c7e:	70a0      	strb	r0, [r4, #2]
   d4c80:	3503      	adds	r5, #3
    }
    display.display();
    delay(200);

    // then erase it + move it
    for (uint8_t f = 0; f < NUMFLAKES; f++)
   d4c82:	2d1e      	cmp	r5, #30
   d4c84:	f104 0403 	add.w	r4, r4, #3
   d4c88:	d1d3      	bne.n	d4c32 <_Z10drawbitmapPKhhh+0x82>
   d4c8a:	e7b1      	b.n	d4bf0 <_Z10drawbitmapPKhhh+0x40>
        icons[f][YPOS] = 0;
        icons[f][DELTAY] = random(5) + 1;
      }
    }
  }
  appmode = 0;
   d4c8c:	4a04      	ldr	r2, [pc, #16]	; (d4ca0 <_Z10drawbitmapPKhhh+0xf0>)
   d4c8e:	7013      	strb	r3, [r2, #0]
  btncounter++;
   d4c90:	4a07      	ldr	r2, [pc, #28]	; (d4cb0 <_Z10drawbitmapPKhhh+0x100>)
   d4c92:	7813      	ldrb	r3, [r2, #0]
   d4c94:	3301      	adds	r3, #1
   d4c96:	7013      	strb	r3, [r2, #0]
}
   d4c98:	b00f      	add	sp, #60	; 0x3c
   d4c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c9e:	bf00      	nop
   d4ca0:	2003e1f6 	.word	0x2003e1f6
   d4ca4:	2003e208 	.word	0x2003e208
   d4ca8:	2003e1c8 	.word	0x2003e1c8
   d4cac:	000dc770 	.word	0x000dc770
   d4cb0:	2003e1c0 	.word	0x2003e1c0

000d4cb4 <_Z10snowflakesv>:

void snowflakes()
{
   d4cb4:	b508      	push	{r3, lr}
  clearScreen();
   d4cb6:	f000 fbb7 	bl	d5428 <_Z11clearScreenv>
  // draw a bitmap icon and 'animate' movement
  drawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
   d4cba:	2210      	movs	r2, #16
   d4cbc:	4611      	mov	r1, r2
   d4cbe:	4802      	ldr	r0, [pc, #8]	; (d4cc8 <_Z10snowflakesv+0x14>)
}
   d4cc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

void snowflakes()
{
  clearScreen();
  // draw a bitmap icon and 'animate' movement
  drawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
   d4cc4:	f7ff bf74 	b.w	d4bb0 <_Z10drawbitmapPKhhh>
   d4cc8:	000dc770 	.word	0x000dc770

000d4ccc <_Z10drawcirclev>:
}

void drawcircle(void)
{
   d4ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  clearScreen();
   d4cce:	f000 fbab 	bl	d5428 <_Z11clearScreenv>

  for (int16_t i = 0; i < display.height(); i += 2)
   d4cd2:	2400      	movs	r4, #0
  {
    display.drawCircle(display.width() / 2, display.height() / 2, i, WHITE);
   d4cd4:	2602      	movs	r6, #2
   d4cd6:	2701      	movs	r7, #1

void drawcircle(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height(); i += 2)
   d4cd8:	480f      	ldr	r0, [pc, #60]	; (d4d18 <_Z10drawcirclev+0x4c>)
   d4cda:	f003 fa90 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4cde:	4284      	cmp	r4, r0
   d4ce0:	da17      	bge.n	d4d12 <_Z10drawcirclev+0x46>
  {
    display.drawCircle(display.width() / 2, display.height() / 2, i, WHITE);
   d4ce2:	480d      	ldr	r0, [pc, #52]	; (d4d18 <_Z10drawcirclev+0x4c>)
   d4ce4:	f003 fa88 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4ce8:	4605      	mov	r5, r0
   d4cea:	480b      	ldr	r0, [pc, #44]	; (d4d18 <_Z10drawcirclev+0x4c>)
   d4cec:	f003 fa87 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4cf0:	fb95 f1f6 	sdiv	r1, r5, r6
   d4cf4:	4623      	mov	r3, r4
   d4cf6:	fb90 f2f6 	sdiv	r2, r0, r6
   d4cfa:	b209      	sxth	r1, r1
   d4cfc:	b212      	sxth	r2, r2
   d4cfe:	4806      	ldr	r0, [pc, #24]	; (d4d18 <_Z10drawcirclev+0x4c>)
   d4d00:	9700      	str	r7, [sp, #0]
   d4d02:	f002 fd49 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
   d4d06:	3402      	adds	r4, #2
    display.display();
   d4d08:	4803      	ldr	r0, [pc, #12]	; (d4d18 <_Z10drawcirclev+0x4c>)
   d4d0a:	f003 fe23 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d4d0e:	b224      	sxth	r4, r4

void drawcircle(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height(); i += 2)
   d4d10:	e7e2      	b.n	d4cd8 <_Z10drawcirclev+0xc>
  {
    display.drawCircle(display.width() / 2, display.height() / 2, i, WHITE);
    display.display();
  }
}
   d4d12:	b003      	add	sp, #12
   d4d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d16:	bf00      	nop
   d4d18:	2003e1c8 	.word	0x2003e1c8

000d4d1c <_Z11drawCirclesv>:

void drawCircles()
{
   d4d1c:	b510      	push	{r4, lr}
  appmode = 1;
   d4d1e:	4c07      	ldr	r4, [pc, #28]	; (d4d3c <_Z11drawCirclesv+0x20>)
   d4d20:	2301      	movs	r3, #1
   d4d22:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d4d24:	4b06      	ldr	r3, [pc, #24]	; (d4d40 <_Z11drawCirclesv+0x24>)
   d4d26:	2200      	movs	r2, #0
   d4d28:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d4d2a:	f001 fe97 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d4d2e:	7823      	ldrb	r3, [r4, #0]
   d4d30:	b113      	cbz	r3, d4d38 <_Z11drawCirclesv+0x1c>
  {
    drawcircle();
   d4d32:	f7ff ffcb 	bl	d4ccc <_Z10drawcirclev>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d4d36:	e7fa      	b.n	d4d2e <_Z11drawCirclesv+0x12>
   d4d38:	bd10      	pop	{r4, pc}
   d4d3a:	bf00      	nop
   d4d3c:	2003e1f6 	.word	0x2003e1f6
   d4d40:	2003e208 	.word	0x2003e208

000d4d44 <_Z12drawtrianglev>:
    drawcircle();
  }
}

void drawtriangle(void)
{
   d4d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d48:	b085      	sub	sp, #20
  clearScreen();
   d4d4a:	f000 fb6d 	bl	d5428 <_Z11clearScreenv>

  for (int16_t i = 0; i < min(display.width(), display.height()) / 2; i += 5)
   d4d4e:	2400      	movs	r4, #0
   d4d50:	2602      	movs	r6, #2
  {
    display.drawTriangle(display.width() / 2, display.height() / 2 - i,
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4d52:	2701      	movs	r7, #1

void drawtriangle(void)
{
  clearScreen();

  for (int16_t i = 0; i < min(display.width(), display.height()) / 2; i += 5)
   d4d54:	4826      	ldr	r0, [pc, #152]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d56:	f003 fa4f 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4d5a:	4605      	mov	r5, r0
   d4d5c:	4824      	ldr	r0, [pc, #144]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d5e:	f003 fa4e 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4d62:	42a8      	cmp	r0, r5
   d4d64:	bfa8      	it	ge
   d4d66:	4628      	movge	r0, r5
   d4d68:	b200      	sxth	r0, r0
   d4d6a:	fb90 f0f6 	sdiv	r0, r0, r6
   d4d6e:	4284      	cmp	r4, r0
   d4d70:	da3b      	bge.n	d4dea <_Z12drawtrianglev+0xa6>
  {
    display.drawTriangle(display.width() / 2, display.height() / 2 - i,
   d4d72:	481f      	ldr	r0, [pc, #124]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d74:	f003 fa40 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4d78:	4682      	mov	sl, r0
   d4d7a:	481d      	ldr	r0, [pc, #116]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d7c:	f003 fa3f 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4d80:	4681      	mov	r9, r0
                         display.width() / 2 - i, display.height() / 2 + i,
   d4d82:	481b      	ldr	r0, [pc, #108]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d84:	f003 fa38 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4d88:	4683      	mov	fp, r0
   d4d8a:	4819      	ldr	r0, [pc, #100]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d8c:	f003 fa37 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4d90:	4605      	mov	r5, r0
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4d92:	4817      	ldr	r0, [pc, #92]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d94:	f003 fa30 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4d98:	4680      	mov	r8, r0
   d4d9a:	4815      	ldr	r0, [pc, #84]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4d9c:	f003 fa2f 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4da0:	fb95 f5f6 	sdiv	r5, r5, r6
   d4da4:	fb9b f3f6 	sdiv	r3, fp, r6
{
  clearScreen();

  for (int16_t i = 0; i < min(display.width(), display.height()) / 2; i += 5)
  {
    display.drawTriangle(display.width() / 2, display.height() / 2 - i,
   d4da8:	b2a4      	uxth	r4, r4
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4daa:	fb90 f0f6 	sdiv	r0, r0, r6
   d4dae:	4420      	add	r0, r4
   d4db0:	b200      	sxth	r0, r0
   d4db2:	9002      	str	r0, [sp, #8]
   d4db4:	4425      	add	r5, r4
   d4db6:	fb98 f0f6 	sdiv	r0, r8, r6
   d4dba:	4420      	add	r0, r4
   d4dbc:	1b1b      	subs	r3, r3, r4
   d4dbe:	b200      	sxth	r0, r0
   d4dc0:	fb99 f2f6 	sdiv	r2, r9, r6
   d4dc4:	b22d      	sxth	r5, r5
   d4dc6:	1b12      	subs	r2, r2, r4
   d4dc8:	9001      	str	r0, [sp, #4]
   d4dca:	b21b      	sxth	r3, r3
   d4dcc:	b212      	sxth	r2, r2
   d4dce:	4808      	ldr	r0, [pc, #32]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4dd0:	fb9a f1f6 	sdiv	r1, sl, r6
   d4dd4:	9703      	str	r7, [sp, #12]
   d4dd6:	b209      	sxth	r1, r1
   d4dd8:	9500      	str	r5, [sp, #0]
   d4dda:	f002 ffe1 	bl	d7da0 <_ZN12Adafruit_GFX12drawTriangleEsssssst>
   d4dde:	3405      	adds	r4, #5
    display.display();
   d4de0:	4803      	ldr	r0, [pc, #12]	; (d4df0 <_Z12drawtrianglev+0xac>)
   d4de2:	f003 fdb7 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d4de6:	b224      	sxth	r4, r4

void drawtriangle(void)
{
  clearScreen();

  for (int16_t i = 0; i < min(display.width(), display.height()) / 2; i += 5)
   d4de8:	e7b4      	b.n	d4d54 <_Z12drawtrianglev+0x10>
    display.drawTriangle(display.width() / 2, display.height() / 2 - i,
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
    display.display();
  }
}
   d4dea:	b005      	add	sp, #20
   d4dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4df0:	2003e1c8 	.word	0x2003e1c8

000d4df4 <_Z12filltrianglev>:

void filltriangle(void)
{
   d4df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4df8:	b085      	sub	sp, #20
  clearScreen();
   d4dfa:	f000 fb15 	bl	d5428 <_Z11clearScreenv>

  uint8_t color = WHITE;
  for (int16_t i = min(display.width(), display.height()) / 2; i > 0; i -= 5)
   d4dfe:	4828      	ldr	r0, [pc, #160]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e00:	f003 f9fa 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4e04:	4604      	mov	r4, r0
   d4e06:	4826      	ldr	r0, [pc, #152]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e08:	f003 f9f9 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4e0c:	42a0      	cmp	r0, r4
   d4e0e:	bfa8      	it	ge
   d4e10:	4620      	movge	r0, r4
  {
    display.fillTriangle(display.width() / 2, display.height() / 2 - i,
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4e12:	2701      	movs	r7, #1
void filltriangle(void)
{
  clearScreen();

  uint8_t color = WHITE;
  for (int16_t i = min(display.width(), display.height()) / 2; i > 0; i -= 5)
   d4e14:	b204      	sxth	r4, r0
   d4e16:	2502      	movs	r5, #2
   d4e18:	fb94 f4f5 	sdiv	r4, r4, r5
   d4e1c:	2c00      	cmp	r4, #0
   d4e1e:	dd3b      	ble.n	d4e98 <_Z12filltrianglev+0xa4>
  {
    display.fillTriangle(display.width() / 2, display.height() / 2 - i,
   d4e20:	481f      	ldr	r0, [pc, #124]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e22:	f003 f9e9 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4e26:	4682      	mov	sl, r0
   d4e28:	481d      	ldr	r0, [pc, #116]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e2a:	f003 f9e8 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4e2e:	4681      	mov	r9, r0
                         display.width() / 2 - i, display.height() / 2 + i,
   d4e30:	481b      	ldr	r0, [pc, #108]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e32:	f003 f9e1 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4e36:	4683      	mov	fp, r0
   d4e38:	4819      	ldr	r0, [pc, #100]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e3a:	f003 f9e0 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4e3e:	4606      	mov	r6, r0
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4e40:	4817      	ldr	r0, [pc, #92]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e42:	f003 f9d9 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4e46:	4680      	mov	r8, r0
   d4e48:	4815      	ldr	r0, [pc, #84]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e4a:	f003 f9d8 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4e4e:	fb96 f6f5 	sdiv	r6, r6, r5
   d4e52:	fb9b f3f5 	sdiv	r3, fp, r5
  clearScreen();

  uint8_t color = WHITE;
  for (int16_t i = min(display.width(), display.height()) / 2; i > 0; i -= 5)
  {
    display.fillTriangle(display.width() / 2, display.height() / 2 - i,
   d4e56:	b2a4      	uxth	r4, r4
                         display.width() / 2 - i, display.height() / 2 + i,
                         display.width() / 2 + i, display.height() / 2 + i, WHITE);
   d4e58:	fb90 f0f5 	sdiv	r0, r0, r5
   d4e5c:	4420      	add	r0, r4
   d4e5e:	b200      	sxth	r0, r0
   d4e60:	9002      	str	r0, [sp, #8]
   d4e62:	4426      	add	r6, r4
   d4e64:	fb98 f0f5 	sdiv	r0, r8, r5
   d4e68:	4420      	add	r0, r4
   d4e6a:	1b1b      	subs	r3, r3, r4
   d4e6c:	b200      	sxth	r0, r0
   d4e6e:	fb99 f2f5 	sdiv	r2, r9, r5
   d4e72:	b236      	sxth	r6, r6
   d4e74:	1b12      	subs	r2, r2, r4
   d4e76:	9001      	str	r0, [sp, #4]
   d4e78:	b21b      	sxth	r3, r3
   d4e7a:	b212      	sxth	r2, r2
   d4e7c:	4808      	ldr	r0, [pc, #32]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e7e:	fb9a f1f5 	sdiv	r1, sl, r5
   d4e82:	9703      	str	r7, [sp, #12]
   d4e84:	b209      	sxth	r1, r1
   d4e86:	9600      	str	r6, [sp, #0]
   d4e88:	f002 ffb7 	bl	d7dfa <_ZN12Adafruit_GFX12fillTriangleEsssssst>
   d4e8c:	3c05      	subs	r4, #5
    if (color == WHITE)
      color = BLACK;
    else
      color = WHITE;
    display.display();
   d4e8e:	4804      	ldr	r0, [pc, #16]	; (d4ea0 <_Z12filltrianglev+0xac>)
   d4e90:	f003 fd60 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d4e94:	b224      	sxth	r4, r4
void filltriangle(void)
{
  clearScreen();

  uint8_t color = WHITE;
  for (int16_t i = min(display.width(), display.height()) / 2; i > 0; i -= 5)
   d4e96:	e7c1      	b.n	d4e1c <_Z12filltrianglev+0x28>
      color = BLACK;
    else
      color = WHITE;
    display.display();
  }
}
   d4e98:	b005      	add	sp, #20
   d4e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e9e:	bf00      	nop
   d4ea0:	2003e1c8 	.word	0x2003e1c8

000d4ea4 <_Z13drawTrianglesv>:

void drawTriangles()
{
   d4ea4:	b510      	push	{r4, lr}
  appmode = 1;
   d4ea6:	4c0a      	ldr	r4, [pc, #40]	; (d4ed0 <_Z13drawTrianglesv+0x2c>)
   d4ea8:	2301      	movs	r3, #1
   d4eaa:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d4eac:	4b09      	ldr	r3, [pc, #36]	; (d4ed4 <_Z13drawTrianglesv+0x30>)
   d4eae:	2200      	movs	r2, #0
   d4eb0:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d4eb2:	f001 fdd3 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d4eb6:	7823      	ldrb	r3, [r4, #0]
   d4eb8:	b143      	cbz	r3, d4ecc <_Z13drawTrianglesv+0x28>
  {
    drawtriangle();
   d4eba:	f7ff ff43 	bl	d4d44 <_Z12drawtrianglev>
    delay(1000);
   d4ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ec2:	f004 fc2d 	bl	d9720 <delay>
    filltriangle();
   d4ec6:	f7ff ff95 	bl	d4df4 <_Z12filltrianglev>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d4eca:	e7f4      	b.n	d4eb6 <_Z13drawTrianglesv+0x12>
   d4ecc:	bd10      	pop	{r4, pc}
   d4ece:	bf00      	nop
   d4ed0:	2003e1f6 	.word	0x2003e1f6
   d4ed4:	2003e208 	.word	0x2003e208

000d4ed8 <_Z13drawroundrectv>:
    filltriangle();
  }
}

void drawroundrect(void)
{
   d4ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  clearScreen();
   d4edc:	f000 faa4 	bl	d5428 <_Z11clearScreenv>

  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4ee0:	2500      	movs	r5, #0
   d4ee2:	f04f 0802 	mov.w	r8, #2
  {
    display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, WHITE);
   d4ee6:	2701      	movs	r7, #1

void drawroundrect(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4ee8:	4819      	ldr	r0, [pc, #100]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4eea:	f003 f988 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4eee:	fb90 f0f8 	sdiv	r0, r0, r8
   d4ef2:	b200      	sxth	r0, r0
   d4ef4:	3802      	subs	r0, #2
   d4ef6:	4285      	cmp	r5, r0
   d4ef8:	da26      	bge.n	d4f48 <_Z13drawroundrectv+0x70>
  {
    display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, WHITE);
   d4efa:	4815      	ldr	r0, [pc, #84]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4efc:	f003 f97c 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4f00:	4682      	mov	sl, r0
   d4f02:	4813      	ldr	r0, [pc, #76]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4f04:	f003 f97b 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4f08:	b2ae      	uxth	r6, r5
   d4f0a:	0074      	lsls	r4, r6, #1
   d4f0c:	fa1f f984 	uxth.w	r9, r4
   d4f10:	4604      	mov	r4, r0
   d4f12:	480f      	ldr	r0, [pc, #60]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4f14:	f003 f973 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4f18:	ebc9 0404 	rsb	r4, r9, r4
   d4f1c:	2204      	movs	r2, #4
   d4f1e:	ebc9 030a 	rsb	r3, r9, sl
   d4f22:	fb90 f0f2 	sdiv	r0, r0, r2
   d4f26:	b224      	sxth	r4, r4
   d4f28:	b202      	sxth	r2, r0
   d4f2a:	4629      	mov	r1, r5
   d4f2c:	9201      	str	r2, [sp, #4]
   d4f2e:	b21b      	sxth	r3, r3
   d4f30:	462a      	mov	r2, r5
   d4f32:	4807      	ldr	r0, [pc, #28]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4f34:	9702      	str	r7, [sp, #8]
   d4f36:	9400      	str	r4, [sp, #0]
   d4f38:	f002 fe67 	bl	d7c0a <_ZN12Adafruit_GFX13drawRoundRectEssssst>
   d4f3c:	1cb5      	adds	r5, r6, #2
    display.display();
   d4f3e:	4804      	ldr	r0, [pc, #16]	; (d4f50 <_Z13drawroundrectv+0x78>)
   d4f40:	f003 fd08 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d4f44:	b22d      	sxth	r5, r5

void drawroundrect(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4f46:	e7cf      	b.n	d4ee8 <_Z13drawroundrectv+0x10>
  {
    display.drawRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, WHITE);
    display.display();
  }
}
   d4f48:	b004      	add	sp, #16
   d4f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f4e:	bf00      	nop
   d4f50:	2003e1c8 	.word	0x2003e1c8

000d4f54 <_Z13fillroundrectv>:

void fillroundrect(void)
{
   d4f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f58:	b085      	sub	sp, #20
  clearScreen();
   d4f5a:	f000 fa65 	bl	d5428 <_Z11clearScreenv>

  uint8_t color = WHITE;
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4f5e:	2500      	movs	r5, #0

void fillroundrect(void)
{
  clearScreen();

  uint8_t color = WHITE;
   d4f60:	2601      	movs	r6, #1
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4f62:	f04f 0802 	mov.w	r8, #2
  {
    display.fillRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, color);
   d4f66:	2704      	movs	r7, #4
void fillroundrect(void)
{
  clearScreen();

  uint8_t color = WHITE;
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4f68:	481b      	ldr	r0, [pc, #108]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4f6a:	f003 f948 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4f6e:	fb90 f0f8 	sdiv	r0, r0, r8
   d4f72:	b200      	sxth	r0, r0
   d4f74:	3802      	subs	r0, #2
   d4f76:	4285      	cmp	r5, r0
   d4f78:	da2a      	bge.n	d4fd0 <_Z13fillroundrectv+0x7c>
  {
    display.fillRoundRect(i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, color);
   d4f7a:	4817      	ldr	r0, [pc, #92]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4f7c:	f003 f93c 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d4f80:	4683      	mov	fp, r0
   d4f82:	4815      	ldr	r0, [pc, #84]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4f84:	f003 f93b 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4f88:	fa1f f985 	uxth.w	r9, r5
   d4f8c:	ea4f 0449 	mov.w	r4, r9, lsl #1
   d4f90:	fa1f fa84 	uxth.w	sl, r4
   d4f94:	4604      	mov	r4, r0
   d4f96:	4810      	ldr	r0, [pc, #64]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4f98:	f003 f931 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d4f9c:	ebca 0404 	rsb	r4, sl, r4
   d4fa0:	ebca 030b 	rsb	r3, sl, fp
   d4fa4:	fb90 f0f7 	sdiv	r0, r0, r7
   d4fa8:	b224      	sxth	r4, r4
   d4faa:	b200      	sxth	r0, r0
   d4fac:	462a      	mov	r2, r5
   d4fae:	4629      	mov	r1, r5
   d4fb0:	9602      	str	r6, [sp, #8]
   d4fb2:	9001      	str	r0, [sp, #4]
   d4fb4:	b21b      	sxth	r3, r3
   d4fb6:	4808      	ldr	r0, [pc, #32]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4fb8:	9400      	str	r4, [sp, #0]
   d4fba:	f002 feaa 	bl	d7d12 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
   d4fbe:	f109 0502 	add.w	r5, r9, #2
    if (color == WHITE)
      color = BLACK;
    else
      color = WHITE;
    display.display();
   d4fc2:	4805      	ldr	r0, [pc, #20]	; (d4fd8 <_Z13fillroundrectv+0x84>)
   d4fc4:	f086 0601 	eor.w	r6, r6, #1
   d4fc8:	f003 fcc4 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d4fcc:	b22d      	sxth	r5, r5
void fillroundrect(void)
{
  clearScreen();

  uint8_t color = WHITE;
  for (int16_t i = 0; i < display.height() / 2 - 2; i += 2)
   d4fce:	e7cb      	b.n	d4f68 <_Z13fillroundrectv+0x14>
      color = BLACK;
    else
      color = WHITE;
    display.display();
  }
}
   d4fd0:	b005      	add	sp, #20
   d4fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4fd6:	bf00      	nop
   d4fd8:	2003e1c8 	.word	0x2003e1c8

000d4fdc <_Z21drawRoundedRectanglesv>:

void drawRoundedRectangles()
{
   d4fdc:	b510      	push	{r4, lr}
  appmode = 1;
   d4fde:	4c08      	ldr	r4, [pc, #32]	; (d5000 <_Z21drawRoundedRectanglesv+0x24>)
   d4fe0:	2301      	movs	r3, #1
   d4fe2:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d4fe4:	4b07      	ldr	r3, [pc, #28]	; (d5004 <_Z21drawRoundedRectanglesv+0x28>)
   d4fe6:	2200      	movs	r2, #0
   d4fe8:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d4fea:	f001 fd37 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d4fee:	7823      	ldrb	r3, [r4, #0]
   d4ff0:	b123      	cbz	r3, d4ffc <_Z21drawRoundedRectanglesv+0x20>
  {
    drawroundrect();
   d4ff2:	f7ff ff71 	bl	d4ed8 <_Z13drawroundrectv>
    fillroundrect();
   d4ff6:	f7ff ffad 	bl	d4f54 <_Z13fillroundrectv>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d4ffa:	e7f8      	b.n	d4fee <_Z21drawRoundedRectanglesv+0x12>
   d4ffc:	bd10      	pop	{r4, pc}
   d4ffe:	bf00      	nop
   d5000:	2003e1f6 	.word	0x2003e1f6
   d5004:	2003e208 	.word	0x2003e208

000d5008 <_Z10scrolltextv>:
    fillrect();
  }
}

void scrolltext()
{
   d5008:	b510      	push	{r4, lr}
  clearScreen();

  display.setTextSize(2);
   d500a:	4c2a      	ldr	r4, [pc, #168]	; (d50b4 <_Z10scrolltextv+0xac>)
  }
}

void scrolltext()
{
  clearScreen();
   d500c:	f000 fa0c 	bl	d5428 <_Z11clearScreenv>

  display.setTextSize(2);
   d5010:	4620      	mov	r0, r4
   d5012:	2102      	movs	r1, #2
   d5014:	f003 f8e4 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d5018:	4620      	mov	r0, r4
   d501a:	2101      	movs	r1, #1
   d501c:	f003 f8e5 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(10, 0);
   d5020:	2200      	movs	r2, #0
   d5022:	210a      	movs	r1, #10
   d5024:	4620      	mov	r0, r4
   d5026:	f003 f8d8 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.clearDisplay();
   d502a:	4620      	mov	r0, r4
   d502c:	f003 fd08 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.println("#Parti");
   d5030:	4921      	ldr	r1, [pc, #132]	; (d50b8 <_Z10scrolltextv+0xb0>)
   d5032:	4620      	mov	r0, r4
   d5034:	f005 f987 	bl	da346 <_ZN5Print7printlnEPKc>
  display.println("Badge");
   d5038:	4920      	ldr	r1, [pc, #128]	; (d50bc <_Z10scrolltextv+0xb4>)
   d503a:	4620      	mov	r0, r4
   d503c:	f005 f983 	bl	da346 <_ZN5Print7printlnEPKc>
  display.display();
   d5040:	4620      	mov	r0, r4
   d5042:	f003 fc87 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>

  display.startscrollright(0B00000000, 0x0F);
   d5046:	220f      	movs	r2, #15
   d5048:	2100      	movs	r1, #0
   d504a:	4620      	mov	r0, r4
   d504c:	f003 fbda 	bl	d8804 <_ZN16Adafruit_SSD130616startscrollrightEhh>
  delay(2000);
   d5050:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5054:	f004 fb64 	bl	d9720 <delay>
  display.stopscroll();
   d5058:	4620      	mov	r0, r4
   d505a:	f003 fc77 	bl	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
  delay(1000);
   d505e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5062:	f004 fb5d 	bl	d9720 <delay>
  display.startscrollleft(0B00000000, 0x0F);
   d5066:	220f      	movs	r2, #15
   d5068:	2100      	movs	r1, #0
   d506a:	4620      	mov	r0, r4
   d506c:	f003 fbef 	bl	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
  delay(2000);
   d5070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5074:	f004 fb54 	bl	d9720 <delay>
  display.stopscroll();
   d5078:	4620      	mov	r0, r4
   d507a:	f003 fc67 	bl	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
  delay(1000);
   d507e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5082:	f004 fb4d 	bl	d9720 <delay>
  display.startscrolldiagright(0B00000000, 0B00000111);
   d5086:	2207      	movs	r2, #7
   d5088:	2100      	movs	r1, #0
   d508a:	4620      	mov	r0, r4
   d508c:	f003 fc04 	bl	d8898 <_ZN16Adafruit_SSD130620startscrolldiagrightEhh>
  delay(2000);
   d5090:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5094:	f004 fb44 	bl	d9720 <delay>
  display.startscrolldiagleft(0B00000000, 0B00000111);
   d5098:	4620      	mov	r0, r4
   d509a:	2207      	movs	r2, #7
   d509c:	2100      	movs	r1, #0
   d509e:	f003 fc28 	bl	d88f2 <_ZN16Adafruit_SSD130619startscrolldiagleftEhh>
  delay(2000);
   d50a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d50a6:	f004 fb3b 	bl	d9720 <delay>
  display.stopscroll();
   d50aa:	4620      	mov	r0, r4
}
   d50ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
  display.startscrolldiagright(0B00000000, 0B00000111);
  delay(2000);
  display.startscrolldiagleft(0B00000000, 0B00000111);
  delay(2000);
  display.stopscroll();
   d50b0:	f003 bc4c 	b.w	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
   d50b4:	2003e1c8 	.word	0x2003e1c8
   d50b8:	000dc790 	.word	0x000dc790
   d50bc:	000dcd70 	.word	0x000dcd70

000d50c0 <_Z10scrollTextv>:
}

void scrollText(void)
{
   d50c0:	b510      	push	{r4, lr}
  appmode = 1;
   d50c2:	4c07      	ldr	r4, [pc, #28]	; (d50e0 <_Z10scrollTextv+0x20>)
   d50c4:	2301      	movs	r3, #1
   d50c6:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d50c8:	4b06      	ldr	r3, [pc, #24]	; (d50e4 <_Z10scrollTextv+0x24>)
   d50ca:	2200      	movs	r2, #0
   d50cc:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d50ce:	f001 fcc5 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d50d2:	7823      	ldrb	r3, [r4, #0]
   d50d4:	b113      	cbz	r3, d50dc <_Z10scrollTextv+0x1c>
  {
    scrolltext();
   d50d6:	f7ff ff97 	bl	d5008 <_Z10scrolltextv>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d50da:	e7fa      	b.n	d50d2 <_Z10scrollTextv+0x12>
   d50dc:	bd10      	pop	{r4, pc}
   d50de:	bf00      	nop
   d50e0:	2003e1f6 	.word	0x2003e1f6
   d50e4:	2003e208 	.word	0x2003e208

000d50e8 <_Z8fillrectv>:
    fillroundrect();
  }
}

void fillrect(void)
{
   d50e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  clearScreen();
   d50ec:	f000 f99c 	bl	d5428 <_Z11clearScreenv>

  uint8_t color = 1;
  for (int16_t i = 0; i < display.height() / 2; i += 3)
   d50f0:	2600      	movs	r6, #0

void fillrect(void)
{
  clearScreen();

  uint8_t color = 1;
   d50f2:	2501      	movs	r5, #1
  for (int16_t i = 0; i < display.height() / 2; i += 3)
   d50f4:	f04f 0802 	mov.w	r8, #2
   d50f8:	4815      	ldr	r0, [pc, #84]	; (d5150 <_Z8fillrectv+0x68>)
   d50fa:	f003 f880 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d50fe:	fb90 f0f8 	sdiv	r0, r0, r8
   d5102:	b200      	sxth	r0, r0
   d5104:	4286      	cmp	r6, r0
   d5106:	da1f      	bge.n	d5148 <_Z8fillrectv+0x60>
  {
    // alternate colors
    display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, color % 2);
   d5108:	4811      	ldr	r0, [pc, #68]	; (d5150 <_Z8fillrectv+0x68>)
   d510a:	f003 f875 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d510e:	4681      	mov	r9, r0
   d5110:	480f      	ldr	r0, [pc, #60]	; (d5150 <_Z8fillrectv+0x68>)
   d5112:	f003 f874 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5116:	b2b7      	uxth	r7, r6
   d5118:	007c      	lsls	r4, r7, #1
   d511a:	b2a4      	uxth	r4, r4
   d511c:	1b00      	subs	r0, r0, r4
   d511e:	f005 0201 	and.w	r2, r5, #1
   d5122:	ebc4 0309 	rsb	r3, r4, r9
   d5126:	b204      	sxth	r4, r0
   d5128:	4631      	mov	r1, r6
   d512a:	9201      	str	r2, [sp, #4]
   d512c:	b21b      	sxth	r3, r3
   d512e:	4632      	mov	r2, r6
   d5130:	4807      	ldr	r0, [pc, #28]	; (d5150 <_Z8fillrectv+0x68>)
   d5132:	9400      	str	r4, [sp, #0]
   d5134:	f002 faef 	bl	d7716 <_ZN12Adafruit_GFX8fillRectEsssst>
    display.display();
    color++;
   d5138:	3501      	adds	r5, #1
  uint8_t color = 1;
  for (int16_t i = 0; i < display.height() / 2; i += 3)
  {
    // alternate colors
    display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, color % 2);
    display.display();
   d513a:	4805      	ldr	r0, [pc, #20]	; (d5150 <_Z8fillrectv+0x68>)
   d513c:	1cfe      	adds	r6, r7, #3
   d513e:	f003 fc09 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    color++;
   d5142:	b2ed      	uxtb	r5, r5
   d5144:	b236      	sxth	r6, r6
void fillrect(void)
{
  clearScreen();

  uint8_t color = 1;
  for (int16_t i = 0; i < display.height() / 2; i += 3)
   d5146:	e7d7      	b.n	d50f8 <_Z8fillrectv+0x10>
    // alternate colors
    display.fillRect(i, i, display.width() - i * 2, display.height() - i * 2, color % 2);
    display.display();
    color++;
  }
}
   d5148:	b003      	add	sp, #12
   d514a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d514e:	bf00      	nop
   d5150:	2003e1c8 	.word	0x2003e1c8

000d5154 <_Z8drawrectv>:

void drawrect(void)
{
   d5154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  clearScreen();
   d5158:	f000 f966 	bl	d5428 <_Z11clearScreenv>

  for (int16_t i = 0; i < display.height() / 2; i += 2)
   d515c:	2500      	movs	r5, #0
   d515e:	f04f 0802 	mov.w	r8, #2
  {
    display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, WHITE);
   d5162:	2701      	movs	r7, #1

void drawrect(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height() / 2; i += 2)
   d5164:	4813      	ldr	r0, [pc, #76]	; (d51b4 <_Z8drawrectv+0x60>)
   d5166:	f003 f84a 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d516a:	fb90 f0f8 	sdiv	r0, r0, r8
   d516e:	b200      	sxth	r0, r0
   d5170:	4285      	cmp	r5, r0
   d5172:	da1b      	bge.n	d51ac <_Z8drawrectv+0x58>
  {
    display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, WHITE);
   d5174:	480f      	ldr	r0, [pc, #60]	; (d51b4 <_Z8drawrectv+0x60>)
   d5176:	f003 f83f 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d517a:	4681      	mov	r9, r0
   d517c:	480d      	ldr	r0, [pc, #52]	; (d51b4 <_Z8drawrectv+0x60>)
   d517e:	f003 f83e 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5182:	b2ae      	uxth	r6, r5
   d5184:	0074      	lsls	r4, r6, #1
   d5186:	b2a4      	uxth	r4, r4
   d5188:	1b00      	subs	r0, r0, r4
   d518a:	ebc4 0309 	rsb	r3, r4, r9
   d518e:	b204      	sxth	r4, r0
   d5190:	462a      	mov	r2, r5
   d5192:	4629      	mov	r1, r5
   d5194:	b21b      	sxth	r3, r3
   d5196:	4807      	ldr	r0, [pc, #28]	; (d51b4 <_Z8drawrectv+0x60>)
   d5198:	9701      	str	r7, [sp, #4]
   d519a:	9400      	str	r4, [sp, #0]
   d519c:	f002 fa70 	bl	d7680 <_ZN12Adafruit_GFX8drawRectEsssst>
   d51a0:	1cb5      	adds	r5, r6, #2
    display.display();
   d51a2:	4804      	ldr	r0, [pc, #16]	; (d51b4 <_Z8drawrectv+0x60>)
   d51a4:	f003 fbd6 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d51a8:	b22d      	sxth	r5, r5

void drawrect(void)
{
  clearScreen();

  for (int16_t i = 0; i < display.height() / 2; i += 2)
   d51aa:	e7db      	b.n	d5164 <_Z8drawrectv+0x10>
  {
    display.drawRect(i, i, display.width() - 2 * i, display.height() - 2 * i, WHITE);
    display.display();
  }
}
   d51ac:	b003      	add	sp, #12
   d51ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d51b2:	bf00      	nop
   d51b4:	2003e1c8 	.word	0x2003e1c8

000d51b8 <_Z14drawRectanglesv>:

void drawRectangles()
{
   d51b8:	b510      	push	{r4, lr}
  appmode = 1;
   d51ba:	4c08      	ldr	r4, [pc, #32]	; (d51dc <_Z14drawRectanglesv+0x24>)
   d51bc:	2301      	movs	r3, #1
   d51be:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d51c0:	4b07      	ldr	r3, [pc, #28]	; (d51e0 <_Z14drawRectanglesv+0x28>)
   d51c2:	2200      	movs	r2, #0
   d51c4:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d51c6:	f001 fc49 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d51ca:	7823      	ldrb	r3, [r4, #0]
   d51cc:	b123      	cbz	r3, d51d8 <_Z14drawRectanglesv+0x20>
  {
    drawrect();
   d51ce:	f7ff ffc1 	bl	d5154 <_Z8drawrectv>
    fillrect();
   d51d2:	f7ff ff89 	bl	d50e8 <_Z8fillrectv>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d51d6:	e7f8      	b.n	d51ca <_Z14drawRectanglesv+0x12>
   d51d8:	bd10      	pop	{r4, pc}
   d51da:	bf00      	nop
   d51dc:	2003e1f6 	.word	0x2003e1f6
   d51e0:	2003e208 	.word	0x2003e208

000d51e4 <_Z15cycleAnimationsv>:
    scrolltext();
  }
}

void cycleAnimations()
{
   d51e4:	b510      	push	{r4, lr}
  appmode = 1;
   d51e6:	4c3c      	ldr	r4, [pc, #240]	; (d52d8 <_Z15cycleAnimationsv+0xf4>)
   d51e8:	2301      	movs	r3, #1
   d51ea:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d51ec:	4b3b      	ldr	r3, [pc, #236]	; (d52dc <_Z15cycleAnimationsv+0xf8>)
   d51ee:	2200      	movs	r2, #0
   d51f0:	701a      	strb	r2, [r3, #0]
  setupLEDButtonInterrupt();
   d51f2:	f001 fc33 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  while (appmode)
   d51f6:	7823      	ldrb	r3, [r4, #0]
   d51f8:	2b00      	cmp	r3, #0
   d51fa:	d06b      	beq.n	d52d4 <_Z15cycleAnimationsv+0xf0>
  {
    clearScreen();
   d51fc:	f000 f914 	bl	d5428 <_Z11clearScreenv>

    // draw rectangles
    drawrect();
   d5200:	f7ff ffa8 	bl	d5154 <_Z8drawrectv>
    display.display();
   d5204:	4836      	ldr	r0, [pc, #216]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5206:	f003 fba5 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    delay(2000);
   d520a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d520e:	f004 fa87 	bl	d9720 <delay>
    display.clearDisplay();
   d5212:	4833      	ldr	r0, [pc, #204]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5214:	f003 fc14 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    // draw multiple rectangles
    fillrect();
   d5218:	f7ff ff66 	bl	d50e8 <_Z8fillrectv>
    display.display();
   d521c:	4830      	ldr	r0, [pc, #192]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d521e:	f003 fb99 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    delay(2000);
   d5222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5226:	f004 fa7b 	bl	d9720 <delay>
    display.clearDisplay();
   d522a:	482d      	ldr	r0, [pc, #180]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d522c:	f003 fc08 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    // draw mulitple circles
    drawcircle();
   d5230:	f7ff fd4c 	bl	d4ccc <_Z10drawcirclev>
    display.display();
   d5234:	482a      	ldr	r0, [pc, #168]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5236:	f003 fb8d 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    delay(2000);
   d523a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d523e:	f004 fa6f 	bl	d9720 <delay>
    display.clearDisplay();
   d5242:	4827      	ldr	r0, [pc, #156]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5244:	f003 fbfc 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    drawroundrect();
   d5248:	f7ff fe46 	bl	d4ed8 <_Z13drawroundrectv>
    delay(2000);
   d524c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5250:	f004 fa66 	bl	d9720 <delay>
    display.clearDisplay();
   d5254:	4822      	ldr	r0, [pc, #136]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5256:	f003 fbf3 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    fillroundrect();
   d525a:	f7ff fe7b 	bl	d4f54 <_Z13fillroundrectv>
    delay(2000);
   d525e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5262:	f004 fa5d 	bl	d9720 <delay>
    display.clearDisplay();
   d5266:	481e      	ldr	r0, [pc, #120]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d5268:	f003 fbea 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    drawtriangle();
   d526c:	f7ff fd6a 	bl	d4d44 <_Z12drawtrianglev>
    delay(2000);
   d5270:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5274:	f004 fa54 	bl	d9720 <delay>
    display.clearDisplay();
   d5278:	4819      	ldr	r0, [pc, #100]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d527a:	f003 fbe1 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    filltriangle();
   d527e:	f7ff fdb9 	bl	d4df4 <_Z12filltrianglev>
    delay(2000);
   d5282:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5286:	f004 fa4b 	bl	d9720 <delay>
    display.clearDisplay();
   d528a:	4815      	ldr	r0, [pc, #84]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d528c:	f003 fbd8 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    // draw scrolling text
    scrolltext();
   d5290:	f7ff feba 	bl	d5008 <_Z10scrolltextv>
    delay(2000);
   d5294:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5298:	f004 fa42 	bl	d9720 <delay>
    display.clearDisplay();
   d529c:	4810      	ldr	r0, [pc, #64]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d529e:	f003 fbcf 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

    // invert the display
    display.invertDisplay(true);
   d52a2:	2101      	movs	r1, #1
   d52a4:	480e      	ldr	r0, [pc, #56]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d52a6:	f003 faa7 	bl	d87f8 <_ZN16Adafruit_SSD130613invertDisplayEh>
    delay(1000);
   d52aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d52ae:	f004 fa37 	bl	d9720 <delay>
    display.invertDisplay(false);
   d52b2:	2100      	movs	r1, #0
   d52b4:	480a      	ldr	r0, [pc, #40]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d52b6:	f003 fa9f 	bl	d87f8 <_ZN16Adafruit_SSD130613invertDisplayEh>
    delay(1000);
   d52ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d52be:	f004 fa2f 	bl	d9720 <delay>
    display.clearDisplay();
   d52c2:	4807      	ldr	r0, [pc, #28]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d52c4:	f003 fbbc 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d52c8:	4805      	ldr	r0, [pc, #20]	; (d52e0 <_Z15cycleAnimationsv+0xfc>)
   d52ca:	f003 fb43 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>

    snowflakes();
   d52ce:	f7ff fcf1 	bl	d4cb4 <_Z10snowflakesv>
{
  appmode = 1;
  btnid = 0;
  setupLEDButtonInterrupt();

  while (appmode)
   d52d2:	e790      	b.n	d51f6 <_Z15cycleAnimationsv+0x12>
   d52d4:	bd10      	pop	{r4, pc}
   d52d6:	bf00      	nop
   d52d8:	2003e1f6 	.word	0x2003e1f6
   d52dc:	2003e208 	.word	0x2003e208
   d52e0:	2003e1c8 	.word	0x2003e1c8

000d52e4 <_Z11showSpectrav>:
  display.display();
  display.startscrolldiagright(0x00, 0x07);
}

void showSpectra()
{
   d52e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.clearDisplay();
   d52e6:	4c11      	ldr	r4, [pc, #68]	; (d532c <_Z11showSpectrav+0x48>)
   d52e8:	4620      	mov	r0, r4
   d52ea:	f003 fba9 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d52ee:	4620      	mov	r0, r4
   d52f0:	f003 fb30 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setCursor(0, 0);
   d52f4:	2200      	movs	r2, #0
   d52f6:	4611      	mov	r1, r2
   d52f8:	4620      	mov	r0, r4
   d52fa:	f002 ff6e 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
   d52fe:	2180      	movs	r1, #128	; 0x80
   d5300:	2240      	movs	r2, #64	; 0x40
   d5302:	2301      	movs	r3, #1
   d5304:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d5308:	2200      	movs	r2, #0
   d530a:	4611      	mov	r1, r2
   d530c:	4b08      	ldr	r3, [pc, #32]	; (d5330 <_Z11showSpectrav+0x4c>)
   d530e:	4620      	mov	r0, r4
   d5310:	f002 fe56 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d5314:	4620      	mov	r0, r4
   d5316:	f003 fb1d 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollleft(0x00, 0x0F);
   d531a:	220f      	movs	r2, #15
   d531c:	2100      	movs	r1, #0
   d531e:	4620      	mov	r0, r4
}
   d5320:	b004      	add	sp, #16
   d5322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
  display.display();
  display.startscrollleft(0x00, 0x0F);
   d5326:	f003 ba92 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d532a:	bf00      	nop
   d532c:	2003e1c8 	.word	0x2003e1c8
   d5330:	000dc96b 	.word	0x000dc96b

000d5334 <_Z9showTitlev>:
  display.startscrollleft(0x00, 0x0F);
}

// Show the title text on the display
void showTitle()
{
   d5334:	b510      	push	{r4, lr}
  display.clearDisplay();
   d5336:	4c13      	ldr	r4, [pc, #76]	; (d5384 <_Z9showTitlev+0x50>)
   d5338:	4620      	mov	r0, r4
   d533a:	f003 fb81 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextWrap(true);
   d533e:	4620      	mov	r0, r4
   d5340:	2101      	movs	r1, #1
   d5342:	f002 ff55 	bl	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
  display.setTextColor(WHITE);
   d5346:	4620      	mov	r0, r4
   d5348:	2101      	movs	r1, #1
   d534a:	f002 ff4e 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  display.setTextSize(2);
   d534e:	4620      	mov	r0, r4
   d5350:	2102      	movs	r1, #2
   d5352:	f002 ff45 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>

  display.setCursor(1, 18);
   d5356:	2212      	movs	r2, #18
   d5358:	4620      	mov	r0, r4
   d535a:	2101      	movs	r1, #1
   d535c:	f002 ff3d 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("PartiBadge");
   d5360:	4909      	ldr	r1, [pc, #36]	; (d5388 <_Z9showTitlev+0x54>)
   d5362:	4620      	mov	r0, r4
   d5364:	f004 ffef 	bl	da346 <_ZN5Print7printlnEPKc>
  display.setCursor(0, 35);
   d5368:	4620      	mov	r0, r4
   d536a:	2223      	movs	r2, #35	; 0x23
   d536c:	2100      	movs	r1, #0
   d536e:	f002 ff34 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Spectra 18");
   d5372:	4620      	mov	r0, r4
   d5374:	4905      	ldr	r1, [pc, #20]	; (d538c <_Z9showTitlev+0x58>)
   d5376:	f004 ffe6 	bl	da346 <_ZN5Print7printlnEPKc>
  display.display();
   d537a:	4620      	mov	r0, r4
}
   d537c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  display.setCursor(1, 18);
  display.println("PartiBadge");
  display.setCursor(0, 35);
  display.println("Spectra 18");
  display.display();
   d5380:	f003 bae8 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d5384:	2003e1c8 	.word	0x2003e1c8
   d5388:	000dcd6b 	.word	0x000dcd6b
   d538c:	000dcd76 	.word	0x000dcd76

000d5390 <_Z15displayCarouselv>:
int funcArraySize = sizeof(carouselFuncs) / sizeof(carouselFuncs[0]);
int currentFunc = 0;
unsigned long prevCarouselRotation;

void displayCarousel()
{
   d5390:	b570      	push	{r4, r5, r6, lr}
  unsigned long currentMillis = millis();

  if (!displayingCarousel)
   d5392:	4d15      	ldr	r5, [pc, #84]	; (d53e8 <_Z15displayCarouselv+0x58>)
   d5394:	4c15      	ldr	r4, [pc, #84]	; (d53ec <_Z15displayCarouselv+0x5c>)
   d5396:	f003 febb 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d539a:	782b      	ldrb	r3, [r5, #0]
   d539c:	b963      	cbnz	r3, d53b8 <_Z15displayCarouselv+0x28>
  {
    currentFunc = 0;
   d539e:	4e14      	ldr	r6, [pc, #80]	; (d53f0 <_Z15displayCarouselv+0x60>)
   d53a0:	6033      	str	r3, [r6, #0]
   d53a2:	f003 feb5 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
    prevCarouselRotation = millis();
    carouselFuncs[currentFunc]();
   d53a6:	6832      	ldr	r2, [r6, #0]
   d53a8:	4b12      	ldr	r3, [pc, #72]	; (d53f4 <_Z15displayCarouselv+0x64>)
  unsigned long currentMillis = millis();

  if (!displayingCarousel)
  {
    currentFunc = 0;
    prevCarouselRotation = millis();
   d53aa:	6020      	str	r0, [r4, #0]
    carouselFuncs[currentFunc]();
   d53ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   d53b0:	4798      	blx	r3
    displayingCarousel = true;
   d53b2:	2301      	movs	r3, #1
   d53b4:	702b      	strb	r3, [r5, #0]
   d53b6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else if (currentMillis - prevCarouselRotation > CAROUSEL_INTERVAL)
   d53b8:	6823      	ldr	r3, [r4, #0]
   d53ba:	f242 7210 	movw	r2, #10000	; 0x2710
   d53be:	1ac3      	subs	r3, r0, r3
   d53c0:	4293      	cmp	r3, r2
   d53c2:	d90f      	bls.n	d53e4 <_Z15displayCarouselv+0x54>
  {
    prevCarouselRotation = currentMillis;
   d53c4:	6020      	str	r0, [r4, #0]
    carouselFuncs[currentFunc]();
   d53c6:	4c0a      	ldr	r4, [pc, #40]	; (d53f0 <_Z15displayCarouselv+0x60>)
   d53c8:	4b0a      	ldr	r3, [pc, #40]	; (d53f4 <_Z15displayCarouselv+0x64>)
   d53ca:	6822      	ldr	r2, [r4, #0]
   d53cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   d53d0:	4798      	blx	r3
    currentFunc++;

    if (currentFunc == funcArraySize)
   d53d2:	4a09      	ldr	r2, [pc, #36]	; (d53f8 <_Z15displayCarouselv+0x68>)
  }
  else if (currentMillis - prevCarouselRotation > CAROUSEL_INTERVAL)
  {
    prevCarouselRotation = currentMillis;
    carouselFuncs[currentFunc]();
    currentFunc++;
   d53d4:	6823      	ldr	r3, [r4, #0]

    if (currentFunc == funcArraySize)
   d53d6:	6812      	ldr	r2, [r2, #0]
  }
  else if (currentMillis - prevCarouselRotation > CAROUSEL_INTERVAL)
  {
    prevCarouselRotation = currentMillis;
    carouselFuncs[currentFunc]();
    currentFunc++;
   d53d8:	3301      	adds	r3, #1

    if (currentFunc == funcArraySize)
   d53da:	4293      	cmp	r3, r2
  }
  else if (currentMillis - prevCarouselRotation > CAROUSEL_INTERVAL)
  {
    prevCarouselRotation = currentMillis;
    carouselFuncs[currentFunc]();
    currentFunc++;
   d53dc:	6023      	str	r3, [r4, #0]

    if (currentFunc == funcArraySize)
    {
      currentFunc = 0;
   d53de:	bf04      	itt	eq
   d53e0:	2300      	moveq	r3, #0
   d53e2:	6023      	streq	r3, [r4, #0]
   d53e4:	bd70      	pop	{r4, r5, r6, pc}
   d53e6:	bf00      	nop
   d53e8:	2003e245 	.word	0x2003e245
   d53ec:	2003e250 	.word	0x2003e250
   d53f0:	2003e248 	.word	0x2003e248
   d53f4:	2003d80c 	.word	0x2003d80c
   d53f8:	2003d808 	.word	0x2003d808

000d53fc <_Z17resetDisplayBoolsv>:
}

// Reset all display-related state booleans
void resetDisplayBools()
{
  displayingTemp = false;
   d53fc:	4a05      	ldr	r2, [pc, #20]	; (d5414 <_Z17resetDisplayBoolsv+0x18>)
   d53fe:	2300      	movs	r3, #0
   d5400:	7013      	strb	r3, [r2, #0]
  displayingWearerDetails = false;
   d5402:	4a05      	ldr	r2, [pc, #20]	; (d5418 <_Z17resetDisplayBoolsv+0x1c>)
   d5404:	7013      	strb	r3, [r2, #0]
  displayingCarousel = false;
   d5406:	4a05      	ldr	r2, [pc, #20]	; (d541c <_Z17resetDisplayBoolsv+0x20>)
   d5408:	7013      	strb	r3, [r2, #0]
  displayingBattery = false;
   d540a:	4a05      	ldr	r2, [pc, #20]	; (d5420 <_Z17resetDisplayBoolsv+0x24>)
   d540c:	7013      	strb	r3, [r2, #0]
  showingLightAnimation = false;
   d540e:	4a05      	ldr	r2, [pc, #20]	; (d5424 <_Z17resetDisplayBoolsv+0x28>)
   d5410:	7013      	strb	r3, [r2, #0]
   d5412:	4770      	bx	lr
   d5414:	2003e244 	.word	0x2003e244
   d5418:	2003e24c 	.word	0x2003e24c
   d541c:	2003e245 	.word	0x2003e245
   d5420:	2003e24e 	.word	0x2003e24e
   d5424:	2003e24d 	.word	0x2003e24d

000d5428 <_Z11clearScreenv>:
}

// Clear the OLED display
void clearScreen()
{
   d5428:	b510      	push	{r4, lr}
  display.stopscroll();
   d542a:	4c0a      	ldr	r4, [pc, #40]	; (d5454 <_Z11clearScreenv+0x2c>)
   d542c:	4620      	mov	r0, r4
   d542e:	f003 fa8d 	bl	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
  display.clearDisplay();
   d5432:	4620      	mov	r0, r4
   d5434:	f003 fb04 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d5438:	4620      	mov	r0, r4
   d543a:	f003 fa8b 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setCursor(0, 0);
   d543e:	2200      	movs	r2, #0
   d5440:	4620      	mov	r0, r4
   d5442:	4611      	mov	r1, r2
   d5444:	f002 fec9 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.setTextWrap(true);
   d5448:	4620      	mov	r0, r4
   d544a:	2101      	movs	r1, #1
}
   d544c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  display.stopscroll();
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.setTextWrap(true);
   d5450:	f002 bece 	b.w	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
   d5454:	2003e1c8 	.word	0x2003e1c8

000d5458 <_Z20displayWearerDetailsv>:
  delay(2000);
}

// Display the wearer's first and last name on the display
void displayWearerDetails()
{
   d5458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  displayingWearerDetails = true;
   d545a:	4b28      	ldr	r3, [pc, #160]	; (d54fc <_Z20displayWearerDetailsv+0xa4>)
   d545c:	4928      	ldr	r1, [pc, #160]	; (d5500 <_Z20displayWearerDetailsv+0xa8>)
   d545e:	2201      	movs	r2, #1
   d5460:	701a      	strb	r2, [r3, #0]
   d5462:	4a28      	ldr	r2, [pc, #160]	; (d5504 <_Z20displayWearerDetailsv+0xac>)

  int fnameLength = wearerFirstName.length();
   d5464:	6888      	ldr	r0, [r1, #8]
  int lnameLength = wearerLastName.length();
   d5466:	6893      	ldr	r3, [r2, #8]
   d5468:	4298      	cmp	r0, r3
   d546a:	4607      	mov	r7, r0
   d546c:	bfb8      	it	lt
   d546e:	461f      	movlt	r7, r3
  int longestLength = ((fnameLength > lnameLength) ? fnameLength : lnameLength);

  if (fnameLength > 0 || lnameLength > 0)
   d5470:	2800      	cmp	r0, #0
   d5472:	460e      	mov	r6, r1
   d5474:	4615      	mov	r5, r2
   d5476:	dc01      	bgt.n	d547c <_Z20displayWearerDetailsv+0x24>
   d5478:	2b00      	cmp	r3, #0
   d547a:	dd3d      	ble.n	d54f8 <_Z20displayWearerDetailsv+0xa0>
  {
    clearScreen();
   d547c:	f7ff ffd4 	bl	d5428 <_Z11clearScreenv>
   d5480:	4b21      	ldr	r3, [pc, #132]	; (d5508 <_Z20displayWearerDetailsv+0xb0>)
    //put Twitter info up in yellow band area
    if (wearerTwitter.length() > 10)
   d5482:	689a      	ldr	r2, [r3, #8]
   d5484:	2a0a      	cmp	r2, #10
   d5486:	461c      	mov	r4, r3
   d5488:	d903      	bls.n	d5492 <_Z20displayWearerDetailsv+0x3a>
    {
      display.setTextSize(1);
   d548a:	2101      	movs	r1, #1
   d548c:	481f      	ldr	r0, [pc, #124]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d548e:	f002 fea7 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    }
    if (wearerTwitter.length() > 0)
   d5492:	68a3      	ldr	r3, [r4, #8]
   d5494:	b123      	cbz	r3, d54a0 <_Z20displayWearerDetailsv+0x48>
    {
      display.println(wearerTwitter);
   d5496:	4b1c      	ldr	r3, [pc, #112]	; (d5508 <_Z20displayWearerDetailsv+0xb0>)
   d5498:	481c      	ldr	r0, [pc, #112]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d549a:	6819      	ldr	r1, [r3, #0]
   d549c:	f004 ff53 	bl	da346 <_ZN5Print7printlnEPKc>

    // setTextSize based on largest of two lengths
    // Display is 128 x 64
    // So if the longest of the two names is longer than 10 characters,
    // set the size to 1
    if (longestLength > 10)
   d54a0:	2f0a      	cmp	r7, #10
   d54a2:	dd05      	ble.n	d54b0 <_Z20displayWearerDetailsv+0x58>
    {
      display.setTextSize(1);
   d54a4:	2101      	movs	r1, #1
   d54a6:	4819      	ldr	r0, [pc, #100]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54a8:	f002 fe9a 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
      display.setCursor(0, 20);
   d54ac:	2214      	movs	r2, #20
   d54ae:	e004      	b.n	d54ba <_Z20displayWearerDetailsv+0x62>
    }
    else
    {
      display.setTextSize(2);
   d54b0:	2102      	movs	r1, #2
   d54b2:	4816      	ldr	r0, [pc, #88]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54b4:	f002 fe94 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
      display.setCursor(0, 10);
   d54b8:	220a      	movs	r2, #10
   d54ba:	2100      	movs	r1, #0
   d54bc:	4813      	ldr	r0, [pc, #76]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54be:	f002 fe8c 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
    }

    display.println();
   d54c2:	4812      	ldr	r0, [pc, #72]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54c4:	f004 ff33 	bl	da32e <_ZN5Print7printlnEv>

    if (wearerFirstName.length() > 0)
   d54c8:	68b3      	ldr	r3, [r6, #8]
   d54ca:	b123      	cbz	r3, d54d6 <_Z20displayWearerDetailsv+0x7e>
    {
      display.println(wearerFirstName);
   d54cc:	4b0c      	ldr	r3, [pc, #48]	; (d5500 <_Z20displayWearerDetailsv+0xa8>)
   d54ce:	480f      	ldr	r0, [pc, #60]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54d0:	6819      	ldr	r1, [r3, #0]
   d54d2:	f004 ff38 	bl	da346 <_ZN5Print7printlnEPKc>
    }
    if (wearerLastName.length() > 0)
   d54d6:	68ab      	ldr	r3, [r5, #8]
   d54d8:	b123      	cbz	r3, d54e4 <_Z20displayWearerDetailsv+0x8c>
    {
      display.println(wearerLastName);
   d54da:	4b0a      	ldr	r3, [pc, #40]	; (d5504 <_Z20displayWearerDetailsv+0xac>)
   d54dc:	480b      	ldr	r0, [pc, #44]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54de:	6819      	ldr	r1, [r3, #0]
   d54e0:	f004 ff31 	bl	da346 <_ZN5Print7printlnEPKc>
    }

    display.display();
   d54e4:	4809      	ldr	r0, [pc, #36]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
   d54e6:	f003 fa35 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
    display.startscrollleft(0x00, 0x0F);
   d54ea:	220f      	movs	r2, #15
   d54ec:	2100      	movs	r1, #0
   d54ee:	4807      	ldr	r0, [pc, #28]	; (d550c <_Z20displayWearerDetailsv+0xb4>)
  }
}
   d54f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    {
      display.println(wearerLastName);
    }

    display.display();
    display.startscrollleft(0x00, 0x0F);
   d54f4:	f003 b9ab 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d54f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d54fa:	bf00      	nop
   d54fc:	2003e24c 	.word	0x2003e24c
   d5500:	2003e120 	.word	0x2003e120
   d5504:	2003e1b0 	.word	0x2003e1b0
   d5508:	2003e110 	.word	0x2003e110
   d550c:	2003e1c8 	.word	0x2003e1c8

000d5510 <_Z19showTempAndHumidityv>:
  displayingBattery = true;
}

// Show the temperature and humidity on the display
void showTempAndHumidity()
{
   d5510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  clearScreen();

  display.drawBitmap(7, 18, tempImage, 16, 43, 1);
   d5512:	4c32      	ldr	r4, [pc, #200]	; (d55dc <_Z19showTempAndHumidityv+0xcc>)
}

// Show the temperature and humidity on the display
void showTempAndHumidity()
{
  clearScreen();
   d5514:	f7ff ff88 	bl	d5428 <_Z11clearScreenv>

  display.drawBitmap(7, 18, tempImage, 16, 43, 1);
   d5518:	2501      	movs	r5, #1
   d551a:	2610      	movs	r6, #16
   d551c:	232b      	movs	r3, #43	; 0x2b
   d551e:	9301      	str	r3, [sp, #4]
   d5520:	2212      	movs	r2, #18
   d5522:	4b2f      	ldr	r3, [pc, #188]	; (d55e0 <_Z19showTempAndHumidityv+0xd0>)
   d5524:	9502      	str	r5, [sp, #8]
   d5526:	4620      	mov	r0, r4
   d5528:	9600      	str	r6, [sp, #0]
   d552a:	2107      	movs	r1, #7
   d552c:	f002 fd48 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.setTextSize(1);
   d5530:	4629      	mov	r1, r5
   d5532:	4620      	mov	r0, r4
   d5534:	f002 fe54 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(52, 16);
   d5538:	4632      	mov	r2, r6
   d553a:	4620      	mov	r0, r4
   d553c:	2134      	movs	r1, #52	; 0x34
   d553e:	f002 fe4c 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Temp");
   d5542:	4928      	ldr	r1, [pc, #160]	; (d55e4 <_Z19showTempAndHumidityv+0xd4>)
   d5544:	4620      	mov	r0, r4
   d5546:	f004 fefe 	bl	da346 <_ZN5Print7printlnEPKc>
  display.setTextSize(2);
   d554a:	4620      	mov	r0, r4
   d554c:	2102      	movs	r1, #2
   d554e:	f002 fe47 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(48, 25);
   d5552:	4620      	mov	r0, r4
   d5554:	2219      	movs	r2, #25
   d5556:	2130      	movs	r1, #48	; 0x30
   d5558:	f002 fe3f 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.print((int)currentTemp);
   d555c:	4b22      	ldr	r3, [pc, #136]	; (d55e8 <_Z19showTempAndHumidityv+0xd8>)
   d555e:	220a      	movs	r2, #10
   d5560:	6819      	ldr	r1, [r3, #0]
   d5562:	4620      	mov	r0, r4
   d5564:	f004 ff54 	bl	da410 <_ZN5Print5printEii>
  display.println("f");
   d5568:	4920      	ldr	r1, [pc, #128]	; (d55ec <_Z19showTempAndHumidityv+0xdc>)
   d556a:	4620      	mov	r0, r4
   d556c:	f004 feeb 	bl	da346 <_ZN5Print7printlnEPKc>
  display.setTextSize(1);
   d5570:	4629      	mov	r1, r5
   d5572:	4620      	mov	r0, r4
   d5574:	f002 fe34 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(42, 42);
   d5578:	222a      	movs	r2, #42	; 0x2a
   d557a:	4611      	mov	r1, r2
   d557c:	4620      	mov	r0, r4
   d557e:	f002 fe2c 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Humidity");
   d5582:	491b      	ldr	r1, [pc, #108]	; (d55f0 <_Z19showTempAndHumidityv+0xe0>)
   d5584:	4620      	mov	r0, r4
   d5586:	f004 fede 	bl	da346 <_ZN5Print7printlnEPKc>
  display.setTextSize(2);
   d558a:	4620      	mov	r0, r4
   d558c:	2102      	movs	r1, #2
   d558e:	f002 fe27 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(48, 50);
   d5592:	4620      	mov	r0, r4
   d5594:	2232      	movs	r2, #50	; 0x32
   d5596:	2130      	movs	r1, #48	; 0x30
   d5598:	f002 fe1f 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.print((int)currentHumidity);
   d559c:	4b15      	ldr	r3, [pc, #84]	; (d55f4 <_Z19showTempAndHumidityv+0xe4>)
   d559e:	220a      	movs	r2, #10
   d55a0:	6819      	ldr	r1, [r3, #0]
   d55a2:	4620      	mov	r0, r4
   d55a4:	f004 ff34 	bl	da410 <_ZN5Print5printEii>
  display.println("%");
   d55a8:	4913      	ldr	r1, [pc, #76]	; (d55f8 <_Z19showTempAndHumidityv+0xe8>)
   d55aa:	4620      	mov	r0, r4
   d55ac:	f004 fecb 	bl	da346 <_ZN5Print7printlnEPKc>
  display.drawBitmap(105, 28, humidityImage, 20, 27, 1);
   d55b0:	2214      	movs	r2, #20
   d55b2:	231b      	movs	r3, #27
   d55b4:	e88d 000c 	stmia.w	sp, {r2, r3}
   d55b8:	2169      	movs	r1, #105	; 0x69
   d55ba:	4b10      	ldr	r3, [pc, #64]	; (d55fc <_Z19showTempAndHumidityv+0xec>)
   d55bc:	9502      	str	r5, [sp, #8]
   d55be:	221c      	movs	r2, #28
   d55c0:	4620      	mov	r0, r4
   d55c2:	f002 fcfd 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d55c6:	4620      	mov	r0, r4
   d55c8:	f003 f9c4 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d55cc:	4629      	mov	r1, r5
   d55ce:	4620      	mov	r0, r4
   d55d0:	f002 fe06 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>

  displayingTemp = true;
   d55d4:	4b0a      	ldr	r3, [pc, #40]	; (d5600 <_Z19showTempAndHumidityv+0xf0>)
   d55d6:	701d      	strb	r5, [r3, #0]
}
   d55d8:	b004      	add	sp, #16
   d55da:	bd70      	pop	{r4, r5, r6, pc}
   d55dc:	2003e1c8 	.word	0x2003e1c8
   d55e0:	000dc7a4 	.word	0x000dc7a4
   d55e4:	000dc759 	.word	0x000dc759
   d55e8:	2003e1ac 	.word	0x2003e1ac
   d55ec:	000dcd81 	.word	0x000dcd81
   d55f0:	000dcd83 	.word	0x000dcd83
   d55f4:	2003e130 	.word	0x2003e130
   d55f8:	000dcd8c 	.word	0x000dcd8c
   d55fc:	000dc91a 	.word	0x000dc91a
   d5600:	2003e244 	.word	0x2003e244

000d5604 <_Z9showSparkv>:

void showSpark()
{
   d5604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  clearScreen();
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
   d5606:	4c0c      	ldr	r4, [pc, #48]	; (d5638 <_Z9showSparkv+0x34>)
  displayingTemp = true;
}

void showSpark()
{
  clearScreen();
   d5608:	f7ff ff0e 	bl	d5428 <_Z11clearScreenv>
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
   d560c:	2180      	movs	r1, #128	; 0x80
   d560e:	2230      	movs	r2, #48	; 0x30
   d5610:	2301      	movs	r3, #1
   d5612:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d5616:	4620      	mov	r0, r4
   d5618:	4b08      	ldr	r3, [pc, #32]	; (d563c <_Z9showSparkv+0x38>)
   d561a:	2210      	movs	r2, #16
   d561c:	2100      	movs	r1, #0
   d561e:	f002 fccf 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d5622:	4620      	mov	r0, r4
   d5624:	f003 f996 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollleft(0x00, 0x0F);
   d5628:	220f      	movs	r2, #15
   d562a:	2100      	movs	r1, #0
   d562c:	4620      	mov	r0, r4
}
   d562e:	b004      	add	sp, #16
   d5630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void showSpark()
{
  clearScreen();
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
  display.display();
  display.startscrollleft(0x00, 0x0F);
   d5634:	f003 b90b 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d5638:	2003e1c8 	.word	0x2003e1c8
   d563c:	000dd63f 	.word	0x000dd63f

000d5640 <_Z10getCenterXPKci>:
  display.setCursor(0, 0);
  display.setTextWrap(true);
}

int getCenterX(const char text[], int textSize)
{
   d5640:	b510      	push	{r4, lr}
   d5642:	460c      	mov	r4, r1
  int textWidth = strlen(text) * 9 * textSize;
   d5644:	f006 fed5 	bl	dc3f2 <strlen>

  return 64 - (textWidth / 2);
   d5648:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   d564c:	4344      	muls	r4, r0
   d564e:	2002      	movs	r0, #2
   d5650:	fb94 f0f0 	sdiv	r0, r4, r0
}
   d5654:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   d5658:	bd10      	pop	{r4, pc}
	...

000d565c <_Z19messageBoxWithArrayPPKcii>:

void messageBoxWithArray(const char *textStrings[], int arrayLen, int textSize)
{
   d565c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
   d5660:	2a01      	cmp	r2, #1

  return 64 - (textWidth / 2);
}

void messageBoxWithArray(const char *textStrings[], int arrayLen, int textSize)
{
   d5662:	4615      	mov	r5, r2
   d5664:	4606      	mov	r6, r0
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
   d5666:	bf08      	it	eq
   d5668:	f04f 0940 	moveq.w	r9, #64	; 0x40

  return 64 - (textWidth / 2);
}

void messageBoxWithArray(const char *textStrings[], int arrayLen, int textSize)
{
   d566c:	468a      	mov	sl, r1
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
   d566e:	bf0c      	ite	eq
   d5670:	fb99 f9f1 	sdiveq	r9, r9, r1
   d5674:	f04f 0912 	movne.w	r9, #18
  clearScreen();
   d5678:	f7ff fed6 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(textSize);
   d567c:	b2e9      	uxtb	r1, r5
   d567e:	4818      	ldr	r0, [pc, #96]	; (d56e0 <_Z19messageBoxWithArrayPPKcii+0x84>)
   d5680:	eb05 0745 	add.w	r7, r5, r5, lsl #1
   d5684:	f002 fdac 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
   d5688:	00bf      	lsls	r7, r7, #2

  for (int i = 0; i < arrayLen; i++)
  {
    int x = getCenterX(textStrings[i], textSize);

    display.setCursor(x + (15 / textSize) + i, y + textHeight * i * textSize);
   d568a:	2400      	movs	r4, #0
   d568c:	b2bf      	uxth	r7, r7
   d568e:	3e04      	subs	r6, #4
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
  clearScreen();
  display.setTextSize(textSize);

  for (int i = 0; i < arrayLen; i++)
   d5690:	46a0      	mov	r8, r4
  {
    int x = getCenterX(textStrings[i], textSize);

    display.setCursor(x + (15 / textSize) + i, y + textHeight * i * textSize);
   d5692:	f04f 0b0f 	mov.w	fp, #15
   d5696:	193b      	adds	r3, r7, r4
   d5698:	b29b      	uxth	r3, r3
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
  clearScreen();
  display.setTextSize(textSize);

  for (int i = 0; i < arrayLen; i++)
   d569a:	45d0      	cmp	r8, sl
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	da18      	bge.n	d56d2 <_Z19messageBoxWithArrayPPKcii+0x76>
  {
    int x = getCenterX(textStrings[i], textSize);
   d56a0:	f856 0f04 	ldr.w	r0, [r6, #4]!
   d56a4:	4629      	mov	r1, r5
   d56a6:	f7ff ffcb 	bl	d5640 <_Z10getCenterXPKci>

    display.setCursor(x + (15 / textSize) + i, y + textHeight * i * textSize);
   d56aa:	fb9b f1f5 	sdiv	r1, fp, r5
   d56ae:	4441      	add	r1, r8
   d56b0:	eb04 0209 	add.w	r2, r4, r9
   d56b4:	4401      	add	r1, r0
   d56b6:	b212      	sxth	r2, r2
   d56b8:	b209      	sxth	r1, r1
   d56ba:	4809      	ldr	r0, [pc, #36]	; (d56e0 <_Z19messageBoxWithArrayPPKcii+0x84>)
   d56bc:	f002 fd8d 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
    display.println(textStrings[i]);
   d56c0:	6831      	ldr	r1, [r6, #0]
   d56c2:	4807      	ldr	r0, [pc, #28]	; (d56e0 <_Z19messageBoxWithArrayPPKcii+0x84>)
   d56c4:	f004 fe3f 	bl	da346 <_ZN5Print7printlnEPKc>
  int textHeight = 12;
  int y = textSize == 1 ? 64 / arrayLen : 18;
  clearScreen();
  display.setTextSize(textSize);

  for (int i = 0; i < arrayLen; i++)
   d56c8:	9b01      	ldr	r3, [sp, #4]
   d56ca:	f108 0801 	add.w	r8, r8, #1
   d56ce:	461c      	mov	r4, r3
   d56d0:	e7e1      	b.n	d5696 <_Z19messageBoxWithArrayPPKcii+0x3a>
    int x = getCenterX(textStrings[i], textSize);

    display.setCursor(x + (15 / textSize) + i, y + textHeight * i * textSize);
    display.println(textStrings[i]);
  }
  display.display();
   d56d2:	4803      	ldr	r0, [pc, #12]	; (d56e0 <_Z19messageBoxWithArrayPPKcii+0x84>)
}
   d56d4:	b003      	add	sp, #12
   d56d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int x = getCenterX(textStrings[i], textSize);

    display.setCursor(x + (15 / textSize) + i, y + textHeight * i * textSize);
    display.println(textStrings[i]);
  }
  display.display();
   d56da:	f003 b93b 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d56de:	bf00      	nop
   d56e0:	2003e1c8 	.word	0x2003e1c8

000d56e4 <_Z16showSplashscreenv>:
}

void showSplashscreen()
{
   d56e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  clearScreen();
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
   d56e6:	4c16      	ldr	r4, [pc, #88]	; (d5740 <_Z16showSplashscreenv+0x5c>)
  display.display();
}

void showSplashscreen()
{
  clearScreen();
   d56e8:	f7ff fe9e 	bl	d5428 <_Z11clearScreenv>
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
   d56ec:	2601      	movs	r6, #1
   d56ee:	2580      	movs	r5, #128	; 0x80
   d56f0:	2330      	movs	r3, #48	; 0x30
   d56f2:	2210      	movs	r2, #16
   d56f4:	2100      	movs	r1, #0
   d56f6:	9301      	str	r3, [sp, #4]
   d56f8:	4620      	mov	r0, r4
   d56fa:	4b12      	ldr	r3, [pc, #72]	; (d5744 <_Z16showSplashscreenv+0x60>)
   d56fc:	9602      	str	r6, [sp, #8]
   d56fe:	9500      	str	r5, [sp, #0]
   d5700:	f002 fc5e 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d5704:	4620      	mov	r0, r4
   d5706:	f003 f925 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d570a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d570e:	f004 f807 	bl	d9720 <delay>
  clearScreen();
   d5712:	f7ff fe89 	bl	d5428 <_Z11clearScreenv>
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
   d5716:	2200      	movs	r2, #0
   d5718:	2340      	movs	r3, #64	; 0x40
   d571a:	9301      	str	r3, [sp, #4]
   d571c:	4611      	mov	r1, r2
   d571e:	4b0a      	ldr	r3, [pc, #40]	; (d5748 <_Z16showSplashscreenv+0x64>)
   d5720:	9602      	str	r6, [sp, #8]
   d5722:	4620      	mov	r0, r4
   d5724:	9500      	str	r5, [sp, #0]
   d5726:	f002 fc4b 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d572a:	4620      	mov	r0, r4
   d572c:	f003 f912 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d5730:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d5734:	b004      	add	sp, #16
   d5736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  display.display();
  delay(2000);
  clearScreen();
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
  display.display();
  delay(2000);
   d573a:	f003 bff1 	b.w	d9720 <delay>
   d573e:	bf00      	nop
   d5740:	2003e1c8 	.word	0x2003e1c8
   d5744:	000dd63f 	.word	0x000dd63f
   d5748:	000dc96b 	.word	0x000dc96b

000d574c <_Z20displayTwitterHandlev>:
    display.startscrollleft(0x00, 0x0F);
  }
}

void displayTwitterHandle()
{
   d574c:	b508      	push	{r3, lr}
  displayingWearerDetails = true;
   d574e:	4b11      	ldr	r3, [pc, #68]	; (d5794 <_Z20displayTwitterHandlev+0x48>)
   d5750:	2201      	movs	r2, #1
   d5752:	701a      	strb	r2, [r3, #0]

  clearScreen();
   d5754:	f7ff fe68 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(2);
   d5758:	2102      	movs	r1, #2
   d575a:	480f      	ldr	r0, [pc, #60]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
   d575c:	f002 fd40 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(0, 10);
   d5760:	220a      	movs	r2, #10
   d5762:	2100      	movs	r1, #0
   d5764:	480c      	ldr	r0, [pc, #48]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
   d5766:	f002 fd38 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println();
   d576a:	480b      	ldr	r0, [pc, #44]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
   d576c:	f004 fddf 	bl	da32e <_ZN5Print7printlnEv>
   d5770:	4b0a      	ldr	r3, [pc, #40]	; (d579c <_Z20displayTwitterHandlev+0x50>)

  if (wearerTwitter.length() > 0)
   d5772:	689a      	ldr	r2, [r3, #8]
   d5774:	b11a      	cbz	r2, d577e <_Z20displayTwitterHandlev+0x32>
  {
    display.println(wearerTwitter);
   d5776:	6819      	ldr	r1, [r3, #0]
   d5778:	4807      	ldr	r0, [pc, #28]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
   d577a:	f004 fde4 	bl	da346 <_ZN5Print7printlnEPKc>
  }

  display.display();
   d577e:	4806      	ldr	r0, [pc, #24]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
   d5780:	f003 f8e8 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollleft(0x00, 0x0F);
   d5784:	220f      	movs	r2, #15
   d5786:	2100      	movs	r1, #0
   d5788:	4803      	ldr	r0, [pc, #12]	; (d5798 <_Z20displayTwitterHandlev+0x4c>)
}
   d578a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    display.println(wearerTwitter);
  }

  display.display();
  display.startscrollleft(0x00, 0x0F);
   d578e:	f003 b85e 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d5792:	bf00      	nop
   d5794:	2003e24c 	.word	0x2003e24c
   d5798:	2003e1c8 	.word	0x2003e1c8
   d579c:	2003e110 	.word	0x2003e110

000d57a0 <_Z11showBatteryv>:
  display.println("Spectra 18");
  display.display();
}

void showBattery()
{
   d57a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  clearScreen();
   d57a2:	f7ff fe41 	bl	d5428 <_Z11clearScreenv>

  display.setTextSize(1);
   d57a6:	2101      	movs	r1, #1
   d57a8:	4825      	ldr	r0, [pc, #148]	; (d5840 <_Z11showBatteryv+0xa0>)
  display.setCursor(25, 1);
  display.print("Battery - ");
  display.print((int)currentBatteryReading);
   d57aa:	4c26      	ldr	r4, [pc, #152]	; (d5844 <_Z11showBatteryv+0xa4>)

void showBattery()
{
  clearScreen();

  display.setTextSize(1);
   d57ac:	f002 fd18 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(25, 1);
   d57b0:	2201      	movs	r2, #1
   d57b2:	2119      	movs	r1, #25
   d57b4:	4822      	ldr	r0, [pc, #136]	; (d5840 <_Z11showBatteryv+0xa0>)
   d57b6:	f002 fd10 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Battery - ");
   d57ba:	4923      	ldr	r1, [pc, #140]	; (d5848 <_Z11showBatteryv+0xa8>)
   d57bc:	4820      	ldr	r0, [pc, #128]	; (d5840 <_Z11showBatteryv+0xa0>)
   d57be:	f004 fdaf 	bl	da320 <_ZN5Print5printEPKc>
  display.print((int)currentBatteryReading);
   d57c2:	220a      	movs	r2, #10
   d57c4:	6821      	ldr	r1, [r4, #0]
   d57c6:	481e      	ldr	r0, [pc, #120]	; (d5840 <_Z11showBatteryv+0xa0>)
   d57c8:	f004 fe22 	bl	da410 <_ZN5Print5printEii>
  display.println("%");
   d57cc:	491f      	ldr	r1, [pc, #124]	; (d584c <_Z11showBatteryv+0xac>)
   d57ce:	481c      	ldr	r0, [pc, #112]	; (d5840 <_Z11showBatteryv+0xa0>)
   d57d0:	f004 fdb9 	bl	da346 <_ZN5Print7printlnEPKc>

  // Show battery image based on reading
  int battX = 28;
  int battY = 23;
  if (currentBatteryReading > 0 && currentBatteryReading <= 20)
   d57d4:	6823      	ldr	r3, [r4, #0]
   d57d6:	1e5a      	subs	r2, r3, #1
   d57d8:	2a13      	cmp	r2, #19
   d57da:	f04f 0201 	mov.w	r2, #1
   d57de:	d806      	bhi.n	d57ee <_Z11showBatteryv+0x4e>
  {
    display.drawBitmap(battX, battY, batteryEmptyImage, 72, 32, 1);
   d57e0:	2320      	movs	r3, #32
   d57e2:	2048      	movs	r0, #72	; 0x48
   d57e4:	e88d 0009 	stmia.w	sp, {r0, r3}
   d57e8:	9202      	str	r2, [sp, #8]
   d57ea:	4b19      	ldr	r3, [pc, #100]	; (d5850 <_Z11showBatteryv+0xb0>)
   d57ec:	e016      	b.n	d581c <_Z11showBatteryv+0x7c>
  }
  else if (currentBatteryReading > 20 && currentBatteryReading <= 50)
   d57ee:	f1a3 0115 	sub.w	r1, r3, #21
   d57f2:	291d      	cmp	r1, #29
   d57f4:	d806      	bhi.n	d5804 <_Z11showBatteryv+0x64>
  {
    display.drawBitmap(battX, battY, batteryLowImage, 72, 32, 1);
   d57f6:	2320      	movs	r3, #32
   d57f8:	2148      	movs	r1, #72	; 0x48
   d57fa:	e88d 000a 	stmia.w	sp, {r1, r3}
   d57fe:	9202      	str	r2, [sp, #8]
   d5800:	4b14      	ldr	r3, [pc, #80]	; (d5854 <_Z11showBatteryv+0xb4>)
   d5802:	e00b      	b.n	d581c <_Z11showBatteryv+0x7c>
  }
  else if (currentBatteryReading > 50 && currentBatteryReading <= 90)
   d5804:	3b33      	subs	r3, #51	; 0x33
   d5806:	2b27      	cmp	r3, #39	; 0x27
  {
    display.drawBitmap(battX, battY, batteryMediumImage, 72, 32, 1);
   d5808:	9202      	str	r2, [sp, #8]
   d580a:	f04f 0320 	mov.w	r3, #32
   d580e:	f04f 0248 	mov.w	r2, #72	; 0x48
   d5812:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5816:	bf94      	ite	ls
   d5818:	4b0f      	ldrls	r3, [pc, #60]	; (d5858 <_Z11showBatteryv+0xb8>)
  }
  else
  {
    display.drawBitmap(battX, battY, batteryFullImage, 72, 32, 1);
   d581a:	4b10      	ldrhi	r3, [pc, #64]	; (d585c <_Z11showBatteryv+0xbc>)
   d581c:	4808      	ldr	r0, [pc, #32]	; (d5840 <_Z11showBatteryv+0xa0>)
   d581e:	2217      	movs	r2, #23
   d5820:	211c      	movs	r1, #28
   d5822:	f002 fbcd 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  }

  display.display();
   d5826:	4806      	ldr	r0, [pc, #24]	; (d5840 <_Z11showBatteryv+0xa0>)
   d5828:	f003 f894 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextSize(1);
   d582c:	2101      	movs	r1, #1
   d582e:	4804      	ldr	r0, [pc, #16]	; (d5840 <_Z11showBatteryv+0xa0>)
   d5830:	f002 fcd6 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>

  displayingBattery = true;
   d5834:	4b0a      	ldr	r3, [pc, #40]	; (d5860 <_Z11showBatteryv+0xc0>)
   d5836:	2201      	movs	r2, #1
   d5838:	701a      	strb	r2, [r3, #0]
}
   d583a:	b004      	add	sp, #16
   d583c:	bd10      	pop	{r4, pc}
   d583e:	bf00      	nop
   d5840:	2003e1c8 	.word	0x2003e1c8
   d5844:	2003e140 	.word	0x2003e140
   d5848:	000dcd8e 	.word	0x000dcd8e
   d584c:	000dcd8c 	.word	0x000dcd8c
   d5850:	000dd93f 	.word	0x000dd93f
   d5854:	000dc7fa 	.word	0x000dc7fa
   d5858:	000dd207 	.word	0x000dd207
   d585c:	000dd327 	.word	0x000dd327
   d5860:	2003e24e 	.word	0x2003e24e

000d5864 <_Z14displayCreditsv>:
  display.display();
  display.startscrollleft(0x00, 0x0F);
}

void displayCredits()
{
   d5864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const char *creditStrings[] = {"Created by",
                                 "a GLOBAL team", "at Particle!"};
   d5866:	4a06      	ldr	r2, [pc, #24]	; (d5880 <_Z14displayCreditsv+0x1c>)
   d5868:	ca07      	ldmia	r2, {r0, r1, r2}
   d586a:	ab01      	add	r3, sp, #4
   d586c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  messageBoxWithArray(creditStrings, 3, 1);
   d5870:	2201      	movs	r2, #1
   d5872:	2103      	movs	r1, #3
   d5874:	4618      	mov	r0, r3
   d5876:	f7ff fef1 	bl	d565c <_Z19messageBoxWithArrayPPKcii>
}
   d587a:	b005      	add	sp, #20
   d587c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5880:	000dc798 	.word	0x000dc798

000d5884 <_Z10showKonamiv>:

void showKonami()
{
   d5884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.clearDisplay();
   d5886:	4c11      	ldr	r4, [pc, #68]	; (d58cc <_Z10showKonamiv+0x48>)
   d5888:	4620      	mov	r0, r4
   d588a:	f003 f8d9 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d588e:	4620      	mov	r0, r4
   d5890:	f003 f860 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setCursor(0, 0);
   d5894:	2200      	movs	r2, #0
   d5896:	4611      	mov	r1, r2
   d5898:	4620      	mov	r0, r4
   d589a:	f002 fc9e 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.drawBitmap(0, 0, konamiLogo, 128, 64, 1);
   d589e:	2180      	movs	r1, #128	; 0x80
   d58a0:	2240      	movs	r2, #64	; 0x40
   d58a2:	2301      	movs	r3, #1
   d58a4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d58a8:	2200      	movs	r2, #0
   d58aa:	4611      	mov	r1, r2
   d58ac:	4b08      	ldr	r3, [pc, #32]	; (d58d0 <_Z10showKonamiv+0x4c>)
   d58ae:	4620      	mov	r0, r4
   d58b0:	f002 fb86 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d58b4:	4620      	mov	r0, r4
   d58b6:	f003 f84d 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrolldiagleft(0x00, 0x07);
   d58ba:	2207      	movs	r2, #7
   d58bc:	2100      	movs	r1, #0
   d58be:	4620      	mov	r0, r4
}
   d58c0:	b004      	add	sp, #16
   d58c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, konamiLogo, 128, 64, 1);
  display.display();
  display.startscrolldiagleft(0x00, 0x07);
   d58c6:	f003 b814 	b.w	d88f2 <_ZN16Adafruit_SSD130619startscrolldiagleftEhh>
   d58ca:	bf00      	nop
   d58cc:	2003e1c8 	.word	0x2003e1c8
   d58d0:	000dce07 	.word	0x000dce07

000d58d4 <_Z8showMeshv>:
}

void showMesh()
{
   d58d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.clearDisplay();
   d58d6:	4c11      	ldr	r4, [pc, #68]	; (d591c <_Z8showMeshv+0x48>)
   d58d8:	4620      	mov	r0, r4
   d58da:	f003 f8b1 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d58de:	4620      	mov	r0, r4
   d58e0:	f003 f838 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setCursor(0, 0);
   d58e4:	2200      	movs	r2, #0
   d58e6:	4611      	mov	r1, r2
   d58e8:	4620      	mov	r0, r4
   d58ea:	f002 fc76 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.drawBitmap(0, 0, meshLogo, 64, 63, 1);
   d58ee:	2140      	movs	r1, #64	; 0x40
   d58f0:	223f      	movs	r2, #63	; 0x3f
   d58f2:	2301      	movs	r3, #1
   d58f4:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d58f8:	2200      	movs	r2, #0
   d58fa:	4611      	mov	r1, r2
   d58fc:	4b08      	ldr	r3, [pc, #32]	; (d5920 <_Z8showMeshv+0x4c>)
   d58fe:	4620      	mov	r0, r4
   d5900:	f002 fb5e 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d5904:	4620      	mov	r0, r4
   d5906:	f003 f825 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrolldiagright(0x00, 0x07);
   d590a:	2207      	movs	r2, #7
   d590c:	2100      	movs	r1, #0
   d590e:	4620      	mov	r0, r4
}
   d5910:	b004      	add	sp, #16
   d5912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.drawBitmap(0, 0, meshLogo, 64, 63, 1);
  display.display();
  display.startscrolldiagright(0x00, 0x07);
   d5916:	f002 bfbf 	b.w	d8898 <_ZN16Adafruit_SSD130620startscrolldiagrightEhh>
   d591a:	bf00      	nop
   d591c:	2003e1c8 	.word	0x2003e1c8
   d5920:	000dd447 	.word	0x000dd447

000d5924 <_Z15displayMeshPingv>:
  display.display();
  display.startscrollleft(0x00, 0x0F);
}

void displayMeshPing()
{
   d5924:	b510      	push	{r4, lr}
  const char *text = "You got a mesh ping!";
  clearScreen();
  display.setTextSize(1);
   d5926:	4c0c      	ldr	r4, [pc, #48]	; (d5958 <_Z15displayMeshPingv+0x34>)
}

void displayMeshPing()
{
  const char *text = "You got a mesh ping!";
  clearScreen();
   d5928:	f7ff fd7e 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(1);
   d592c:	4620      	mov	r0, r4
   d592e:	2101      	movs	r1, #1
   d5930:	f002 fc56 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(2, 35);
   d5934:	2223      	movs	r2, #35	; 0x23
   d5936:	4620      	mov	r0, r4
   d5938:	2102      	movs	r1, #2
   d593a:	f002 fc4e 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.setTextWrap(true);
   d593e:	4620      	mov	r0, r4
   d5940:	2101      	movs	r1, #1
   d5942:	f002 fc55 	bl	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
  display.println(text);
   d5946:	4620      	mov	r0, r4
   d5948:	4904      	ldr	r1, [pc, #16]	; (d595c <_Z15displayMeshPingv+0x38>)
   d594a:	f004 fcfc 	bl	da346 <_ZN5Print7printlnEPKc>
  display.display();
   d594e:	4620      	mov	r0, r4
}
   d5950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  clearScreen();
  display.setTextSize(1);
  display.setCursor(2, 35);
  display.setTextWrap(true);
  display.println(text);
  display.display();
   d5954:	f002 bffe 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d5958:	2003e1c8 	.word	0x2003e1c8
   d595c:	000dcd99 	.word	0x000dcd99

000d5960 <_Z18displayGatewayPingPKc>:
}

void displayGatewayPing(const char *data)
{
   d5960:	b570      	push	{r4, r5, r6, lr}
   d5962:	4606      	mov	r6, r0
  int textWidth = 8 + strlen(data) * 9;
   d5964:	f006 fd45 	bl	dc3f2 <strlen>
  int x = 64 - (textWidth / 2);
  int y = 32;

  clearScreen();
  display.setTextSize(1);
   d5968:	4d13      	ldr	r5, [pc, #76]	; (d59b8 <_Z18displayGatewayPingPKc+0x58>)
  display.display();
}

void displayGatewayPing(const char *data)
{
  int textWidth = 8 + strlen(data) * 9;
   d596a:	4604      	mov	r4, r0
  int x = 64 - (textWidth / 2);
  int y = 32;

  clearScreen();
  display.setTextSize(1);
  display.setCursor(x + 10, y + 5 - 12 / 2);
   d596c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
{
  int textWidth = 8 + strlen(data) * 9;
  int x = 64 - (textWidth / 2);
  int y = 32;

  clearScreen();
   d5970:	f7ff fd5a 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(1);
   d5974:	4628      	mov	r0, r5
   d5976:	2101      	movs	r1, #1
   d5978:	f002 fc32 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(x + 10, y + 5 - 12 / 2);
   d597c:	3408      	adds	r4, #8
   d597e:	2102      	movs	r1, #2
   d5980:	fb94 f1f1 	sdiv	r1, r4, r1
   d5984:	f1c1 014a 	rsb	r1, r1, #74	; 0x4a
   d5988:	221f      	movs	r2, #31
   d598a:	4628      	mov	r0, r5
   d598c:	b209      	sxth	r1, r1
   d598e:	f002 fc24 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.setTextWrap(true);
   d5992:	4628      	mov	r0, r5
   d5994:	2101      	movs	r1, #1
   d5996:	f002 fc2b 	bl	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d599a:	4633      	mov	r3, r6
   d599c:	2101      	movs	r1, #1
   d599e:	4a07      	ldr	r2, [pc, #28]	; (d59bc <_Z18displayGatewayPingPKc+0x5c>)
   d59a0:	4628      	mov	r0, r5
   d59a2:	f004 fd37 	bl	da414 <_ZN5Print11printf_implEbPKcz>
  display.printlnf("Hello, %s!", data);
  display.display();
   d59a6:	4628      	mov	r0, r5
   d59a8:	f002 ffd4 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setTextWrap(false);
   d59ac:	4628      	mov	r0, r5
   d59ae:	2100      	movs	r1, #0
}
   d59b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  display.setTextSize(1);
  display.setCursor(x + 10, y + 5 - 12 / 2);
  display.setTextWrap(true);
  display.printlnf("Hello, %s!", data);
  display.display();
  display.setTextWrap(false);
   d59b4:	f002 bc1c 	b.w	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
   d59b8:	2003e1c8 	.word	0x2003e1c8
   d59bc:	000dcdae 	.word	0x000dcdae

000d59c0 <_Z14displayHiFromZv>:
}

void displayHiFromZ()
{
   d59c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  const char *text = "Welcome to Spectra!";
  clearScreen();
  display.setTextSize(1);
   d59c2:	4c13      	ldr	r4, [pc, #76]	; (d5a10 <_Z14displayHiFromZv+0x50>)
}

void displayHiFromZ()
{
  const char *text = "Welcome to Spectra!";
  clearScreen();
   d59c4:	f7ff fd30 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(1);
   d59c8:	4620      	mov	r0, r4
   d59ca:	2101      	movs	r1, #1
   d59cc:	f002 fc08 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(10, 35);
   d59d0:	2223      	movs	r2, #35	; 0x23
   d59d2:	4620      	mov	r0, r4
   d59d4:	210a      	movs	r1, #10
   d59d6:	f002 fc00 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println(text);
   d59da:	490e      	ldr	r1, [pc, #56]	; (d5a14 <_Z14displayHiFromZv+0x54>)
   d59dc:	4620      	mov	r0, r4
   d59de:	f004 fcb2 	bl	da346 <_ZN5Print7printlnEPKc>
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
   d59e2:	2180      	movs	r1, #128	; 0x80
   d59e4:	2240      	movs	r2, #64	; 0x40
   d59e6:	2301      	movs	r3, #1
   d59e8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d59ec:	2200      	movs	r2, #0
   d59ee:	4611      	mov	r1, r2
   d59f0:	4b09      	ldr	r3, [pc, #36]	; (d5a18 <_Z14displayHiFromZv+0x58>)
   d59f2:	4620      	mov	r0, r4
   d59f4:	f002 fae4 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d59f8:	4620      	mov	r0, r4
   d59fa:	f002 ffab 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollleft(0x00, 0x0F);
   d59fe:	220f      	movs	r2, #15
   d5a00:	2100      	movs	r1, #0
   d5a02:	4620      	mov	r0, r4
}
   d5a04:	b004      	add	sp, #16
   d5a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setTextSize(1);
  display.setCursor(10, 35);
  display.println(text);
  display.drawBitmap(0, 0, spectraLogo, 128, 64, 1);
  display.display();
  display.startscrollleft(0x00, 0x0F);
   d5a0a:	f002 bf20 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d5a0e:	bf00      	nop
   d5a10:	2003e1c8 	.word	0x2003e1c8
   d5a14:	000dcdb9 	.word	0x000dcdb9
   d5a18:	000dc96b 	.word	0x000dc96b

000d5a1c <_Z17displayMeshStatusPKc>:
}

void displayMeshStatus(const char *status)
{
   d5a1c:	b510      	push	{r4, lr}
   d5a1e:	4604      	mov	r4, r0
  clearScreen();
   d5a20:	f7ff fd02 	bl	d5428 <_Z11clearScreenv>

  display.setTextSize(1);
   d5a24:	2101      	movs	r1, #1
   d5a26:	4812      	ldr	r0, [pc, #72]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a28:	f002 fbda 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(9, 2);
   d5a2c:	2202      	movs	r2, #2
   d5a2e:	2109      	movs	r1, #9
   d5a30:	480f      	ldr	r0, [pc, #60]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a32:	f002 fbd2 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("Mesh Network Status");
   d5a36:	490f      	ldr	r1, [pc, #60]	; (d5a74 <_Z17displayMeshStatusPKc+0x58>)
   d5a38:	480d      	ldr	r0, [pc, #52]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a3a:	f004 fc84 	bl	da346 <_ZN5Print7printlnEPKc>

  display.setTextSize(2);
   d5a3e:	2102      	movs	r1, #2
   d5a40:	480b      	ldr	r0, [pc, #44]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a42:	f002 fbcd 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  if (strlen(status) > 6)
   d5a46:	4620      	mov	r0, r4
   d5a48:	f006 fcd3 	bl	dc3f2 <strlen>
   d5a4c:	2806      	cmp	r0, #6
  {
    display.setCursor(1, 35);
   d5a4e:	bf8c      	ite	hi
   d5a50:	2101      	movhi	r1, #1
  }
  else
  {
    display.setCursor(28, 35);
   d5a52:	211c      	movls	r1, #28
  display.println("Mesh Network Status");

  display.setTextSize(2);
  if (strlen(status) > 6)
  {
    display.setCursor(1, 35);
   d5a54:	2223      	movs	r2, #35	; 0x23
  }
  else
  {
    display.setCursor(28, 35);
   d5a56:	4806      	ldr	r0, [pc, #24]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a58:	f002 fbbf 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  }
  display.println(status);
   d5a5c:	4621      	mov	r1, r4
   d5a5e:	4804      	ldr	r0, [pc, #16]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a60:	f004 fc71 	bl	da346 <_ZN5Print7printlnEPKc>
  display.display();
   d5a64:	4802      	ldr	r0, [pc, #8]	; (d5a70 <_Z17displayMeshStatusPKc+0x54>)
   d5a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  {
    display.setCursor(28, 35);
  }
  display.println(status);
  display.display();
   d5a6a:	f002 bf73 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d5a6e:	bf00      	nop
   d5a70:	2003e1c8 	.word	0x2003e1c8
   d5a74:	000dcdcd 	.word	0x000dcdcd

000d5a78 <_Z18fireTowerSendEventv>:
{
  Particle.publish("battery-charge", String(battery), PRIVATE);
}

void fireTowerSendEvent()
{
   d5a78:	b538      	push	{r3, r4, r5, lr}
  // Make sure that events are at least five seconds apart
  if (lastSentTowerEvent == 0 || millis() - lastSentTowerEvent > eventDelay)
   d5a7a:	4c0b      	ldr	r4, [pc, #44]	; (d5aa8 <_Z18fireTowerSendEventv+0x30>)
   d5a7c:	6823      	ldr	r3, [r4, #0]
   d5a7e:	4625      	mov	r5, r4
   d5a80:	b13b      	cbz	r3, d5a92 <_Z18fireTowerSendEventv+0x1a>
   d5a82:	f003 fb45 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d5a86:	6823      	ldr	r3, [r4, #0]
   d5a88:	1ac0      	subs	r0, r0, r3
   d5a8a:	4b08      	ldr	r3, [pc, #32]	; (d5aac <_Z18fireTowerSendEventv+0x34>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	4298      	cmp	r0, r3
   d5a90:	d909      	bls.n	d5aa6 <_Z18fireTowerSendEventv+0x2e>
   d5a92:	f003 fb3d 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  {
    lastSentTowerEvent = millis();
   d5a96:	6028      	str	r0, [r5, #0]
    Mesh.publish("tower-send", NULL);
   d5a98:	2200      	movs	r2, #0
   d5a9a:	4905      	ldr	r1, [pc, #20]	; (d5ab0 <_Z18fireTowerSendEventv+0x38>)
   d5a9c:	4805      	ldr	r0, [pc, #20]	; (d5ab4 <_Z18fireTowerSendEventv+0x3c>)
  }
}
   d5a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
  // Make sure that events are at least five seconds apart
  if (lastSentTowerEvent == 0 || millis() - lastSentTowerEvent > eventDelay)
  {
    lastSentTowerEvent = millis();
    Mesh.publish("tower-send", NULL);
   d5aa2:	f004 bb73 	b.w	da18c <_ZN5spark11MeshPublish7publishEPKcS2_>
   d5aa6:	bd38      	pop	{r3, r4, r5, pc}
   d5aa8:	2003e254 	.word	0x2003e254
   d5aac:	2003d820 	.word	0x2003d820
   d5ab0:	000dda5f 	.word	0x000dda5f
   d5ab4:	2003e408 	.word	0x2003e408

000d5ab8 <_Z18fireHelloPingEventv>:
    Mesh.publish("zach-button", NULL);
  }
}

void fireHelloPingEvent()
{
   d5ab8:	b538      	push	{r3, r4, r5, lr}
  // Make sure that events are at least five seconds apart
  if (lastHelloEvent == 0 || millis() - lastHelloEvent > eventDelay)
   d5aba:	4c0d      	ldr	r4, [pc, #52]	; (d5af0 <_Z18fireHelloPingEventv+0x38>)
   d5abc:	6823      	ldr	r3, [r4, #0]
   d5abe:	4625      	mov	r5, r4
   d5ac0:	b13b      	cbz	r3, d5ad2 <_Z18fireHelloPingEventv+0x1a>
   d5ac2:	f003 fb25 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d5ac6:	6823      	ldr	r3, [r4, #0]
   d5ac8:	1ac0      	subs	r0, r0, r3
   d5aca:	4b0a      	ldr	r3, [pc, #40]	; (d5af4 <_Z18fireHelloPingEventv+0x3c>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	4298      	cmp	r0, r3
   d5ad0:	d90d      	bls.n	d5aee <_Z18fireHelloPingEventv+0x36>
   d5ad2:	f003 fb1d 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  {
    lastHelloEvent = millis();
    Mesh.publish("mesh-ping", "hello!");
   d5ad6:	4908      	ldr	r1, [pc, #32]	; (d5af8 <_Z18fireHelloPingEventv+0x40>)
void fireHelloPingEvent()
{
  // Make sure that events are at least five seconds apart
  if (lastHelloEvent == 0 || millis() - lastHelloEvent > eventDelay)
  {
    lastHelloEvent = millis();
   d5ad8:	6028      	str	r0, [r5, #0]
    Mesh.publish("mesh-ping", "hello!");
   d5ada:	4a08      	ldr	r2, [pc, #32]	; (d5afc <_Z18fireHelloPingEventv+0x44>)
   d5adc:	4808      	ldr	r0, [pc, #32]	; (d5b00 <_Z18fireHelloPingEventv+0x48>)
   d5ade:	f004 fb55 	bl	da18c <_ZN5spark11MeshPublish7publishEPKcS2_>
public:
  qMenuSystem(Adafruit_SSD1306 *disp);
  void InitMenu(const char **page, int itemCount, int selectedIndex);
  int ProcessMenu(int action);
  void ShowMenu();
  void MessageBox(const char text[]) { qmd.MessageBox(text); };
   d5ae2:	4908      	ldr	r1, [pc, #32]	; (d5b04 <_Z18fireHelloPingEventv+0x4c>)
   d5ae4:	4808      	ldr	r0, [pc, #32]	; (d5b08 <_Z18fireHelloPingEventv+0x50>)

    menu.MessageBox("Hello ping!");
  }
}
   d5ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5aea:	f003 ba43 	b.w	d8f74 <_ZN12qMenuDisplay10MessageBoxEPKc>
   d5aee:	bd38      	pop	{r3, r4, r5, pc}
   d5af0:	2003e25c 	.word	0x2003e25c
   d5af4:	2003d820 	.word	0x2003d820
   d5af8:	000dda7d 	.word	0x000dda7d
   d5afc:	000dda76 	.word	0x000dda76
   d5b00:	2003e408 	.word	0x2003e408
   d5b04:	000dda87 	.word	0x000dda87
   d5b08:	2003e23c 	.word	0x2003e23c

000d5b0c <_Z20fireGatewayPingEventv>:

void fireGatewayPingEvent()
{
   d5b0c:	b538      	push	{r3, r4, r5, lr}
  // Make sure that events are at least five seconds apart
  if (lastGatewayEvent == 0 || millis() - lastGatewayEvent > eventDelay)
   d5b0e:	4c0d      	ldr	r4, [pc, #52]	; (d5b44 <_Z20fireGatewayPingEventv+0x38>)
   d5b10:	6823      	ldr	r3, [r4, #0]
   d5b12:	4625      	mov	r5, r4
   d5b14:	b13b      	cbz	r3, d5b26 <_Z20fireGatewayPingEventv+0x1a>
   d5b16:	f003 fafb 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d5b1a:	6823      	ldr	r3, [r4, #0]
   d5b1c:	1ac0      	subs	r0, r0, r3
   d5b1e:	4b0a      	ldr	r3, [pc, #40]	; (d5b48 <_Z20fireGatewayPingEventv+0x3c>)
   d5b20:	681b      	ldr	r3, [r3, #0]
   d5b22:	4298      	cmp	r0, r3
   d5b24:	d90d      	bls.n	d5b42 <_Z20fireGatewayPingEventv+0x36>
   d5b26:	f003 faf3 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  {
    lastGatewayEvent = millis();
    Mesh.publish("gateway-ping", NULL);
   d5b2a:	4908      	ldr	r1, [pc, #32]	; (d5b4c <_Z20fireGatewayPingEventv+0x40>)
void fireGatewayPingEvent()
{
  // Make sure that events are at least five seconds apart
  if (lastGatewayEvent == 0 || millis() - lastGatewayEvent > eventDelay)
  {
    lastGatewayEvent = millis();
   d5b2c:	6028      	str	r0, [r5, #0]
    Mesh.publish("gateway-ping", NULL);
   d5b2e:	2200      	movs	r2, #0
   d5b30:	4807      	ldr	r0, [pc, #28]	; (d5b50 <_Z20fireGatewayPingEventv+0x44>)
   d5b32:	f004 fb2b 	bl	da18c <_ZN5spark11MeshPublish7publishEPKcS2_>
   d5b36:	4907      	ldr	r1, [pc, #28]	; (d5b54 <_Z20fireGatewayPingEventv+0x48>)
   d5b38:	4807      	ldr	r0, [pc, #28]	; (d5b58 <_Z20fireGatewayPingEventv+0x4c>)

    menu.MessageBox("Gateway ping!");
  }
}
   d5b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5b3e:	f003 ba19 	b.w	d8f74 <_ZN12qMenuDisplay10MessageBoxEPKc>
   d5b42:	bd38      	pop	{r3, r4, r5, pc}
   d5b44:	2003e260 	.word	0x2003e260
   d5b48:	2003d820 	.word	0x2003d820
   d5b4c:	000dda93 	.word	0x000dda93
   d5b50:	2003e408 	.word	0x2003e408
   d5b54:	000ddaa0 	.word	0x000ddaa0
   d5b58:	2003e23c 	.word	0x2003e23c

000d5b5c <_Z15pulseLEDHandlerPKcS0_>:

void pulseLEDHandler(const char *event, const char *data)
{
  if (data == "red")
   d5b5c:	4b0a      	ldr	r3, [pc, #40]	; (d5b88 <_Z15pulseLEDHandlerPKcS0_+0x2c>)
   d5b5e:	4299      	cmp	r1, r3
   d5b60:	d101      	bne.n	d5b66 <_Z15pulseLEDHandlerPKcS0_+0xa>
    pulseLED(RED_LED);
   d5b62:	2010      	movs	r0, #16
   d5b64:	e00d      	b.n	d5b82 <_Z15pulseLEDHandlerPKcS0_+0x26>
  else if (data == "blue")
   d5b66:	4b09      	ldr	r3, [pc, #36]	; (d5b8c <_Z15pulseLEDHandlerPKcS0_+0x30>)
   d5b68:	4299      	cmp	r1, r3
   d5b6a:	d101      	bne.n	d5b70 <_Z15pulseLEDHandlerPKcS0_+0x14>
    pulseLED(BLUE_LED);
   d5b6c:	2012      	movs	r0, #18
   d5b6e:	e008      	b.n	d5b82 <_Z15pulseLEDHandlerPKcS0_+0x26>
  else if (data == "green")
   d5b70:	4b07      	ldr	r3, [pc, #28]	; (d5b90 <_Z15pulseLEDHandlerPKcS0_+0x34>)
   d5b72:	4299      	cmp	r1, r3
   d5b74:	d101      	bne.n	d5b7a <_Z15pulseLEDHandlerPKcS0_+0x1e>
    pulseLED(GREEN_LED);
   d5b76:	2011      	movs	r0, #17
   d5b78:	e003      	b.n	d5b82 <_Z15pulseLEDHandlerPKcS0_+0x26>
  else if (data == "yellow")
   d5b7a:	4b06      	ldr	r3, [pc, #24]	; (d5b94 <_Z15pulseLEDHandlerPKcS0_+0x38>)
   d5b7c:	4299      	cmp	r1, r3
   d5b7e:	d102      	bne.n	d5b86 <_Z15pulseLEDHandlerPKcS0_+0x2a>
    pulseLED(YELLOW_LED);
   d5b80:	2013      	movs	r0, #19
   d5b82:	f001 b826 	b.w	d6bd2 <_Z8pulseLEDi>
   d5b86:	4770      	bx	lr
   d5b88:	000ddaae 	.word	0x000ddaae
   d5b8c:	000ddab2 	.word	0x000ddab2
   d5b90:	000ddab7 	.word	0x000ddab7
   d5b94:	000ddabd 	.word	0x000ddabd

000d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b98:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5b9a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5b9c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d5b9e:	b17c      	cbz	r4, d5bc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5ba0:	6863      	ldr	r3, [r4, #4]
   d5ba2:	3b01      	subs	r3, #1
   d5ba4:	6063      	str	r3, [r4, #4]
   d5ba6:	b95b      	cbnz	r3, d5bc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5ba8:	6823      	ldr	r3, [r4, #0]
   d5baa:	4620      	mov	r0, r4
   d5bac:	689b      	ldr	r3, [r3, #8]
   d5bae:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5bb0:	68a3      	ldr	r3, [r4, #8]
   d5bb2:	3b01      	subs	r3, #1
   d5bb4:	60a3      	str	r3, [r4, #8]
   d5bb6:	b91b      	cbnz	r3, d5bc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5bb8:	6823      	ldr	r3, [r4, #0]
   d5bba:	4620      	mov	r0, r4
   d5bbc:	68db      	ldr	r3, [r3, #12]
   d5bbe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5bc0:	4628      	mov	r0, r5
   d5bc2:	bd38      	pop	{r3, r4, r5, pc}

000d5bc4 <_Z19fireEnvSensorsEventii>:
unsigned long lastSentZEvent = 0;
unsigned long lastGatewayEvent = 0;
unsigned long eventDelay = 5000;

void fireEnvSensorsEvent(int temp, int humidity)
{
   d5bc4:	b530      	push	{r4, r5, lr}
   d5bc6:	b091      	sub	sp, #68	; 0x44
   d5bc8:	4604      	mov	r4, r0
   d5bca:	460d      	mov	r5, r1

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d5bcc:	a808      	add	r0, sp, #32
   d5bce:	491a      	ldr	r1, [pc, #104]	; (d5c38 <_Z19fireEnvSensorsEventii+0x74>)
   d5bd0:	f004 fd5f 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
  Particle.publish("env-sensors", "{\"temp\":" + String(temp) + ",\"humidity\":" + String(humidity) + "}", PRIVATE);
   d5bd4:	220a      	movs	r2, #10
   d5bd6:	4621      	mov	r1, r4
   d5bd8:	a804      	add	r0, sp, #16
   d5bda:	f004 fdbd 	bl	da758 <_ZN6StringC1Eih>
   d5bde:	a904      	add	r1, sp, #16
   d5be0:	a808      	add	r0, sp, #32
   d5be2:	f004 fe12 	bl	da80a <_ZplRK15StringSumHelperRK6String>
   d5be6:	4915      	ldr	r1, [pc, #84]	; (d5c3c <_Z19fireEnvSensorsEventii+0x78>)
   d5be8:	f004 fe1b 	bl	da822 <_ZplRK15StringSumHelperPKc>
   d5bec:	220a      	movs	r2, #10
   d5bee:	4604      	mov	r4, r0
   d5bf0:	4629      	mov	r1, r5
   d5bf2:	a80c      	add	r0, sp, #48	; 0x30
   d5bf4:	f004 fdb0 	bl	da758 <_ZN6StringC1Eih>
   d5bf8:	a90c      	add	r1, sp, #48	; 0x30
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	f004 fe05 	bl	da80a <_ZplRK15StringSumHelperRK6String>
   d5c00:	490f      	ldr	r1, [pc, #60]	; (d5c40 <_Z19fireEnvSensorsEventii+0x7c>)
   d5c02:	f004 fe0e 	bl	da822 <_ZplRK15StringSumHelperPKc>
   d5c06:	4b0f      	ldr	r3, [pc, #60]	; (d5c44 <_Z19fireEnvSensorsEventii+0x80>)
   d5c08:	6802      	ldr	r2, [r0, #0]
   d5c0a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5c0c:	490e      	ldr	r1, [pc, #56]	; (d5c48 <_Z19fireEnvSensorsEventii+0x84>)
   d5c0e:	f88d 3000 	strb.w	r3, [sp]
   d5c12:	a802      	add	r0, sp, #8
   d5c14:	233c      	movs	r3, #60	; 0x3c
   d5c16:	f003 ff05 	bl	d9a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c1a:	a803      	add	r0, sp, #12
   d5c1c:	f7ff ffbc 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c20:	a80c      	add	r0, sp, #48	; 0x30
   d5c22:	f004 fcef 	bl	da604 <_ZN6StringD1Ev>
   d5c26:	a804      	add	r0, sp, #16
   d5c28:	f004 fcec 	bl	da604 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d5c2c:	a808      	add	r0, sp, #32
   d5c2e:	f004 fce9 	bl	da604 <_ZN6StringD1Ev>
}
   d5c32:	b011      	add	sp, #68	; 0x44
   d5c34:	bd30      	pop	{r4, r5, pc}
   d5c36:	bf00      	nop
   d5c38:	000ddac4 	.word	0x000ddac4
   d5c3c:	000ddacd 	.word	0x000ddacd
   d5c40:	000ddada 	.word	0x000ddada
   d5c44:	2003e258 	.word	0x2003e258
   d5c48:	000ddadc 	.word	0x000ddadc

000d5c4c <_Z16fireBatteryEventi>:

void fireBatteryEvent(int battery)
{
   d5c4c:	b500      	push	{lr}
   d5c4e:	b089      	sub	sp, #36	; 0x24
  Particle.publish("battery-charge", String(battery), PRIVATE);
   d5c50:	4601      	mov	r1, r0
   d5c52:	220a      	movs	r2, #10
   d5c54:	a804      	add	r0, sp, #16
   d5c56:	f004 fd7f 	bl	da758 <_ZN6StringC1Eih>
   d5c5a:	4b09      	ldr	r3, [pc, #36]	; (d5c80 <_Z16fireBatteryEventi+0x34>)
   d5c5c:	9a04      	ldr	r2, [sp, #16]
   d5c5e:	781b      	ldrb	r3, [r3, #0]
   d5c60:	4908      	ldr	r1, [pc, #32]	; (d5c84 <_Z16fireBatteryEventi+0x38>)
   d5c62:	f88d 3000 	strb.w	r3, [sp]
   d5c66:	a802      	add	r0, sp, #8
   d5c68:	233c      	movs	r3, #60	; 0x3c
   d5c6a:	f003 fedb 	bl	d9a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d5c6e:	a803      	add	r0, sp, #12
   d5c70:	f7ff ff92 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c74:	a804      	add	r0, sp, #16
   d5c76:	f004 fcc5 	bl	da604 <_ZN6StringD1Ev>
}
   d5c7a:	b009      	add	sp, #36	; 0x24
   d5c7c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5c80:	2003e258 	.word	0x2003e258
   d5c84:	000ddae8 	.word	0x000ddae8

000d5c88 <_GLOBAL__sub_I_lastSentTowerEvent>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5c88:	4b01      	ldr	r3, [pc, #4]	; (d5c90 <_GLOBAL__sub_I_lastSentTowerEvent+0x8>)
   d5c8a:	2201      	movs	r2, #1
   d5c8c:	701a      	strb	r2, [r3, #0]
   d5c8e:	4770      	bx	lr
   d5c90:	2003e258 	.word	0x2003e258

000d5c94 <_Z16drawFilledCircleii>:
extern byte appmode;
extern byte btncounter;
extern byte btnid;

void drawFilledCircle(int displayX, int displayY)
{
   d5c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  display.drawCircle(displayX, displayY, 1, WHITE);
   d5c96:	4c16      	ldr	r4, [pc, #88]	; (d5cf0 <_Z16drawFilledCircleii+0x5c>)
   d5c98:	b206      	sxth	r6, r0
   d5c9a:	b20f      	sxth	r7, r1
   d5c9c:	2501      	movs	r5, #1
   d5c9e:	462b      	mov	r3, r5
   d5ca0:	463a      	mov	r2, r7
   d5ca2:	4631      	mov	r1, r6
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	9500      	str	r5, [sp, #0]
   d5ca8:	f001 fd76 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.drawCircle(displayX, displayY, 2, WHITE);
   d5cac:	463a      	mov	r2, r7
   d5cae:	4631      	mov	r1, r6
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	9500      	str	r5, [sp, #0]
   d5cb4:	2302      	movs	r3, #2
   d5cb6:	f001 fd6f 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.drawCircle(displayX, displayY, 3, WHITE);
   d5cba:	463a      	mov	r2, r7
   d5cbc:	4631      	mov	r1, r6
   d5cbe:	4620      	mov	r0, r4
   d5cc0:	9500      	str	r5, [sp, #0]
   d5cc2:	2303      	movs	r3, #3
   d5cc4:	f001 fd68 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.drawCircle(displayX, displayY, 4, WHITE);
   d5cc8:	463a      	mov	r2, r7
   d5cca:	4631      	mov	r1, r6
   d5ccc:	4620      	mov	r0, r4
   d5cce:	9500      	str	r5, [sp, #0]
   d5cd0:	2304      	movs	r3, #4
   d5cd2:	f001 fd61 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.drawCircle(displayX, displayY, 5, WHITE);
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	9500      	str	r5, [sp, #0]
   d5cda:	2305      	movs	r3, #5
   d5cdc:	463a      	mov	r2, r7
   d5cde:	4631      	mov	r1, r6
   d5ce0:	f001 fd5a 	bl	d7798 <_ZN12Adafruit_GFX10drawCircleEssst>
  display.display();
   d5ce4:	4620      	mov	r0, r4
}
   d5ce6:	b003      	add	sp, #12
   d5ce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  display.drawCircle(displayX, displayY, 1, WHITE);
  display.drawCircle(displayX, displayY, 2, WHITE);
  display.drawCircle(displayX, displayY, 3, WHITE);
  display.drawCircle(displayX, displayY, 4, WHITE);
  display.drawCircle(displayX, displayY, 5, WHITE);
  display.display();
   d5cec:	f002 be32 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
   d5cf0:	2003e1c8 	.word	0x2003e1c8

000d5cf4 <_Z15initEtchASketchv>:
}

// Init Etch A Sketch mode on the OLED
void initEtchASketch()
{
   d5cf4:	b510      	push	{r4, lr}
  clearScreen();
  display.setTextSize(2);
   d5cf6:	4c13      	ldr	r4, [pc, #76]	; (d5d44 <_Z15initEtchASketchv+0x50>)
}

// Init Etch A Sketch mode on the OLED
void initEtchASketch()
{
  clearScreen();
   d5cf8:	f7ff fb96 	bl	d5428 <_Z11clearScreenv>
  display.setTextSize(2);
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	2102      	movs	r1, #2
   d5d00:	f002 fa6e 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setCursor(1, 18);
   d5d04:	2212      	movs	r2, #18
   d5d06:	4620      	mov	r0, r4
   d5d08:	2101      	movs	r1, #1
   d5d0a:	f002 fa66 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.println("  Etch A");
   d5d0e:	490e      	ldr	r1, [pc, #56]	; (d5d48 <_Z15initEtchASketchv+0x54>)
   d5d10:	4620      	mov	r0, r4
   d5d12:	f004 fb18 	bl	da346 <_ZN5Print7printlnEPKc>
  display.println("  Sketch");
   d5d16:	490d      	ldr	r1, [pc, #52]	; (d5d4c <_Z15initEtchASketchv+0x58>)
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f004 fb14 	bl	da346 <_ZN5Print7printlnEPKc>
  display.setTextSize(1);
   d5d1e:	4620      	mov	r0, r4
   d5d20:	2101      	movs	r1, #1
   d5d22:	f002 fa5d 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.println("Use the joystick...");
   d5d26:	490a      	ldr	r1, [pc, #40]	; (d5d50 <_Z15initEtchASketchv+0x5c>)
   d5d28:	4620      	mov	r0, r4
   d5d2a:	f004 fb0c 	bl	da346 <_ZN5Print7printlnEPKc>
  display.display();
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f002 fe10 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  delay(2000);
   d5d34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5d38:	f003 fcf2 	bl	d9720 <delay>
  clearScreen();
}
   d5d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.println("  Sketch");
  display.setTextSize(1);
  display.println("Use the joystick...");
  display.display();
  delay(2000);
  clearScreen();
   d5d40:	f7ff bb72 	b.w	d5428 <_Z11clearScreenv>
   d5d44:	2003e1c8 	.word	0x2003e1c8
   d5d48:	000ddaf7 	.word	0x000ddaf7
   d5d4c:	000ddb00 	.word	0x000ddb00
   d5d50:	000ddb09 	.word	0x000ddb09

000d5d54 <_Z11etchASketchv>:
}

// Update the display during Etch A Sketch Mode. Draw a new filled circle
// based on the which joystick direction was used.
void etchASketch()
{
   d5d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  appmode = 1;
   d5d58:	4e33      	ldr	r6, [pc, #204]	; (d5e28 <_Z11etchASketchv+0xd4>)
  btnid = 0;
  int displayX = display.width() / 2;
   d5d5a:	4834      	ldr	r0, [pc, #208]	; (d5e2c <_Z11etchASketchv+0xd8>)

// Update the display during Etch A Sketch Mode. Draw a new filled circle
// based on the which joystick direction was used.
void etchASketch()
{
  appmode = 1;
   d5d5c:	2301      	movs	r3, #1
   d5d5e:	7033      	strb	r3, [r6, #0]
  btnid = 0;
   d5d60:	4b33      	ldr	r3, [pc, #204]	; (d5e30 <_Z11etchASketchv+0xdc>)
   d5d62:	2200      	movs	r2, #0
   d5d64:	701a      	strb	r2, [r3, #0]
  int displayX = display.width() / 2;
   d5d66:	f002 fa47 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5d6a:	2402      	movs	r4, #2
   d5d6c:	fb90 f0f4 	sdiv	r0, r0, r4
   d5d70:	b205      	sxth	r5, r0
  int displayY = display.height() / 2;
   d5d72:	482e      	ldr	r0, [pc, #184]	; (d5e2c <_Z11etchASketchv+0xd8>)
   d5d74:	f002 fa43 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5d78:	fb90 f0f4 	sdiv	r0, r0, r4
   d5d7c:	b204      	sxth	r4, r0

  initEtchASketch();
   d5d7e:	f7ff ffb9 	bl	d5cf4 <_Z15initEtchASketchv>
  drawFilledCircle(displayX, displayY);
   d5d82:	4621      	mov	r1, r4
   d5d84:	4628      	mov	r0, r5
   d5d86:	f7ff ff85 	bl	d5c94 <_Z16drawFilledCircleii>

  setupLEDButtonInterrupt();
   d5d8a:	f000 fe67 	bl	d6a5c <_Z23setupLEDButtonInterruptv>
   d5d8e:	46b0      	mov	r8, r6

  while (appmode)
   d5d90:	f898 3000 	ldrb.w	r3, [r8]
   d5d94:	2b00      	cmp	r3, #0
   d5d96:	d045      	beq.n	d5e24 <_Z11etchASketchv+0xd0>
  {
    int lastY = displayY;
    int lastX = displayX;

    joystickUpDebouncer.update();
   d5d98:	4826      	ldr	r0, [pc, #152]	; (d5e34 <_Z11etchASketchv+0xe0>)
   d5d9a:	f003 f82b 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (joystickUpDebouncer.read() == LOW)
   d5d9e:	4825      	ldr	r0, [pc, #148]	; (d5e34 <_Z11etchASketchv+0xe0>)
   d5da0:	f003 f858 	bl	d8e54 <_ZN8Debounce4readEv>
   d5da4:	b908      	cbnz	r0, d5daa <_Z11etchASketchv+0x56>
    {
      displayY--;
   d5da6:	1e67      	subs	r7, r4, #1
   d5da8:	e000      	b.n	d5dac <_Z11etchASketchv+0x58>
   d5daa:	4627      	mov	r7, r4
    }

    joystickDownDebouncer.update();
   d5dac:	4822      	ldr	r0, [pc, #136]	; (d5e38 <_Z11etchASketchv+0xe4>)
   d5dae:	f003 f821 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (joystickDownDebouncer.read() == LOW)
   d5db2:	4821      	ldr	r0, [pc, #132]	; (d5e38 <_Z11etchASketchv+0xe4>)
   d5db4:	f003 f84e 	bl	d8e54 <_ZN8Debounce4readEv>
   d5db8:	b900      	cbnz	r0, d5dbc <_Z11etchASketchv+0x68>
    {
      displayY++;
   d5dba:	3701      	adds	r7, #1
    }

    joystickLeftDebouncer.update();
   d5dbc:	481f      	ldr	r0, [pc, #124]	; (d5e3c <_Z11etchASketchv+0xe8>)
   d5dbe:	f003 f819 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (joystickLeftDebouncer.read() == LOW)
   d5dc2:	481e      	ldr	r0, [pc, #120]	; (d5e3c <_Z11etchASketchv+0xe8>)
   d5dc4:	f003 f846 	bl	d8e54 <_ZN8Debounce4readEv>
   d5dc8:	b908      	cbnz	r0, d5dce <_Z11etchASketchv+0x7a>
    {
      displayX--;
   d5dca:	1e6e      	subs	r6, r5, #1
   d5dcc:	e000      	b.n	d5dd0 <_Z11etchASketchv+0x7c>
   d5dce:	462e      	mov	r6, r5
    }

    joystickRightDebouncer.update();
   d5dd0:	481b      	ldr	r0, [pc, #108]	; (d5e40 <_Z11etchASketchv+0xec>)
   d5dd2:	f003 f80f 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (joystickRightDebouncer.read() == LOW)
   d5dd6:	481a      	ldr	r0, [pc, #104]	; (d5e40 <_Z11etchASketchv+0xec>)
   d5dd8:	f003 f83c 	bl	d8e54 <_ZN8Debounce4readEv>
   d5ddc:	b900      	cbnz	r0, d5de0 <_Z11etchASketchv+0x8c>
    {
      displayX++;
   d5dde:	3601      	adds	r6, #1
    }

    if ((lastX != displayX) || (lastY != displayY))
   d5de0:	42b5      	cmp	r5, r6
   d5de2:	d101      	bne.n	d5de8 <_Z11etchASketchv+0x94>
   d5de4:	42bc      	cmp	r4, r7
   d5de6:	d003      	beq.n	d5df0 <_Z11etchASketchv+0x9c>
    {
      drawFilledCircle(displayX, displayY);
   d5de8:	4639      	mov	r1, r7
   d5dea:	4630      	mov	r0, r6
   d5dec:	f7ff ff52 	bl	d5c94 <_Z16drawFilledCircleii>
    }

    // Reset the screen
    joystickCenterDebouncer.update();
   d5df0:	4814      	ldr	r0, [pc, #80]	; (d5e44 <_Z11etchASketchv+0xf0>)
   d5df2:	f002 ffff 	bl	d8df4 <_ZN8Debounce6updateEv>
    if (joystickCenterDebouncer.read() == LOW)
   d5df6:	4813      	ldr	r0, [pc, #76]	; (d5e44 <_Z11etchASketchv+0xf0>)
   d5df8:	f003 f82c 	bl	d8e54 <_ZN8Debounce4readEv>
   d5dfc:	b110      	cbz	r0, d5e04 <_Z11etchASketchv+0xb0>
   d5dfe:	463c      	mov	r4, r7
   d5e00:	4635      	mov	r5, r6
   d5e02:	e7c5      	b.n	d5d90 <_Z11etchASketchv+0x3c>
    {
      clearScreen();
   d5e04:	f7ff fb10 	bl	d5428 <_Z11clearScreenv>
      displayX = display.width() / 2;
   d5e08:	4808      	ldr	r0, [pc, #32]	; (d5e2c <_Z11etchASketchv+0xd8>)
   d5e0a:	f002 f9f5 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5e0e:	2402      	movs	r4, #2
   d5e10:	fb90 f0f4 	sdiv	r0, r0, r4
   d5e14:	b205      	sxth	r5, r0
      displayY = display.height() / 2;
   d5e16:	4805      	ldr	r0, [pc, #20]	; (d5e2c <_Z11etchASketchv+0xd8>)
   d5e18:	f002 f9f1 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5e1c:	fb90 f0f4 	sdiv	r0, r0, r4
   d5e20:	b204      	sxth	r4, r0
   d5e22:	e7b5      	b.n	d5d90 <_Z11etchASketchv+0x3c>
   d5e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e28:	2003e1f6 	.word	0x2003e1f6
   d5e2c:	2003e1c8 	.word	0x2003e1c8
   d5e30:	2003e208 	.word	0x2003e208
   d5e34:	2003e2e8 	.word	0x2003e2e8
   d5e38:	2003e2f0 	.word	0x2003e2f0
   d5e3c:	2003e300 	.word	0x2003e300
   d5e40:	2003e2c0 	.word	0x2003e2c0
   d5e44:	2003e2c8 	.word	0x2003e2c8

000d5e48 <_Z11outOfBoundsv>:
int foodX = 0;
int foodY = 0;

bool outOfBounds()
{
  return snakeX <= minX || snakeY <= minY || snakeX >= maxX || snakeY >= maxY;
   d5e48:	4b0c      	ldr	r3, [pc, #48]	; (d5e7c <_Z11outOfBoundsv+0x34>)
   d5e4a:	681a      	ldr	r2, [r3, #0]
   d5e4c:	4b0c      	ldr	r3, [pc, #48]	; (d5e80 <_Z11outOfBoundsv+0x38>)
   d5e4e:	681b      	ldr	r3, [r3, #0]
   d5e50:	429a      	cmp	r2, r3
   d5e52:	dd10      	ble.n	d5e76 <_Z11outOfBoundsv+0x2e>
   d5e54:	4b0b      	ldr	r3, [pc, #44]	; (d5e84 <_Z11outOfBoundsv+0x3c>)
   d5e56:	490c      	ldr	r1, [pc, #48]	; (d5e88 <_Z11outOfBoundsv+0x40>)
   d5e58:	681b      	ldr	r3, [r3, #0]
   d5e5a:	6809      	ldr	r1, [r1, #0]
   d5e5c:	428b      	cmp	r3, r1
   d5e5e:	dd0a      	ble.n	d5e76 <_Z11outOfBoundsv+0x2e>
   d5e60:	490a      	ldr	r1, [pc, #40]	; (d5e8c <_Z11outOfBoundsv+0x44>)
   d5e62:	6809      	ldr	r1, [r1, #0]
   d5e64:	428a      	cmp	r2, r1
   d5e66:	da06      	bge.n	d5e76 <_Z11outOfBoundsv+0x2e>
   d5e68:	4a09      	ldr	r2, [pc, #36]	; (d5e90 <_Z11outOfBoundsv+0x48>)
   d5e6a:	6810      	ldr	r0, [r2, #0]
   d5e6c:	4283      	cmp	r3, r0
   d5e6e:	bfb4      	ite	lt
   d5e70:	2000      	movlt	r0, #0
   d5e72:	2001      	movge	r0, #1
   d5e74:	4770      	bx	lr
   d5e76:	2001      	movs	r0, #1
}
   d5e78:	4770      	bx	lr
   d5e7a:	bf00      	nop
   d5e7c:	2003d834 	.word	0x2003d834
   d5e80:	2003e290 	.word	0x2003e290
   d5e84:	2003d838 	.word	0x2003d838
   d5e88:	2003d824 	.word	0x2003d824
   d5e8c:	2003d82c 	.word	0x2003d82c
   d5e90:	2003d830 	.word	0x2003d830

000d5e94 <_Z8dropFoodv>:
  renderScore();
}

// Drop food on random location
void dropFood()
{
   d5e94:	b508      	push	{r3, lr}
  foodX = random(minX + 1, maxX - 1);
   d5e96:	4b0a      	ldr	r3, [pc, #40]	; (d5ec0 <_Z8dropFoodv+0x2c>)
   d5e98:	6819      	ldr	r1, [r3, #0]
   d5e9a:	4b0a      	ldr	r3, [pc, #40]	; (d5ec4 <_Z8dropFoodv+0x30>)
   d5e9c:	6818      	ldr	r0, [r3, #0]
   d5e9e:	3901      	subs	r1, #1
   d5ea0:	3001      	adds	r0, #1
   d5ea2:	f004 fafc 	bl	da49e <_Z6randomii>
   d5ea6:	4b08      	ldr	r3, [pc, #32]	; (d5ec8 <_Z8dropFoodv+0x34>)
   d5ea8:	6018      	str	r0, [r3, #0]
  foodY = random(minY + 1, maxY - 1);
   d5eaa:	4b08      	ldr	r3, [pc, #32]	; (d5ecc <_Z8dropFoodv+0x38>)
   d5eac:	6819      	ldr	r1, [r3, #0]
   d5eae:	4b08      	ldr	r3, [pc, #32]	; (d5ed0 <_Z8dropFoodv+0x3c>)
   d5eb0:	6818      	ldr	r0, [r3, #0]
   d5eb2:	3901      	subs	r1, #1
   d5eb4:	3001      	adds	r0, #1
   d5eb6:	f004 faf2 	bl	da49e <_Z6randomii>
   d5eba:	4b06      	ldr	r3, [pc, #24]	; (d5ed4 <_Z8dropFoodv+0x40>)
   d5ebc:	6018      	str	r0, [r3, #0]
   d5ebe:	bd08      	pop	{r3, pc}
   d5ec0:	2003d82c 	.word	0x2003d82c
   d5ec4:	2003e290 	.word	0x2003e290
   d5ec8:	2003e294 	.word	0x2003e294
   d5ecc:	2003d830 	.word	0x2003d830
   d5ed0:	2003d824 	.word	0x2003d824
   d5ed4:	2003e298 	.word	0x2003e298

000d5ed8 <_Z15crashedIntoSelfv>:
    return false;
  }
}

bool crashedIntoSelf()
{
   d5ed8:	b570      	push	{r4, r5, r6, lr}
  for (byte i = 4; i < snakeLength; i++)
   d5eda:	4b0c      	ldr	r3, [pc, #48]	; (d5f0c <_Z15crashedIntoSelfv+0x34>)
  {
    if (snakeX == snakePixelX[i] && snakeY == snakePixelY[i])
   d5edc:	4c0c      	ldr	r4, [pc, #48]	; (d5f10 <_Z15crashedIntoSelfv+0x38>)
  }
}

bool crashedIntoSelf()
{
  for (byte i = 4; i < snakeLength; i++)
   d5ede:	681a      	ldr	r2, [r3, #0]
  {
    if (snakeX == snakePixelX[i] && snakeY == snakePixelY[i])
   d5ee0:	4b0c      	ldr	r3, [pc, #48]	; (d5f14 <_Z15crashedIntoSelfv+0x3c>)
   d5ee2:	4d0d      	ldr	r5, [pc, #52]	; (d5f18 <_Z15crashedIntoSelfv+0x40>)
   d5ee4:	6819      	ldr	r1, [r3, #0]
   d5ee6:	4b0d      	ldr	r3, [pc, #52]	; (d5f1c <_Z15crashedIntoSelfv+0x44>)
   d5ee8:	6818      	ldr	r0, [r3, #0]
  }
}

bool crashedIntoSelf()
{
  for (byte i = 4; i < snakeLength; i++)
   d5eea:	2304      	movs	r3, #4
   d5eec:	4293      	cmp	r3, r2
   d5eee:	da08      	bge.n	d5f02 <_Z15crashedIntoSelfv+0x2a>
  {
    if (snakeX == snakePixelX[i] && snakeY == snakePixelY[i])
   d5ef0:	5ce6      	ldrb	r6, [r4, r3]
   d5ef2:	428e      	cmp	r6, r1
   d5ef4:	d102      	bne.n	d5efc <_Z15crashedIntoSelfv+0x24>
   d5ef6:	5cee      	ldrb	r6, [r5, r3]
   d5ef8:	4286      	cmp	r6, r0
   d5efa:	d004      	beq.n	d5f06 <_Z15crashedIntoSelfv+0x2e>
  }
}

bool crashedIntoSelf()
{
  for (byte i = 4; i < snakeLength; i++)
   d5efc:	3301      	adds	r3, #1
   d5efe:	b2db      	uxtb	r3, r3
   d5f00:	e7f4      	b.n	d5eec <_Z15crashedIntoSelfv+0x14>
    {
      return true;
    }
  }

  return false;
   d5f02:	2000      	movs	r0, #0
   d5f04:	bd70      	pop	{r4, r5, r6, pc}
{
  for (byte i = 4; i < snakeLength; i++)
  {
    if (snakeX == snakePixelX[i] && snakeY == snakePixelY[i])
    {
      return true;
   d5f06:	2001      	movs	r0, #1
    }
  }

  return false;
}
   d5f08:	bd70      	pop	{r4, r5, r6, pc}
   d5f0a:	bf00      	nop
   d5f0c:	2003d83c 	.word	0x2003d83c
   d5f10:	2003e27c 	.word	0x2003e27c
   d5f14:	2003d834 	.word	0x2003d834
   d5f18:	2003e264 	.word	0x2003e264
   d5f1c:	2003d838 	.word	0x2003d838

000d5f20 <_Z11renderScorev>:
{
  return snakeX <= minX || snakeY <= minY || snakeX >= maxX || snakeY >= maxY;
}

void renderScore()
{
   d5f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  display.fillRect(0, 0, display.width() - 1, 8, BLACK);
   d5f24:	4c3e      	ldr	r4, [pc, #248]	; (d6020 <_Z11renderScorev+0x100>)
{
  return snakeX <= minX || snakeY <= minY || snakeX >= maxX || snakeY >= maxY;
}

void renderScore()
{
   d5f26:	b087      	sub	sp, #28
  display.fillRect(0, 0, display.width() - 1, 8, BLACK);
   d5f28:	4620      	mov	r0, r4
   d5f2a:	f002 f965 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5f2e:	2500      	movs	r5, #0
   d5f30:	2608      	movs	r6, #8
   d5f32:	1e43      	subs	r3, r0, #1
   d5f34:	b21b      	sxth	r3, r3
   d5f36:	462a      	mov	r2, r5
   d5f38:	9600      	str	r6, [sp, #0]
   d5f3a:	4629      	mov	r1, r5
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	9501      	str	r5, [sp, #4]
   d5f40:	f001 fbe9 	bl	d7716 <_ZN12Adafruit_GFX8fillRectEsssst>

  display.setTextSize(1);
   d5f44:	4620      	mov	r0, r4
   d5f46:	2101      	movs	r1, #1
   d5f48:	f002 f94a 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	2101      	movs	r1, #1
   d5f50:	f002 f94b 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0, 0);
   d5f54:	462a      	mov	r2, r5
   d5f56:	4629      	mov	r1, r5
   d5f58:	4620      	mov	r0, r4
   d5f5a:	f002 f93e 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>

  display.print("Score: ");
   d5f5e:	4931      	ldr	r1, [pc, #196]	; (d6024 <_Z11renderScorev+0x104>)
   d5f60:	4620      	mov	r0, r4
   d5f62:	f004 f9dd 	bl	da320 <_ZN5Print5printEPKc>
  display.print(String(score, DEC));
   d5f66:	4b30      	ldr	r3, [pc, #192]	; (d6028 <_Z11renderScorev+0x108>)
   d5f68:	220a      	movs	r2, #10
   d5f6a:	6819      	ldr	r1, [r3, #0]
   d5f6c:	eb0d 0006 	add.w	r0, sp, r6
   d5f70:	f004 fc05 	bl	da77e <_ZN6StringC1Elh>
   d5f74:	9902      	ldr	r1, [sp, #8]
   d5f76:	4620      	mov	r0, r4
   d5f78:	f004 f9d2 	bl	da320 <_ZN5Print5printEPKc>
   d5f7c:	eb0d 0006 	add.w	r0, sp, r6
   d5f80:	f004 fb40 	bl	da604 <_ZN6StringD1Ev>

  // TOP
  display.drawLine(0, 8, display.width() - 1, 8, WHITE);
   d5f84:	4620      	mov	r0, r4
   d5f86:	f002 f937 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5f8a:	2701      	movs	r7, #1
   d5f8c:	1e43      	subs	r3, r0, #1
   d5f8e:	4632      	mov	r2, r6
   d5f90:	4629      	mov	r1, r5
   d5f92:	e88d 00c0 	stmia.w	sp, {r6, r7}
   d5f96:	b21b      	sxth	r3, r3
   d5f98:	4620      	mov	r0, r4
   d5f9a:	f001 fb11 	bl	d75c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  // LEFT
  display.drawLine(0, 8, 0, display.height() - 1, WHITE);
   d5f9e:	4620      	mov	r0, r4
   d5fa0:	f002 f92d 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5fa4:	3801      	subs	r0, #1
   d5fa6:	b200      	sxth	r0, r0
   d5fa8:	462b      	mov	r3, r5
   d5faa:	4632      	mov	r2, r6
   d5fac:	4629      	mov	r1, r5
   d5fae:	9000      	str	r0, [sp, #0]
   d5fb0:	9701      	str	r7, [sp, #4]
   d5fb2:	4620      	mov	r0, r4
   d5fb4:	f001 fb04 	bl	d75c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  // RIGHT
  display.drawLine(display.width() - 1, 8, display.width() - 1, display.height() - 1, WHITE);
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f002 f91d 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5fbe:	4680      	mov	r8, r0
   d5fc0:	4620      	mov	r0, r4
   d5fc2:	f002 f919 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5fc6:	4681      	mov	r9, r0
   d5fc8:	4620      	mov	r0, r4
   d5fca:	f002 f918 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5fce:	3801      	subs	r0, #1
   d5fd0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   d5fd4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d5fd8:	b200      	sxth	r0, r0
   d5fda:	4632      	mov	r2, r6
   d5fdc:	b21b      	sxth	r3, r3
   d5fde:	b209      	sxth	r1, r1
   d5fe0:	9000      	str	r0, [sp, #0]
   d5fe2:	9701      	str	r7, [sp, #4]
   d5fe4:	4620      	mov	r0, r4
   d5fe6:	f001 faeb 	bl	d75c0 <_ZN12Adafruit_GFX8drawLineEsssst>
  // BOTTOM
  display.drawLine(0, display.height() - 1, display.width() - 1, display.height() - 1, WHITE);
   d5fea:	4620      	mov	r0, r4
   d5fec:	f002 f907 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d5ff0:	4606      	mov	r6, r0
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	f002 f900 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d5ff8:	4680      	mov	r8, r0
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f002 f8ff 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d6000:	3801      	subs	r0, #1
   d6002:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   d6006:	1e72      	subs	r2, r6, #1
   d6008:	b200      	sxth	r0, r0
   d600a:	9000      	str	r0, [sp, #0]
   d600c:	9701      	str	r7, [sp, #4]
   d600e:	b21b      	sxth	r3, r3
   d6010:	b212      	sxth	r2, r2
   d6012:	4629      	mov	r1, r5
   d6014:	4620      	mov	r0, r4
   d6016:	f001 fad3 	bl	d75c0 <_ZN12Adafruit_GFX8drawLineEsssst>
}
   d601a:	b007      	add	sp, #28
   d601c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6020:	2003e1c8 	.word	0x2003e1c8
   d6024:	000ddb1d 	.word	0x000ddb1d
   d6028:	2003e278 	.word	0x2003e278

000d602c <_Z8gameOverv>:

void gameOver()
{
   d602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  display.clearDisplay();
   d602e:	4c1e      	ldr	r4, [pc, #120]	; (d60a8 <_Z8gameOverv+0x7c>)
  display.setCursor(5, 5);
  display.print("GAME OVER :(");
  display.display();

  score = 0;
  snakeLength = 1;
   d6030:	4f1e      	ldr	r7, [pc, #120]	; (d60ac <_Z8gameOverv+0x80>)
  snakeX = display.width() / 2;
   d6032:	4e1f      	ldr	r6, [pc, #124]	; (d60b0 <_Z8gameOverv+0x84>)
  display.drawLine(0, display.height() - 1, display.width() - 1, display.height() - 1, WHITE);
}

void gameOver()
{
  display.clearDisplay();
   d6034:	4620      	mov	r0, r4
   d6036:	f002 fd03 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setCursor(5, 5);
   d603a:	2205      	movs	r2, #5
   d603c:	4611      	mov	r1, r2
   d603e:	4620      	mov	r0, r4
   d6040:	f002 f8cb 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.print("GAME OVER :(");
   d6044:	491b      	ldr	r1, [pc, #108]	; (d60b4 <_Z8gameOverv+0x88>)
   d6046:	4620      	mov	r0, r4
   d6048:	f004 f96a 	bl	da320 <_ZN5Print5printEPKc>
  display.display();
   d604c:	4620      	mov	r0, r4
   d604e:	f002 fc81 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>

  score = 0;
   d6052:	4b19      	ldr	r3, [pc, #100]	; (d60b8 <_Z8gameOverv+0x8c>)
   d6054:	2200      	movs	r2, #0
   d6056:	601a      	str	r2, [r3, #0]
  snakeLength = 1;
  snakeX = display.width() / 2;
   d6058:	4620      	mov	r0, r4
  display.setCursor(5, 5);
  display.print("GAME OVER :(");
  display.display();

  score = 0;
  snakeLength = 1;
   d605a:	2301      	movs	r3, #1
   d605c:	603b      	str	r3, [r7, #0]
  snakeX = display.width() / 2;
   d605e:	f002 f8cb 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d6062:	2502      	movs	r5, #2
   d6064:	fb90 f0f5 	sdiv	r0, r0, r5
   d6068:	b200      	sxth	r0, r0
   d606a:	6030      	str	r0, [r6, #0]
  snakeY = display.height() / 2;
   d606c:	4620      	mov	r0, r4
   d606e:	f002 f8c6 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d6072:	4b12      	ldr	r3, [pc, #72]	; (d60bc <_Z8gameOverv+0x90>)
   d6074:	fb90 f0f5 	sdiv	r0, r0, r5
   d6078:	b200      	sxth	r0, r0
   d607a:	6018      	str	r0, [r3, #0]

  snakePixelX[snakeLength - 1] = snakeX;
   d607c:	683b      	ldr	r3, [r7, #0]
   d607e:	4a10      	ldr	r2, [pc, #64]	; (d60c0 <_Z8gameOverv+0x94>)
   d6080:	6831      	ldr	r1, [r6, #0]
   d6082:	3b01      	subs	r3, #1
   d6084:	54d1      	strb	r1, [r2, r3]
  snakePixelY[snakeLength - 1] = snakeY;
   d6086:	4a0f      	ldr	r2, [pc, #60]	; (d60c4 <_Z8gameOverv+0x98>)
   d6088:	54d0      	strb	r0, [r2, r3]

  snakeDir = D_SOUTH;
   d608a:	4b0f      	ldr	r3, [pc, #60]	; (d60c8 <_Z8gameOverv+0x9c>)
   d608c:	2203      	movs	r2, #3

  delay(2000);
   d608e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  snakeY = display.height() / 2;

  snakePixelX[snakeLength - 1] = snakeX;
  snakePixelY[snakeLength - 1] = snakeY;

  snakeDir = D_SOUTH;
   d6092:	601a      	str	r2, [r3, #0]

  delay(2000);
   d6094:	f003 fb44 	bl	d9720 <delay>

  display.clearDisplay();
   d6098:	4620      	mov	r0, r4
   d609a:	f002 fcd1 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  renderScore();
}
   d609e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  snakeDir = D_SOUTH;

  delay(2000);

  display.clearDisplay();
  renderScore();
   d60a2:	f7ff bf3d 	b.w	d5f20 <_Z11renderScorev>
   d60a6:	bf00      	nop
   d60a8:	2003e1c8 	.word	0x2003e1c8
   d60ac:	2003d83c 	.word	0x2003d83c
   d60b0:	2003d834 	.word	0x2003d834
   d60b4:	000ddb25 	.word	0x000ddb25
   d60b8:	2003e278 	.word	0x2003e278
   d60bc:	2003d838 	.word	0x2003d838
   d60c0:	2003e27c 	.word	0x2003e27c
   d60c4:	2003e264 	.word	0x2003e264
   d60c8:	2003d828 	.word	0x2003d828

000d60cc <_Z11collectFoodv>:
  foodX = random(minX + 1, maxX - 1);
  foodY = random(minY + 1, maxY - 1);
}

bool collectFood()
{
   d60cc:	b508      	push	{r3, lr}
  if (snakeX == foodX && snakeY == foodY)
   d60ce:	4b0c      	ldr	r3, [pc, #48]	; (d6100 <_Z11collectFoodv+0x34>)
   d60d0:	681a      	ldr	r2, [r3, #0]
   d60d2:	4b0c      	ldr	r3, [pc, #48]	; (d6104 <_Z11collectFoodv+0x38>)
   d60d4:	681b      	ldr	r3, [r3, #0]
   d60d6:	429a      	cmp	r2, r3
   d60d8:	d10f      	bne.n	d60fa <_Z11collectFoodv+0x2e>
   d60da:	4b0b      	ldr	r3, [pc, #44]	; (d6108 <_Z11collectFoodv+0x3c>)
   d60dc:	681a      	ldr	r2, [r3, #0]
   d60de:	4b0b      	ldr	r3, [pc, #44]	; (d610c <_Z11collectFoodv+0x40>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	429a      	cmp	r2, r3
   d60e4:	d109      	bne.n	d60fa <_Z11collectFoodv+0x2e>
  {
    score += 10;
   d60e6:	4a0a      	ldr	r2, [pc, #40]	; (d6110 <_Z11collectFoodv+0x44>)
   d60e8:	6813      	ldr	r3, [r2, #0]
   d60ea:	330a      	adds	r3, #10
   d60ec:	6013      	str	r3, [r2, #0]

    renderScore();
   d60ee:	f7ff ff17 	bl	d5f20 <_Z11renderScorev>
    dropFood();
   d60f2:	f7ff fecf 	bl	d5e94 <_Z8dropFoodv>
   d60f6:	2001      	movs	r0, #1
   d60f8:	bd08      	pop	{r3, pc}

    return true;
  }
  else
  {
    return false;
   d60fa:	2000      	movs	r0, #0
  }
}
   d60fc:	bd08      	pop	{r3, pc}
   d60fe:	bf00      	nop
   d6100:	2003d834 	.word	0x2003d834
   d6104:	2003e294 	.word	0x2003e294
   d6108:	2003d838 	.word	0x2003d838
   d610c:	2003e298 	.word	0x2003e298
   d6110:	2003e278 	.word	0x2003e278

000d6114 <_Z10drawScreenv>:

  return false;
}

void drawScreen()
{
   d6114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool foodCollected = false;

  display.clearDisplay();
   d6118:	4831      	ldr	r0, [pc, #196]	; (d61e0 <_Z10drawScreenv+0xcc>)
   d611a:	f002 fc91 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

  display.drawPixel(foodX, foodY, WHITE);
   d611e:	4a31      	ldr	r2, [pc, #196]	; (d61e4 <_Z10drawScreenv+0xd0>)
   d6120:	4931      	ldr	r1, [pc, #196]	; (d61e8 <_Z10drawScreenv+0xd4>)
   d6122:	f9b2 2000 	ldrsh.w	r2, [r2]
   d6126:	f9b1 1000 	ldrsh.w	r1, [r1]
   d612a:	482d      	ldr	r0, [pc, #180]	; (d61e0 <_Z10drawScreenv+0xcc>)
   d612c:	2301      	movs	r3, #1
   d612e:	f002 f9f1 	bl	d8514 <_ZN16Adafruit_SSD13069drawPixelEsst>
  foodCollected = collectFood();
   d6132:	f7ff ffcb 	bl	d60cc <_Z11collectFoodv>
   d6136:	4606      	mov	r6, r0

  // Check snake position
  if (outOfBounds() || crashedIntoSelf())
   d6138:	f7ff fe86 	bl	d5e48 <_Z11outOfBoundsv>
   d613c:	2800      	cmp	r0, #0
   d613e:	d14c      	bne.n	d61da <_Z10drawScreenv+0xc6>
   d6140:	f7ff feca 	bl	d5ed8 <_Z15crashedIntoSelfv>
   d6144:	2800      	cmp	r0, #0
   d6146:	d148      	bne.n	d61da <_Z10drawScreenv+0xc6>
  {
    gameOver();
  }

  // Render the snake
  for (int i = 0; i < snakeLength; i++)
   d6148:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d61fc <_Z10drawScreenv+0xe8>
   d614c:	4f27      	ldr	r7, [pc, #156]	; (d61ec <_Z10drawScreenv+0xd8>)

  return false;
}

void drawScreen()
{
   d614e:	2400      	movs	r4, #0
  {
    gameOver();
  }

  // Render the snake
  for (int i = 0; i < snakeLength; i++)
   d6150:	f8d8 0000 	ldr.w	r0, [r8]
   d6154:	4d25      	ldr	r5, [pc, #148]	; (d61ec <_Z10drawScreenv+0xd8>)
   d6156:	4926      	ldr	r1, [pc, #152]	; (d61f0 <_Z10drawScreenv+0xdc>)
   d6158:	4284      	cmp	r4, r0
   d615a:	db01      	blt.n	d6160 <_Z10drawScreenv+0x4c>
   d615c:	4603      	mov	r3, r0
   d615e:	e007      	b.n	d6170 <_Z10drawScreenv+0x5c>
  {
    display.drawPixel(snakePixelX[i], snakePixelY[i], WHITE);
   d6160:	5d3a      	ldrb	r2, [r7, r4]
   d6162:	5d09      	ldrb	r1, [r1, r4]
   d6164:	481e      	ldr	r0, [pc, #120]	; (d61e0 <_Z10drawScreenv+0xcc>)
   d6166:	2301      	movs	r3, #1
   d6168:	f002 f9d4 	bl	d8514 <_ZN16Adafruit_SSD13069drawPixelEsst>
  {
    gameOver();
  }

  // Render the snake
  for (int i = 0; i < snakeLength; i++)
   d616c:	3401      	adds	r4, #1
   d616e:	e7ef      	b.n	d6150 <_Z10drawScreenv+0x3c>
  {
    display.drawPixel(snakePixelX[i], snakePixelY[i], WHITE);
  }

  // Move pixel values
  for (int i = snakeLength; i > 0; i--)
   d6170:	2b00      	cmp	r3, #0
   d6172:	dd07      	ble.n	d6184 <_Z10drawScreenv+0x70>
  {
    snakePixelX[i] = snakePixelX[i - 1];
   d6174:	3b01      	subs	r3, #1
   d6176:	18ca      	adds	r2, r1, r3
   d6178:	5ccc      	ldrb	r4, [r1, r3]
   d617a:	7054      	strb	r4, [r2, #1]
    snakePixelY[i] = snakePixelY[i - 1];
   d617c:	18ea      	adds	r2, r5, r3
   d617e:	5cec      	ldrb	r4, [r5, r3]
   d6180:	7054      	strb	r4, [r2, #1]
  {
    display.drawPixel(snakePixelX[i], snakePixelY[i], WHITE);
  }

  // Move pixel values
  for (int i = snakeLength; i > 0; i--)
   d6182:	e7f5      	b.n	d6170 <_Z10drawScreenv+0x5c>
   d6184:	4a1b      	ldr	r2, [pc, #108]	; (d61f4 <_Z10drawScreenv+0xe0>)
   d6186:	4b1c      	ldr	r3, [pc, #112]	; (d61f8 <_Z10drawScreenv+0xe4>)
  {
    snakePixelX[i] = snakePixelX[i - 1];
    snakePixelY[i] = snakePixelY[i - 1];
  }

  if (foodCollected)
   d6188:	b136      	cbz	r6, d6198 <_Z10drawScreenv+0x84>
  {
    snakeLength += 1;
   d618a:	4c1c      	ldr	r4, [pc, #112]	; (d61fc <_Z10drawScreenv+0xe8>)
   d618c:	1c46      	adds	r6, r0, #1
   d618e:	6026      	str	r6, [r4, #0]
    snakePixelX[snakeLength - 1] = snakeX;
   d6190:	6814      	ldr	r4, [r2, #0]
   d6192:	540c      	strb	r4, [r1, r0]
    snakePixelY[snakeLength - 1] = snakeY;
   d6194:	681c      	ldr	r4, [r3, #0]
   d6196:	542c      	strb	r4, [r5, r0]
  }

  switch (snakeDir)
   d6198:	4819      	ldr	r0, [pc, #100]	; (d6200 <_Z10drawScreenv+0xec>)
   d619a:	6800      	ldr	r0, [r0, #0]
   d619c:	3801      	subs	r0, #1
   d619e:	2803      	cmp	r0, #3
   d61a0:	d810      	bhi.n	d61c4 <_Z10drawScreenv+0xb0>
   d61a2:	e8df f000 	tbb	[pc, r0]
   d61a6:	0502      	.short	0x0502
   d61a8:	0c08      	.short	0x0c08
  {
  case D_NORTH:
    snakeY -= 1;
   d61aa:	6818      	ldr	r0, [r3, #0]
   d61ac:	3801      	subs	r0, #1
   d61ae:	e004      	b.n	d61ba <_Z10drawScreenv+0xa6>
    break;
  case D_EAST:
    snakeX += 1;
   d61b0:	6810      	ldr	r0, [r2, #0]
   d61b2:	3001      	adds	r0, #1
   d61b4:	e005      	b.n	d61c2 <_Z10drawScreenv+0xae>
    break;
  case D_SOUTH:
    snakeY += 1;
   d61b6:	6818      	ldr	r0, [r3, #0]
   d61b8:	3001      	adds	r0, #1
   d61ba:	6018      	str	r0, [r3, #0]
    break;
   d61bc:	e002      	b.n	d61c4 <_Z10drawScreenv+0xb0>
  case D_WEST:
    snakeX -= 1;
   d61be:	6810      	ldr	r0, [r2, #0]
   d61c0:	3801      	subs	r0, #1
   d61c2:	6010      	str	r0, [r2, #0]
    break;
  }

  snakePixelX[0] = snakeX;
   d61c4:	6812      	ldr	r2, [r2, #0]
  snakePixelY[0] = snakeY;
   d61c6:	681b      	ldr	r3, [r3, #0]
   d61c8:	702b      	strb	r3, [r5, #0]
  case D_WEST:
    snakeX -= 1;
    break;
  }

  snakePixelX[0] = snakeX;
   d61ca:	700a      	strb	r2, [r1, #0]
  snakePixelY[0] = snakeY;

  renderScore();
   d61cc:	f7ff fea8 	bl	d5f20 <_Z11renderScorev>
  display.display();
   d61d0:	4803      	ldr	r0, [pc, #12]	; (d61e0 <_Z10drawScreenv+0xcc>)
}
   d61d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

  snakePixelX[0] = snakeX;
  snakePixelY[0] = snakeY;

  renderScore();
  display.display();
   d61d6:	f002 bbbd 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>
  foodCollected = collectFood();

  // Check snake position
  if (outOfBounds() || crashedIntoSelf())
  {
    gameOver();
   d61da:	f7ff ff27 	bl	d602c <_Z8gameOverv>
   d61de:	e7b3      	b.n	d6148 <_Z10drawScreenv+0x34>
   d61e0:	2003e1c8 	.word	0x2003e1c8
   d61e4:	2003e298 	.word	0x2003e298
   d61e8:	2003e294 	.word	0x2003e294
   d61ec:	2003e264 	.word	0x2003e264
   d61f0:	2003e27c 	.word	0x2003e27c
   d61f4:	2003d834 	.word	0x2003d834
   d61f8:	2003d838 	.word	0x2003d838
   d61fc:	2003d83c 	.word	0x2003d83c
   d6200:	2003d828 	.word	0x2003d828

000d6204 <_Z9snakeGamev>:
  renderScore();
  display.display();
}

void snakeGame()
{
   d6204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  appmode = 1;
   d6206:	4c1e      	ldr	r4, [pc, #120]	; (d6280 <_Z9snakeGamev+0x7c>)
  btnid = 0;
   d6208:	4d1e      	ldr	r5, [pc, #120]	; (d6284 <_Z9snakeGamev+0x80>)
   d620a:	2600      	movs	r6, #0
  display.display();
}

void snakeGame()
{
  appmode = 1;
   d620c:	2701      	movs	r7, #1
  btnid = 0;
   d620e:	702e      	strb	r6, [r5, #0]
  display.display();
}

void snakeGame()
{
  appmode = 1;
   d6210:	7027      	strb	r7, [r4, #0]
  btnid = 0;
  clearScreen();
   d6212:	f7ff f909 	bl	d5428 <_Z11clearScreenv>

  setupLEDButtonInterrupt();
   d6216:	f000 fc21 	bl	d6a5c <_Z23setupLEDButtonInterruptv>

  minX = 0;
   d621a:	4b1b      	ldr	r3, [pc, #108]	; (d6288 <_Z9snakeGamev+0x84>)
  minY = 8;
  maxX = display.width() - 1;
   d621c:	481b      	ldr	r0, [pc, #108]	; (d628c <_Z9snakeGamev+0x88>)
  btnid = 0;
  clearScreen();

  setupLEDButtonInterrupt();

  minX = 0;
   d621e:	601e      	str	r6, [r3, #0]
  minY = 8;
   d6220:	4b1b      	ldr	r3, [pc, #108]	; (d6290 <_Z9snakeGamev+0x8c>)
    {
      snakeDir = D_NORTH;
    }
    else if (btnid == 4)
    {
      snakeDir = D_WEST;
   d6222:	4e1c      	ldr	r6, [pc, #112]	; (d6294 <_Z9snakeGamev+0x90>)
  clearScreen();

  setupLEDButtonInterrupt();

  minX = 0;
  minY = 8;
   d6224:	2208      	movs	r2, #8
   d6226:	601a      	str	r2, [r3, #0]
  maxX = display.width() - 1;
   d6228:	f001 ffe6 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d622c:	4b1a      	ldr	r3, [pc, #104]	; (d6298 <_Z9snakeGamev+0x94>)
   d622e:	3801      	subs	r0, #1
   d6230:	6018      	str	r0, [r3, #0]
  maxY = display.height() - 1;
   d6232:	4816      	ldr	r0, [pc, #88]	; (d628c <_Z9snakeGamev+0x88>)
   d6234:	f001 ffe3 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d6238:	4b18      	ldr	r3, [pc, #96]	; (d629c <_Z9snakeGamev+0x98>)
   d623a:	3801      	subs	r0, #1
   d623c:	6018      	str	r0, [r3, #0]

  dropFood();
   d623e:	f7ff fe29 	bl	d5e94 <_Z8dropFoodv>

  while (appmode)
   d6242:	7823      	ldrb	r3, [r4, #0]
   d6244:	b1ab      	cbz	r3, d6272 <_Z9snakeGamev+0x6e>
  {
    if (btnid == 5)
   d6246:	782b      	ldrb	r3, [r5, #0]
   d6248:	2b05      	cmp	r3, #5
   d624a:	d101      	bne.n	d6250 <_Z9snakeGamev+0x4c>
    {
      snakeDir = D_EAST;
   d624c:	2302      	movs	r3, #2
   d624e:	e009      	b.n	d6264 <_Z9snakeGamev+0x60>
    }
    else if (btnid == 2)
   d6250:	2b02      	cmp	r3, #2
   d6252:	d101      	bne.n	d6258 <_Z9snakeGamev+0x54>
    {
      snakeDir = D_SOUTH;
   d6254:	2303      	movs	r3, #3
   d6256:	e005      	b.n	d6264 <_Z9snakeGamev+0x60>
    }
    else if (btnid == 3)
   d6258:	2b03      	cmp	r3, #3
   d625a:	d101      	bne.n	d6260 <_Z9snakeGamev+0x5c>
    {
      snakeDir = D_NORTH;
   d625c:	6037      	str	r7, [r6, #0]
   d625e:	e002      	b.n	d6266 <_Z9snakeGamev+0x62>
    }
    else if (btnid == 4)
   d6260:	2b04      	cmp	r3, #4
   d6262:	d100      	bne.n	d6266 <_Z9snakeGamev+0x62>
    {
      snakeDir = D_WEST;
   d6264:	6033      	str	r3, [r6, #0]
    }

    drawScreen();
   d6266:	f7ff ff55 	bl	d6114 <_Z10drawScreenv>

    delay(60); //10 is too fast for snake. 300 is dirt slow. 100 is still slowish but decent
   d626a:	203c      	movs	r0, #60	; 0x3c
   d626c:	f003 fa58 	bl	d9720 <delay>
  maxX = display.width() - 1;
  maxY = display.height() - 1;

  dropFood();

  while (appmode)
   d6270:	e7e7      	b.n	d6242 <_Z9snakeGamev+0x3e>

    drawScreen();

    delay(60); //10 is too fast for snake. 300 is dirt slow. 100 is still slowish but decent
  }
  appmode = 0;
   d6272:	4a03      	ldr	r2, [pc, #12]	; (d6280 <_Z9snakeGamev+0x7c>)
   d6274:	7013      	strb	r3, [r2, #0]
  btncounter++;
   d6276:	4a0a      	ldr	r2, [pc, #40]	; (d62a0 <_Z9snakeGamev+0x9c>)
   d6278:	7813      	ldrb	r3, [r2, #0]
   d627a:	3301      	adds	r3, #1
   d627c:	7013      	strb	r3, [r2, #0]
   d627e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6280:	2003e1f6 	.word	0x2003e1f6
   d6284:	2003e208 	.word	0x2003e208
   d6288:	2003e290 	.word	0x2003e290
   d628c:	2003e1c8 	.word	0x2003e1c8
   d6290:	2003d824 	.word	0x2003d824
   d6294:	2003d828 	.word	0x2003d828
   d6298:	2003d82c 	.word	0x2003d82c
   d629c:	2003d830 	.word	0x2003d830
   d62a0:	2003e1c0 	.word	0x2003e1c0

000d62a4 <_Z9playMovesv>:
  return true; // We should never get here
}

// Plays the current contents of the game moves
void playMoves(void)
{
   d62a4:	b570      	push	{r4, r5, r6, lr}
  for (byte currentMove = 0; currentMove < gameRound; currentMove++)
   d62a6:	4e09      	ldr	r6, [pc, #36]	; (d62cc <_Z9playMovesv+0x28>)
  {
    toner(gameBoard[currentMove], 150);
   d62a8:	4d09      	ldr	r5, [pc, #36]	; (d62d0 <_Z9playMovesv+0x2c>)
  return true; // We should never get here
}

// Plays the current contents of the game moves
void playMoves(void)
{
   d62aa:	2300      	movs	r3, #0
  for (byte currentMove = 0; currentMove < gameRound; currentMove++)
   d62ac:	7832      	ldrb	r2, [r6, #0]
   d62ae:	1c5c      	adds	r4, r3, #1
   d62b0:	b2db      	uxtb	r3, r3
   d62b2:	429a      	cmp	r2, r3
   d62b4:	d908      	bls.n	d62c8 <_Z9playMovesv+0x24>
  {
    toner(gameBoard[currentMove], 150);
   d62b6:	5ce8      	ldrb	r0, [r5, r3]
   d62b8:	2196      	movs	r1, #150	; 0x96
   d62ba:	f000 fd05 	bl	d6cc8 <_Z5tonerhi>

    // Wait some amount of time between button playback
    // Shorten this to make game harder
    delay(150); // 150 works well. 75 gets fast.
   d62be:	2096      	movs	r0, #150	; 0x96
   d62c0:	f003 fa2e 	bl	d9720 <delay>
}

// Plays the current contents of the game moves
void playMoves(void)
{
  for (byte currentMove = 0; currentMove < gameRound; currentMove++)
   d62c4:	4623      	mov	r3, r4
   d62c6:	e7f1      	b.n	d62ac <_Z9playMovesv+0x8>
   d62c8:	bd70      	pop	{r4, r5, r6, pc}
   d62ca:	bf00      	nop
   d62cc:	2003e2be 	.word	0x2003e2be
   d62d0:	2003e29e 	.word	0x2003e29e

000d62d4 <_Z12add_to_movesv>:
  }
}

// Adds a new random button to the game sequence, by sampling the timer
void add_to_moves(void)
{
   d62d4:	b508      	push	{r3, lr}
  byte newButton = random(0, 4); //min (included), max (exluded)
   d62d6:	2104      	movs	r1, #4
   d62d8:	2000      	movs	r0, #0
   d62da:	f004 f8e0 	bl	da49e <_Z6randomii>
   d62de:	b2c0      	uxtb	r0, r0

  // We have to convert this number, 0 to 3, to CHOICEs
  if (newButton == 0)
   d62e0:	b138      	cbz	r0, d62f2 <_Z12add_to_movesv+0x1e>
    newButton = CHOICE_RED;
  else if (newButton == 1)
   d62e2:	2801      	cmp	r0, #1
   d62e4:	d007      	beq.n	d62f6 <_Z12add_to_movesv+0x22>
    newButton = CHOICE_GREEN;
  else if (newButton == 2)
   d62e6:	2802      	cmp	r0, #2
   d62e8:	d007      	beq.n	d62fa <_Z12add_to_movesv+0x26>
    newButton = CHOICE_BLUE;
  else if (newButton == 3)
   d62ea:	2803      	cmp	r0, #3
    newButton = CHOICE_YELLOW;
   d62ec:	bf08      	it	eq
   d62ee:	2008      	moveq	r0, #8
   d62f0:	e004      	b.n	d62fc <_Z12add_to_movesv+0x28>
{
  byte newButton = random(0, 4); //min (included), max (exluded)

  // We have to convert this number, 0 to 3, to CHOICEs
  if (newButton == 0)
    newButton = CHOICE_RED;
   d62f2:	2001      	movs	r0, #1
   d62f4:	e002      	b.n	d62fc <_Z12add_to_movesv+0x28>
  else if (newButton == 1)
    newButton = CHOICE_GREEN;
   d62f6:	2002      	movs	r0, #2
   d62f8:	e000      	b.n	d62fc <_Z12add_to_movesv+0x28>
  else if (newButton == 2)
    newButton = CHOICE_BLUE;
   d62fa:	2004      	movs	r0, #4
  else if (newButton == 3)
    newButton = CHOICE_YELLOW;

  gameBoard[gameRound++] = newButton; // Add this new button to the game array
   d62fc:	4a03      	ldr	r2, [pc, #12]	; (d630c <_Z12add_to_movesv+0x38>)
   d62fe:	7813      	ldrb	r3, [r2, #0]
   d6300:	1c59      	adds	r1, r3, #1
   d6302:	7011      	strb	r1, [r2, #0]
   d6304:	4a02      	ldr	r2, [pc, #8]	; (d6310 <_Z12add_to_movesv+0x3c>)
   d6306:	54d0      	strb	r0, [r2, r3]
   d6308:	bd08      	pop	{r3, pc}
   d630a:	bf00      	nop
   d630c:	2003e2be 	.word	0x2003e2be
   d6310:	2003e29e 	.word	0x2003e29e

000d6314 <_Z15wait_for_buttonv>:
//The following functions control the hardware

// Wait for a button to be pressed.
// Returns one of LED colors (LED_RED, etc.) if successful, 0 if timed out
byte wait_for_button(void)
{
   d6314:	b570      	push	{r4, r5, r6, lr}
   d6316:	f002 fefb 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  long startTime = millis(); // Remember the time we started the this loop

  while ((millis() - startTime) < ENTRY_TIME_LIMIT) // Loop until too much time has passed
   d631a:	f640 36b7 	movw	r6, #2999	; 0xbb7
   d631e:	4605      	mov	r5, r0
   d6320:	f002 fef6 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
   d6324:	1b40      	subs	r0, r0, r5
   d6326:	42b0      	cmp	r0, r6
   d6328:	d810      	bhi.n	d634c <_Z15wait_for_buttonv+0x38>
  {
    byte button = checkButton();
   d632a:	f000 f9bf 	bl	d66ac <_Z11checkButtonv>

    if (button != CHOICE_NONE)
   d632e:	4604      	mov	r4, r0
   d6330:	2800      	cmp	r0, #0
   d6332:	d0f5      	beq.n	d6320 <_Z15wait_for_buttonv+0xc>
    {
      toner(button, 150); // Play the button the user just pressed
   d6334:	2196      	movs	r1, #150	; 0x96
   d6336:	f000 fcc7 	bl	d6cc8 <_Z5tonerhi>

      while (checkButton() != CHOICE_NONE)
   d633a:	f000 f9b7 	bl	d66ac <_Z11checkButtonv>
   d633e:	2800      	cmp	r0, #0
   d6340:	d1fb      	bne.n	d633a <_Z15wait_for_buttonv+0x26>
        ; // Now let's wait for user to release button

      delay(10); // This helps with debouncing and accidental double taps
   d6342:	200a      	movs	r0, #10
   d6344:	f003 f9ec 	bl	d9720 <delay>
{
  long startTime = millis(); // Remember the time we started the this loop

  while ((millis() - startTime) < ENTRY_TIME_LIMIT) // Loop until too much time has passed
  {
    byte button = checkButton();
   d6348:	4620      	mov	r0, r4
      while (checkButton() != CHOICE_NONE)
        ; // Now let's wait for user to release button

      delay(10); // This helps with debouncing and accidental double taps

      return button;
   d634a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  return CHOICE_NONE; // If we get here, we've timed out!
   d634c:	2000      	movs	r0, #0
}
   d634e:	bd70      	pop	{r4, r5, r6, pc}

000d6350 <_Z11play_battlev>:
// Play the special 2 player battle mode
// A player begins by pressing a button then handing it to the other player
// That player repeats the button and adds one, then passes back.
// This function returns when someone loses
boolean play_battle(void)
{
   d6350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gameRound = 0; // Reset the game frame back to one frame
   d6354:	4c10      	ldr	r4, [pc, #64]	; (d6398 <_Z11play_battlev+0x48>)

  while (1) // Loop until someone fails
  {
    byte newButton = wait_for_button(); // Wait for user to input next move
    gameBoard[gameRound++] = newButton; // Add this new button to the game array
   d6356:	4f11      	ldr	r7, [pc, #68]	; (d639c <_Z11play_battlev+0x4c>)
// A player begins by pressing a button then handing it to the other player
// That player repeats the button and adds one, then passes back.
// This function returns when someone loses
boolean play_battle(void)
{
  gameRound = 0; // Reset the game frame back to one frame
   d6358:	2300      	movs	r3, #0
   d635a:	7023      	strb	r3, [r4, #0]
   d635c:	46b8      	mov	r8, r7

  while (1) // Loop until someone fails
  {
    byte newButton = wait_for_button(); // Wait for user to input next move
   d635e:	f7ff ffd9 	bl	d6314 <_Z15wait_for_buttonv>
    gameBoard[gameRound++] = newButton; // Add this new button to the game array
   d6362:	7823      	ldrb	r3, [r4, #0]
   d6364:	1c5a      	adds	r2, r3, #1
   d6366:	54f8      	strb	r0, [r7, r3]
   d6368:	7022      	strb	r2, [r4, #0]
   d636a:	2500      	movs	r5, #0

    // Then require the player to repeat the sequence.
    for (byte currentMove = 0; currentMove < gameRound; currentMove++)
   d636c:	7823      	ldrb	r3, [r4, #0]
   d636e:	b2ee      	uxtb	r6, r5
   d6370:	42b3      	cmp	r3, r6
   d6372:	d909      	bls.n	d6388 <_Z11play_battlev+0x38>
    {
      byte choice = wait_for_button();
   d6374:	f7ff ffce 	bl	d6314 <_Z15wait_for_buttonv>

      if (choice == 0)
   d6378:	b150      	cbz	r0, d6390 <_Z11play_battlev+0x40>
        return false; // If wait timed out, player loses.

      if (choice != gameBoard[currentMove])
   d637a:	f818 3006 	ldrb.w	r3, [r8, r6]
   d637e:	4298      	cmp	r0, r3
   d6380:	f105 0501 	add.w	r5, r5, #1
   d6384:	d0f2      	beq.n	d636c <_Z11play_battlev+0x1c>
   d6386:	e003      	b.n	d6390 <_Z11play_battlev+0x40>
        return false; // If the choice is incorect, player loses.
    }

    delay(100); // Give the user an extra 100ms to hand the game to the other player
   d6388:	2064      	movs	r0, #100	; 0x64
   d638a:	f003 f9c9 	bl	d9720 <delay>
// This function returns when someone loses
boolean play_battle(void)
{
  gameRound = 0; // Reset the game frame back to one frame

  while (1) // Loop until someone fails
   d638e:	e7e6      	b.n	d635e <_Z11play_battlev+0xe>

    delay(100); // Give the user an extra 100ms to hand the game to the other player
  }

  return true; // We should never get here
}
   d6390:	2000      	movs	r0, #0
   d6392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6396:	bf00      	nop
   d6398:	2003e2be 	.word	0x2003e2be
   d639c:	2003e29e 	.word	0x2003e29e

000d63a0 <_Z11play_winnerv>:
  return CHOICE_NONE; // If we get here, we've timed out!
}

// Play the winner sound and lights
void play_winner(void)
{
   d63a0:	b508      	push	{r3, lr}
  playStartup(BUZZER_PIN, false);
   d63a2:	2100      	movs	r1, #0
   d63a4:	2008      	movs	r0, #8
   d63a6:	f000 febb 	bl	d7120 <_Z11playStartupib>

  setLEDs(CHOICE_GREEN | CHOICE_BLUE);
   d63aa:	2006      	movs	r0, #6
   d63ac:	f000 fc66 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_RED | CHOICE_YELLOW);
   d63b0:	2009      	movs	r0, #9
   d63b2:	f000 fc63 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_GREEN | CHOICE_BLUE);
   d63b6:	2006      	movs	r0, #6
   d63b8:	f000 fc60 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_RED | CHOICE_YELLOW);
   d63bc:	2009      	movs	r0, #9
}
   d63be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  playStartup(BUZZER_PIN, false);

  setLEDs(CHOICE_GREEN | CHOICE_BLUE);
  setLEDs(CHOICE_RED | CHOICE_YELLOW);
  setLEDs(CHOICE_GREEN | CHOICE_BLUE);
  setLEDs(CHOICE_RED | CHOICE_YELLOW);
   d63c2:	f000 bc5b 	b.w	d6c7c <_Z7setLEDsh>
	...

000d63c8 <_Z13configureGamev>:
    playGame();
  }
}

void configureGame()
{
   d63c8:	b570      	push	{r4, r5, r6, lr}
  if (!gameConfigured)
   d63ca:	4b10      	ldr	r3, [pc, #64]	; (d640c <_Z13configureGamev+0x44>)
   d63cc:	781a      	ldrb	r2, [r3, #0]
   d63ce:	461c      	mov	r4, r3
   d63d0:	b9da      	cbnz	r2, d640a <_Z13configureGamev+0x42>
  {
    //Setup hardware inputs/outputs. These pins are defined in the hardware_versions header file

    //Mode checking
    gameMode = MODE_MEMORY; // By default, we're going to play the memory game
   d63d2:	4e0f      	ldr	r6, [pc, #60]	; (d6410 <_Z13configureGamev+0x48>)
   d63d4:	7032      	strb	r2, [r6, #0]

    // Check to see if upper right button is pressed
    if (checkButton() == CHOICE_GREEN)
   d63d6:	f000 f969 	bl	d66ac <_Z11checkButtonv>
   d63da:	2802      	cmp	r0, #2
   d63dc:	4605      	mov	r5, r0
   d63de:	d004      	beq.n	d63ea <_Z13configureGamev+0x22>
        ; // Wait for user to stop pressing button

      //Now do nothing. Battle mode will be serviced in the main routine
    }

    play_winner(); // After setup is complete, say hello to the world
   d63e0:	f7ff ffde 	bl	d63a0 <_Z11play_winnerv>

    gameConfigured = true;
   d63e4:	2301      	movs	r3, #1
   d63e6:	7023      	strb	r3, [r4, #0]
   d63e8:	bd70      	pop	{r4, r5, r6, pc}
    gameMode = MODE_MEMORY; // By default, we're going to play the memory game

    // Check to see if upper right button is pressed
    if (checkButton() == CHOICE_GREEN)
    {
      gameMode = MODE_BATTLE; //Put game into battle mode
   d63ea:	2301      	movs	r3, #1
   d63ec:	7033      	strb	r3, [r6, #0]

      //Turn on the upper right (green) LED
      setLEDs(CHOICE_GREEN);
   d63ee:	f000 fc45 	bl	d6c7c <_Z7setLEDsh>
      toner(CHOICE_GREEN, 150);
   d63f2:	4628      	mov	r0, r5
   d63f4:	2196      	movs	r1, #150	; 0x96
   d63f6:	f000 fc67 	bl	d6cc8 <_Z5tonerhi>

      setLEDs(CHOICE_RED | CHOICE_BLUE | CHOICE_YELLOW); // Turn on the other LEDs until you release button
   d63fa:	200d      	movs	r0, #13
   d63fc:	f000 fc3e 	bl	d6c7c <_Z7setLEDsh>

      while (checkButton() != CHOICE_NONE)
   d6400:	f000 f954 	bl	d66ac <_Z11checkButtonv>
   d6404:	2800      	cmp	r0, #0
   d6406:	d1fb      	bne.n	d6400 <_Z13configureGamev+0x38>
   d6408:	e7ea      	b.n	d63e0 <_Z13configureGamev+0x18>
   d640a:	bd70      	pop	{r4, r5, r6, pc}
   d640c:	2003e29d 	.word	0x2003e29d
   d6410:	2003e29c 	.word	0x2003e29c

000d6414 <_Z10play_loserv>:
  setLEDs(CHOICE_RED | CHOICE_YELLOW);
}

// Play the loser sound/lights
void play_loser(void)
{
   d6414:	b508      	push	{r3, lr}
  playGameOver(BUZZER_PIN, false);
   d6416:	2100      	movs	r1, #0
   d6418:	2008      	movs	r0, #8
   d641a:	f000 fe87 	bl	d712c <_Z12playGameOverib>

  setLEDs(CHOICE_RED | CHOICE_GREEN);
   d641e:	2003      	movs	r0, #3
   d6420:	f000 fc2c 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
   d6424:	200c      	movs	r0, #12
   d6426:	f000 fc29 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_RED | CHOICE_GREEN);
   d642a:	2003      	movs	r0, #3
   d642c:	f000 fc26 	bl	d6c7c <_Z7setLEDsh>
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
   d6430:	200c      	movs	r0, #12
}
   d6432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  playGameOver(BUZZER_PIN, false);

  setLEDs(CHOICE_RED | CHOICE_GREEN);
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
  setLEDs(CHOICE_RED | CHOICE_GREEN);
  setLEDs(CHOICE_BLUE | CHOICE_YELLOW);
   d6436:	f000 bc21 	b.w	d6c7c <_Z7setLEDsh>

000d643a <_Z11attractModev>:
}

// Show an "attract mode" display while waiting for user to press button.
void attractMode(void)
{
   d643a:	b508      	push	{r3, lr}
  while (1)
  {
    setLEDs(CHOICE_RED);
   d643c:	2001      	movs	r0, #1
   d643e:	f000 fc1d 	bl	d6c7c <_Z7setLEDsh>
    delay(100);
   d6442:	2064      	movs	r0, #100	; 0x64
   d6444:	f003 f96c 	bl	d9720 <delay>
    if (checkButton() != CHOICE_NONE)
   d6448:	f000 f930 	bl	d66ac <_Z11checkButtonv>
   d644c:	b9d8      	cbnz	r0, d6486 <_Z11attractModev+0x4c>
      return;

    setLEDs(CHOICE_BLUE);
   d644e:	2004      	movs	r0, #4
   d6450:	f000 fc14 	bl	d6c7c <_Z7setLEDsh>
    delay(100);
   d6454:	2064      	movs	r0, #100	; 0x64
   d6456:	f003 f963 	bl	d9720 <delay>
    if (checkButton() != CHOICE_NONE)
   d645a:	f000 f927 	bl	d66ac <_Z11checkButtonv>
   d645e:	b990      	cbnz	r0, d6486 <_Z11attractModev+0x4c>
      return;

    setLEDs(CHOICE_GREEN);
   d6460:	2002      	movs	r0, #2
   d6462:	f000 fc0b 	bl	d6c7c <_Z7setLEDsh>
    delay(100);
   d6466:	2064      	movs	r0, #100	; 0x64
   d6468:	f003 f95a 	bl	d9720 <delay>
    if (checkButton() != CHOICE_NONE)
   d646c:	f000 f91e 	bl	d66ac <_Z11checkButtonv>
   d6470:	b948      	cbnz	r0, d6486 <_Z11attractModev+0x4c>
      return;

    setLEDs(CHOICE_YELLOW);
   d6472:	2008      	movs	r0, #8
   d6474:	f000 fc02 	bl	d6c7c <_Z7setLEDsh>
    delay(100);
   d6478:	2064      	movs	r0, #100	; 0x64
   d647a:	f003 f951 	bl	d9720 <delay>
    if (checkButton() != CHOICE_NONE)
   d647e:	f000 f915 	bl	d66ac <_Z11checkButtonv>
   d6482:	2800      	cmp	r0, #0
   d6484:	d0da      	beq.n	d643c <_Z11attractModev+0x2>
   d6486:	bd08      	pop	{r3, pc}

000d6488 <_Z11play_memoryv>:
//The following functions are related to game play only

// Play the regular memory game
// Returns 0 if player loses, or 1 if player wins
boolean play_memory(void)
{
   d6488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d648a:	f002 fe41 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  randomSeed(millis()); // Seed the random generator with random amount of millis()

  gameRound = 0; // Reset the game to the beginning
   d648e:	4c28      	ldr	r4, [pc, #160]	; (d6530 <_Z11play_memoryv+0xa8>)
      byte choice = wait_for_button(); // See what button the user presses

      if (choice == 0)
        return false; // If wait timed out, player loses

      if (choice != gameBoard[currentMove])
   d6490:	4f28      	ldr	r7, [pc, #160]	; (d6534 <_Z11play_memoryv+0xac>)

// Play the regular memory game
// Returns 0 if player loses, or 1 if player wins
boolean play_memory(void)
{
  randomSeed(millis()); // Seed the random generator with random amount of millis()
   d6492:	f004 f80e 	bl	da4b2 <_Z10randomSeedj>

  gameRound = 0; // Reset the game to the beginning
   d6496:	2300      	movs	r3, #0
   d6498:	7023      	strb	r3, [r4, #0]

  while (gameRound < ROUNDS_TO_WIN)
   d649a:	7823      	ldrb	r3, [r4, #0]
   d649c:	2b0c      	cmp	r3, #12
   d649e:	d844      	bhi.n	d652a <_Z11play_memoryv+0xa2>
  {
    int lenModifier = gameRound < 10 ? 1 : 18;
   d64a0:	2b0a      	cmp	r3, #10
   d64a2:	bf34      	ite	cc
   d64a4:	2501      	movcc	r5, #1
   d64a6:	2512      	movcs	r5, #18
    int x = 55 - (lenModifier);

    clearScreen();
   d64a8:	f7fe ffbe 	bl	d5428 <_Z11clearScreenv>
    display.setTextSize(1);
   d64ac:	2101      	movs	r1, #1
   d64ae:	4822      	ldr	r0, [pc, #136]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64b0:	f001 fe96 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setCursor(64 - strlen(score) * 3, 5);
   d64b4:	2205      	movs	r2, #5
   d64b6:	2119      	movs	r1, #25
   d64b8:	481f      	ldr	r0, [pc, #124]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64ba:	f001 fe8e 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
    display.println(score);
   d64be:	491f      	ldr	r1, [pc, #124]	; (d653c <_Z11play_memoryv+0xb4>)
   d64c0:	481d      	ldr	r0, [pc, #116]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64c2:	f003 ff40 	bl	da346 <_ZN5Print7printlnEPKc>
    display.drawFastHLine(0, 14, 128, WHITE);
   d64c6:	2301      	movs	r3, #1
   d64c8:	220e      	movs	r2, #14
   d64ca:	9300      	str	r3, [sp, #0]
   d64cc:	2100      	movs	r1, #0
   d64ce:	2380      	movs	r3, #128	; 0x80
   d64d0:	4819      	ldr	r0, [pc, #100]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64d2:	f001 fe97 	bl	d8204 <_ZN16Adafruit_SSD130613drawFastHLineEssst>

    display.setTextSize(4);
   d64d6:	2104      	movs	r1, #4
   d64d8:	4817      	ldr	r0, [pc, #92]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64da:	f001 fe81 	bl	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setCursor(x, 25);
   d64de:	f1c5 0137 	rsb	r1, r5, #55	; 0x37
   d64e2:	2219      	movs	r2, #25
   d64e4:	4814      	ldr	r0, [pc, #80]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64e6:	f001 fe78 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
    display.println(gameRound);
   d64ea:	220a      	movs	r2, #10
   d64ec:	7821      	ldrb	r1, [r4, #0]
   d64ee:	4812      	ldr	r0, [pc, #72]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64f0:	f003 ff62 	bl	da3b8 <_ZN5Print7printlnEhi>
    display.display();
   d64f4:	4810      	ldr	r0, [pc, #64]	; (d6538 <_Z11play_memoryv+0xb0>)
   d64f6:	f002 fa2d 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>

    add_to_moves(); // Add a button to the current moves, then play them back
   d64fa:	f7ff feeb 	bl	d62d4 <_Z12add_to_movesv>

    playMoves(); // Play back the current game board
   d64fe:	f7ff fed1 	bl	d62a4 <_Z9playMovesv>
   d6502:	2500      	movs	r5, #0

    // Then require the player to repeat the sequence.
    for (byte currentMove = 0; currentMove < gameRound; currentMove++)
   d6504:	7823      	ldrb	r3, [r4, #0]
   d6506:	b2ee      	uxtb	r6, r5
   d6508:	42b3      	cmp	r3, r6
   d650a:	d909      	bls.n	d6520 <_Z11play_memoryv+0x98>
    {
      byte choice = wait_for_button(); // See what button the user presses
   d650c:	f7ff ff02 	bl	d6314 <_Z15wait_for_buttonv>

      if (choice == 0)
   d6510:	b160      	cbz	r0, d652c <_Z11play_memoryv+0xa4>
        return false; // If wait timed out, player loses

      if (choice != gameBoard[currentMove])
   d6512:	5dbb      	ldrb	r3, [r7, r6]
   d6514:	4298      	cmp	r0, r3
   d6516:	f105 0501 	add.w	r5, r5, #1
   d651a:	d0f3      	beq.n	d6504 <_Z11play_memoryv+0x7c>
    for (byte currentMove = 0; currentMove < gameRound; currentMove++)
    {
      byte choice = wait_for_button(); // See what button the user presses

      if (choice == 0)
        return false; // If wait timed out, player loses
   d651c:	2000      	movs	r0, #0
   d651e:	e005      	b.n	d652c <_Z11play_memoryv+0xa4>

      if (choice != gameBoard[currentMove])
        return false; // If the choice is incorect, player loses
    }

    delay(1000); // Player was correct, delay before playing moves
   d6520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6524:	f003 f8fc 	bl	d9720 <delay>
{
  randomSeed(millis()); // Seed the random generator with random amount of millis()

  gameRound = 0; // Reset the game to the beginning

  while (gameRound < ROUNDS_TO_WIN)
   d6528:	e7b7      	b.n	d649a <_Z11play_memoryv+0x12>
    }

    delay(1000); // Player was correct, delay before playing moves
  }

  return true; // Player made it through all the rounds to win!
   d652a:	2001      	movs	r0, #1
}
   d652c:	b003      	add	sp, #12
   d652e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6530:	2003e2be 	.word	0x2003e2be
   d6534:	2003e29e 	.word	0x2003e29e
   d6538:	2003e1c8 	.word	0x2003e1c8
   d653c:	000ddb32 	.word	0x000ddb32

000d6540 <_Z8playGamev>:
    gameConfigured = true;
  }
}

void playGame()
{
   d6540:	b510      	push	{r4, lr}
  attractMode(); // Blink lights while waiting for user to press a button
   d6542:	f7ff ff7a 	bl	d643a <_Z11attractModev>

  // Indicate the start of game play
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE | CHOICE_YELLOW); // Turn all LEDs on
   d6546:	200f      	movs	r0, #15
   d6548:	f000 fb98 	bl	d6c7c <_Z7setLEDsh>
  delay(1000);
   d654c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6550:	f003 f8e6 	bl	d9720 <delay>
  setLEDs(CHOICE_OFF); // Turn off LEDs
   d6554:	2000      	movs	r0, #0
   d6556:	f000 fb91 	bl	d6c7c <_Z7setLEDsh>
  delay(250);
   d655a:	20fa      	movs	r0, #250	; 0xfa
   d655c:	f003 f8e0 	bl	d9720 <delay>

  if (gameMode == MODE_MEMORY)
   d6560:	4b0a      	ldr	r3, [pc, #40]	; (d658c <_Z8playGamev+0x4c>)
   d6562:	781a      	ldrb	r2, [r3, #0]
   d6564:	461c      	mov	r4, r3
   d6566:	b93a      	cbnz	r2, d6578 <_Z8playGamev+0x38>
  {
    // Play memory game and handle result
    if (play_memory() == true)
   d6568:	f7ff ff8e 	bl	d6488 <_Z11play_memoryv>
   d656c:	b110      	cbz	r0, d6574 <_Z8playGamev+0x34>
      play_winner(); // Player won, play winner tones
   d656e:	f7ff ff17 	bl	d63a0 <_Z11play_winnerv>
   d6572:	e001      	b.n	d6578 <_Z8playGamev+0x38>
    else
      play_loser(); // Player lost, play loser tones
   d6574:	f7ff ff4e 	bl	d6414 <_Z10play_loserv>
  }

  if (gameMode == MODE_BATTLE)
   d6578:	7823      	ldrb	r3, [r4, #0]
   d657a:	2b01      	cmp	r3, #1
   d657c:	d105      	bne.n	d658a <_Z8playGamev+0x4a>
  {
    play_battle(); // Play game until someone loses
   d657e:	f7ff fee7 	bl	d6350 <_Z11play_battlev>

    play_loser(); // Player lost, play loser tones
  }
}
   d6582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  if (gameMode == MODE_BATTLE)
  {
    play_battle(); // Play game until someone loses

    play_loser(); // Player lost, play loser tones
   d6586:	f7ff bf45 	b.w	d6414 <_Z10play_loserv>
   d658a:	bd10      	pop	{r4, pc}
   d658c:	2003e29c 	.word	0x2003e29c

000d6590 <_Z9initSimonv>:
void play_loser(void);
void attractMode(void);
void playMoves(void);

void initSimon()
{
   d6590:	b510      	push	{r4, lr}
  appmode = 1;
   d6592:	4c08      	ldr	r4, [pc, #32]	; (d65b4 <_Z9initSimonv+0x24>)
   d6594:	2301      	movs	r3, #1
   d6596:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d6598:	4b07      	ldr	r3, [pc, #28]	; (d65b8 <_Z9initSimonv+0x28>)
   d659a:	2200      	movs	r2, #0
   d659c:	701a      	strb	r2, [r3, #0]

  configureGame();
   d659e:	f7ff ff13 	bl	d63c8 <_Z13configureGamev>
  setupBackButtonInterrupt();
   d65a2:	f000 fa83 	bl	d6aac <_Z24setupBackButtonInterruptv>

  while (appmode)
   d65a6:	7823      	ldrb	r3, [r4, #0]
   d65a8:	b113      	cbz	r3, d65b0 <_Z9initSimonv+0x20>
  {
    playGame();
   d65aa:	f7ff ffc9 	bl	d6540 <_Z8playGamev>
  btnid = 0;

  configureGame();
  setupBackButtonInterrupt();

  while (appmode)
   d65ae:	e7fa      	b.n	d65a6 <_Z9initSimonv+0x16>
   d65b0:	bd10      	pop	{r4, pc}
   d65b2:	bf00      	nop
   d65b4:	2003e1f6 	.word	0x2003e1f6
   d65b8:	2003e208 	.word	0x2003e208

000d65bc <_Z19initInputDebouncersv>:
Debounce joystickRightDebouncer = Debounce();
Debounce joystickCenterDebouncer = Debounce();

// Init debouncers for all of our inputs
void initInputDebouncers()
{
   d65bc:	b510      	push	{r4, lr}
  pinMode(MOSI, INPUT);
   d65be:	2100      	movs	r1, #0
  pinMode(SCK, INPUT);

  // Init Buttons as Inputs
  redButtonADebouncer.attach(RED_BUTTON_A, INPUT_PULLUP);
   d65c0:	4c31      	ldr	r4, [pc, #196]	; (d6688 <_Z19initInputDebouncersv+0xcc>)
Debounce joystickCenterDebouncer = Debounce();

// Init debouncers for all of our inputs
void initInputDebouncers()
{
  pinMode(MOSI, INPUT);
   d65c2:	200c      	movs	r0, #12
   d65c4:	f004 ff1e 	bl	db404 <pinMode>
  pinMode(SCK, INPUT);
   d65c8:	2100      	movs	r1, #0
   d65ca:	200d      	movs	r0, #13
   d65cc:	f004 ff1a 	bl	db404 <pinMode>

  // Init Buttons as Inputs
  redButtonADebouncer.attach(RED_BUTTON_A, INPUT_PULLUP);
   d65d0:	2202      	movs	r2, #2
   d65d2:	4620      	mov	r0, r4
   d65d4:	210c      	movs	r1, #12
   d65d6:	f002 fbfe 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  redButtonADebouncer.interval(DEBOUNCE_INTERVAL);
   d65da:	4620      	mov	r0, r4
  blueButtonBDebouncer.attach(BLUE_BUTTON_B, INPUT_PULLUP);
   d65dc:	4c2b      	ldr	r4, [pc, #172]	; (d668c <_Z19initInputDebouncersv+0xd0>)
  pinMode(MOSI, INPUT);
  pinMode(SCK, INPUT);

  // Init Buttons as Inputs
  redButtonADebouncer.attach(RED_BUTTON_A, INPUT_PULLUP);
  redButtonADebouncer.interval(DEBOUNCE_INTERVAL);
   d65de:	2132      	movs	r1, #50	; 0x32
   d65e0:	f002 fc06 	bl	d8df0 <_ZN8Debounce8intervalEt>
  blueButtonBDebouncer.attach(BLUE_BUTTON_B, INPUT_PULLUP);
   d65e4:	2202      	movs	r2, #2
   d65e6:	4620      	mov	r0, r4
   d65e8:	210e      	movs	r1, #14
   d65ea:	f002 fbf4 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  blueButtonBDebouncer.interval(DEBOUNCE_INTERVAL);
   d65ee:	4620      	mov	r0, r4
  greenButtonCDebouncer.attach(GREEN_BUTTON_C, INPUT_PULLUP);
   d65f0:	4c27      	ldr	r4, [pc, #156]	; (d6690 <_Z19initInputDebouncersv+0xd4>)

  // Init Buttons as Inputs
  redButtonADebouncer.attach(RED_BUTTON_A, INPUT_PULLUP);
  redButtonADebouncer.interval(DEBOUNCE_INTERVAL);
  blueButtonBDebouncer.attach(BLUE_BUTTON_B, INPUT_PULLUP);
  blueButtonBDebouncer.interval(DEBOUNCE_INTERVAL);
   d65f2:	2132      	movs	r1, #50	; 0x32
   d65f4:	f002 fbfc 	bl	d8df0 <_ZN8Debounce8intervalEt>
  greenButtonCDebouncer.attach(GREEN_BUTTON_C, INPUT_PULLUP);
   d65f8:	2202      	movs	r2, #2
   d65fa:	4620      	mov	r0, r4
   d65fc:	210d      	movs	r1, #13
   d65fe:	f002 fbea 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  greenButtonCDebouncer.interval(DEBOUNCE_INTERVAL);
   d6602:	4620      	mov	r0, r4
  yellowButtonDDebouncer.attach(YELLOW_BUTTON_D, INPUT_PULLUP);
   d6604:	4c23      	ldr	r4, [pc, #140]	; (d6694 <_Z19initInputDebouncersv+0xd8>)
  redButtonADebouncer.attach(RED_BUTTON_A, INPUT_PULLUP);
  redButtonADebouncer.interval(DEBOUNCE_INTERVAL);
  blueButtonBDebouncer.attach(BLUE_BUTTON_B, INPUT_PULLUP);
  blueButtonBDebouncer.interval(DEBOUNCE_INTERVAL);
  greenButtonCDebouncer.attach(GREEN_BUTTON_C, INPUT_PULLUP);
  greenButtonCDebouncer.interval(DEBOUNCE_INTERVAL);
   d6606:	2132      	movs	r1, #50	; 0x32
   d6608:	f002 fbf2 	bl	d8df0 <_ZN8Debounce8intervalEt>
  yellowButtonDDebouncer.attach(YELLOW_BUTTON_D, INPUT_PULLUP);
   d660c:	2202      	movs	r2, #2
   d660e:	4620      	mov	r0, r4
   d6610:	210f      	movs	r1, #15
   d6612:	f002 fbe0 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  yellowButtonDDebouncer.interval(DEBOUNCE_INTERVAL);
   d6616:	4620      	mov	r0, r4

  // Joystick buttons as Inputs
  joystickUpDebouncer.attach(JOYSTICK_UP, INPUT_PULLUP);
   d6618:	4c1f      	ldr	r4, [pc, #124]	; (d6698 <_Z19initInputDebouncersv+0xdc>)
  blueButtonBDebouncer.attach(BLUE_BUTTON_B, INPUT_PULLUP);
  blueButtonBDebouncer.interval(DEBOUNCE_INTERVAL);
  greenButtonCDebouncer.attach(GREEN_BUTTON_C, INPUT_PULLUP);
  greenButtonCDebouncer.interval(DEBOUNCE_INTERVAL);
  yellowButtonDDebouncer.attach(YELLOW_BUTTON_D, INPUT_PULLUP);
  yellowButtonDDebouncer.interval(DEBOUNCE_INTERVAL);
   d661a:	2132      	movs	r1, #50	; 0x32
   d661c:	f002 fbe8 	bl	d8df0 <_ZN8Debounce8intervalEt>

  // Joystick buttons as Inputs
  joystickUpDebouncer.attach(JOYSTICK_UP, INPUT_PULLUP);
   d6620:	2202      	movs	r2, #2
   d6622:	4620      	mov	r0, r4
   d6624:	2106      	movs	r1, #6
   d6626:	f002 fbd6 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  joystickUpDebouncer.interval(DEBOUNCE_INTERVAL);
   d662a:	4620      	mov	r0, r4
  joystickDownDebouncer.attach(JOYSTICK_DOWN, INPUT_PULLUP);
   d662c:	4c1b      	ldr	r4, [pc, #108]	; (d669c <_Z19initInputDebouncersv+0xe0>)
  yellowButtonDDebouncer.attach(YELLOW_BUTTON_D, INPUT_PULLUP);
  yellowButtonDDebouncer.interval(DEBOUNCE_INTERVAL);

  // Joystick buttons as Inputs
  joystickUpDebouncer.attach(JOYSTICK_UP, INPUT_PULLUP);
  joystickUpDebouncer.interval(DEBOUNCE_INTERVAL);
   d662e:	2132      	movs	r1, #50	; 0x32
   d6630:	f002 fbde 	bl	d8df0 <_ZN8Debounce8intervalEt>
  joystickDownDebouncer.attach(JOYSTICK_DOWN, INPUT_PULLUP);
   d6634:	2202      	movs	r2, #2
   d6636:	4620      	mov	r0, r4
   d6638:	2105      	movs	r1, #5
   d663a:	f002 fbcc 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  joystickDownDebouncer.interval(DEBOUNCE_INTERVAL);
   d663e:	4620      	mov	r0, r4
  joystickLeftDebouncer.attach(JOYSTICK_LEFT, INPUT_PULLUP);
   d6640:	4c17      	ldr	r4, [pc, #92]	; (d66a0 <_Z19initInputDebouncersv+0xe4>)

  // Joystick buttons as Inputs
  joystickUpDebouncer.attach(JOYSTICK_UP, INPUT_PULLUP);
  joystickUpDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickDownDebouncer.attach(JOYSTICK_DOWN, INPUT_PULLUP);
  joystickDownDebouncer.interval(DEBOUNCE_INTERVAL);
   d6642:	2132      	movs	r1, #50	; 0x32
   d6644:	f002 fbd4 	bl	d8df0 <_ZN8Debounce8intervalEt>
  joystickLeftDebouncer.attach(JOYSTICK_LEFT, INPUT_PULLUP);
   d6648:	2202      	movs	r2, #2
   d664a:	4620      	mov	r0, r4
   d664c:	2104      	movs	r1, #4
   d664e:	f002 fbc2 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  joystickLeftDebouncer.interval(DEBOUNCE_INTERVAL);
   d6652:	4620      	mov	r0, r4
  joystickRightDebouncer.attach(JOYSTICK_RIGHT, INPUT_PULLUP);
   d6654:	4c13      	ldr	r4, [pc, #76]	; (d66a4 <_Z19initInputDebouncersv+0xe8>)
  joystickUpDebouncer.attach(JOYSTICK_UP, INPUT_PULLUP);
  joystickUpDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickDownDebouncer.attach(JOYSTICK_DOWN, INPUT_PULLUP);
  joystickDownDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickLeftDebouncer.attach(JOYSTICK_LEFT, INPUT_PULLUP);
  joystickLeftDebouncer.interval(DEBOUNCE_INTERVAL);
   d6656:	2132      	movs	r1, #50	; 0x32
   d6658:	f002 fbca 	bl	d8df0 <_ZN8Debounce8intervalEt>
  joystickRightDebouncer.attach(JOYSTICK_RIGHT, INPUT_PULLUP);
   d665c:	2202      	movs	r2, #2
   d665e:	4620      	mov	r0, r4
   d6660:	2103      	movs	r1, #3
   d6662:	f002 fbb8 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  joystickRightDebouncer.interval(DEBOUNCE_INTERVAL);
   d6666:	4620      	mov	r0, r4
   d6668:	2132      	movs	r1, #50	; 0x32
  joystickCenterDebouncer.attach(JOYSTICK_CENTER, INPUT_PULLUP);
   d666a:	4c0f      	ldr	r4, [pc, #60]	; (d66a8 <_Z19initInputDebouncersv+0xec>)
  joystickDownDebouncer.attach(JOYSTICK_DOWN, INPUT_PULLUP);
  joystickDownDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickLeftDebouncer.attach(JOYSTICK_LEFT, INPUT_PULLUP);
  joystickLeftDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickRightDebouncer.attach(JOYSTICK_RIGHT, INPUT_PULLUP);
  joystickRightDebouncer.interval(DEBOUNCE_INTERVAL);
   d666c:	f002 fbc0 	bl	d8df0 <_ZN8Debounce8intervalEt>
  joystickCenterDebouncer.attach(JOYSTICK_CENTER, INPUT_PULLUP);
   d6670:	2202      	movs	r2, #2
   d6672:	4620      	mov	r0, r4
   d6674:	4611      	mov	r1, r2
   d6676:	f002 fbae 	bl	d8dd6 <_ZN8Debounce6attachEi7PinMode>
  joystickCenterDebouncer.interval(DEBOUNCE_INTERVAL);
   d667a:	4620      	mov	r0, r4
   d667c:	2132      	movs	r1, #50	; 0x32
}
   d667e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  joystickLeftDebouncer.attach(JOYSTICK_LEFT, INPUT_PULLUP);
  joystickLeftDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickRightDebouncer.attach(JOYSTICK_RIGHT, INPUT_PULLUP);
  joystickRightDebouncer.interval(DEBOUNCE_INTERVAL);
  joystickCenterDebouncer.attach(JOYSTICK_CENTER, INPUT_PULLUP);
  joystickCenterDebouncer.interval(DEBOUNCE_INTERVAL);
   d6682:	f002 bbb5 	b.w	d8df0 <_ZN8Debounce8intervalEt>
   d6686:	bf00      	nop
   d6688:	2003e2e0 	.word	0x2003e2e0
   d668c:	2003e2f8 	.word	0x2003e2f8
   d6690:	2003e2d0 	.word	0x2003e2d0
   d6694:	2003e2d8 	.word	0x2003e2d8
   d6698:	2003e2e8 	.word	0x2003e2e8
   d669c:	2003e2f0 	.word	0x2003e2f0
   d66a0:	2003e300 	.word	0x2003e300
   d66a4:	2003e2c0 	.word	0x2003e2c0
   d66a8:	2003e2c8 	.word	0x2003e2c8

000d66ac <_Z11checkButtonv>:
}

// Returns a '1' bit in the position corresponding to CHOICE_RED, CHOICE_GREEN, etc.
byte checkButton(void)
{
   d66ac:	b508      	push	{r3, lr}
  if (digitalRead(RED_BUTTON_A) == 0)
   d66ae:	200c      	movs	r0, #12
   d66b0:	f004 fed2 	bl	db458 <digitalRead>
   d66b4:	b178      	cbz	r0, d66d6 <_Z11checkButtonv+0x2a>
    return (CHOICE_RED);
  else if (digitalRead(GREEN_BUTTON_C) == 0)
   d66b6:	200d      	movs	r0, #13
   d66b8:	f004 fece 	bl	db458 <digitalRead>
   d66bc:	b168      	cbz	r0, d66da <_Z11checkButtonv+0x2e>
    return (CHOICE_GREEN);
  else if (digitalRead(BLUE_BUTTON_B) == 0)
   d66be:	200e      	movs	r0, #14
   d66c0:	f004 feca 	bl	db458 <digitalRead>
   d66c4:	b158      	cbz	r0, d66de <_Z11checkButtonv+0x32>
    return (CHOICE_BLUE);
  else if (digitalRead(YELLOW_BUTTON_D) == 0)
   d66c6:	200f      	movs	r0, #15
   d66c8:	f004 fec6 	bl	db458 <digitalRead>
   d66cc:	2800      	cmp	r0, #0
    return (CHOICE_YELLOW);

  return (CHOICE_NONE); // If no button is pressed, return none
   d66ce:	bf0c      	ite	eq
   d66d0:	2008      	moveq	r0, #8
   d66d2:	2000      	movne	r0, #0
   d66d4:	bd08      	pop	{r3, pc}

// Returns a '1' bit in the position corresponding to CHOICE_RED, CHOICE_GREEN, etc.
byte checkButton(void)
{
  if (digitalRead(RED_BUTTON_A) == 0)
    return (CHOICE_RED);
   d66d6:	2001      	movs	r0, #1
   d66d8:	bd08      	pop	{r3, pc}
  else if (digitalRead(GREEN_BUTTON_C) == 0)
    return (CHOICE_GREEN);
   d66da:	2002      	movs	r0, #2
   d66dc:	bd08      	pop	{r3, pc}
  else if (digitalRead(BLUE_BUTTON_B) == 0)
    return (CHOICE_BLUE);
   d66de:	2004      	movs	r0, #4
  else if (digitalRead(YELLOW_BUTTON_D) == 0)
    return (CHOICE_YELLOW);

  return (CHOICE_NONE); // If no button is pressed, return none
   d66e0:	bd08      	pop	{r3, pc}
	...

000d66e4 <_GLOBAL__sub_I_redButtonADebouncer>:
   d66e4:	b508      	push	{r3, lr}
#include "macros.h"
#include "leds/leds.h"
#include "inputs.h"

// Button Debounce Support
Debounce redButtonADebouncer = Debounce();
   d66e6:	480e      	ldr	r0, [pc, #56]	; (d6720 <_GLOBAL__sub_I_redButtonADebouncer+0x3c>)
   d66e8:	f002 fb5f 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce blueButtonBDebouncer = Debounce();
   d66ec:	480d      	ldr	r0, [pc, #52]	; (d6724 <_GLOBAL__sub_I_redButtonADebouncer+0x40>)
   d66ee:	f002 fb5c 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce greenButtonCDebouncer = Debounce();
   d66f2:	480d      	ldr	r0, [pc, #52]	; (d6728 <_GLOBAL__sub_I_redButtonADebouncer+0x44>)
   d66f4:	f002 fb59 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce yellowButtonDDebouncer = Debounce();
   d66f8:	480c      	ldr	r0, [pc, #48]	; (d672c <_GLOBAL__sub_I_redButtonADebouncer+0x48>)
   d66fa:	f002 fb56 	bl	d8daa <_ZN8DebounceC1Ev>

// Debouncers for 5-way tactile switch
Debounce joystickUpDebouncer = Debounce();
   d66fe:	480c      	ldr	r0, [pc, #48]	; (d6730 <_GLOBAL__sub_I_redButtonADebouncer+0x4c>)
   d6700:	f002 fb53 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce joystickDownDebouncer = Debounce();
   d6704:	480b      	ldr	r0, [pc, #44]	; (d6734 <_GLOBAL__sub_I_redButtonADebouncer+0x50>)
   d6706:	f002 fb50 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce joystickLeftDebouncer = Debounce();
   d670a:	480b      	ldr	r0, [pc, #44]	; (d6738 <_GLOBAL__sub_I_redButtonADebouncer+0x54>)
   d670c:	f002 fb4d 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce joystickRightDebouncer = Debounce();
   d6710:	480a      	ldr	r0, [pc, #40]	; (d673c <_GLOBAL__sub_I_redButtonADebouncer+0x58>)
   d6712:	f002 fb4a 	bl	d8daa <_ZN8DebounceC1Ev>
Debounce joystickCenterDebouncer = Debounce();
   d6716:	480a      	ldr	r0, [pc, #40]	; (d6740 <_GLOBAL__sub_I_redButtonADebouncer+0x5c>)
    return (CHOICE_BLUE);
  else if (digitalRead(YELLOW_BUTTON_D) == 0)
    return (CHOICE_YELLOW);

  return (CHOICE_NONE); // If no button is pressed, return none
   d6718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// Debouncers for 5-way tactile switch
Debounce joystickUpDebouncer = Debounce();
Debounce joystickDownDebouncer = Debounce();
Debounce joystickLeftDebouncer = Debounce();
Debounce joystickRightDebouncer = Debounce();
Debounce joystickCenterDebouncer = Debounce();
   d671c:	f002 bb45 	b.w	d8daa <_ZN8DebounceC1Ev>
   d6720:	2003e2e0 	.word	0x2003e2e0
   d6724:	2003e2f8 	.word	0x2003e2f8
   d6728:	2003e2d0 	.word	0x2003e2d0
   d672c:	2003e2d8 	.word	0x2003e2d8
   d6730:	2003e2e8 	.word	0x2003e2e8
   d6734:	2003e2f0 	.word	0x2003e2f0
   d6738:	2003e300 	.word	0x2003e300
   d673c:	2003e2c0 	.word	0x2003e2c0
   d6740:	2003e2c8 	.word	0x2003e2c8

000d6744 <_Z2UPv>:
extern byte appmode;
extern byte btncounter;
extern byte btnid;

void UP()
{
   d6744:	b510      	push	{r4, lr}
  if (menuShowing && (long)(micros() - last_micros) >= debouncing_time * 1000)
   d6746:	4b10      	ldr	r3, [pc, #64]	; (d6788 <_Z2UPv+0x44>)
   d6748:	781b      	ldrb	r3, [r3, #0]
   d674a:	b1db      	cbz	r3, d6784 <_Z2UPv+0x40>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d674c:	f002 fcd8 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
   d6750:	4b0e      	ldr	r3, [pc, #56]	; (d678c <_Z2UPv+0x48>)
   d6752:	681a      	ldr	r2, [r3, #0]
   d6754:	1a80      	subs	r0, r0, r2
   d6756:	4a0e      	ldr	r2, [pc, #56]	; (d6790 <_Z2UPv+0x4c>)
   d6758:	6811      	ldr	r1, [r2, #0]
   d675a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d675e:	434a      	muls	r2, r1
   d6760:	4290      	cmp	r0, r2
   d6762:	461c      	mov	r4, r3
   d6764:	da00      	bge.n	d6768 <_Z2UPv+0x24>
   d6766:	bd10      	pop	{r4, pc}
  {
    if (appmode)
   d6768:	4b0a      	ldr	r3, [pc, #40]	; (d6794 <_Z2UPv+0x50>)
   d676a:	781b      	ldrb	r3, [r3, #0]
   d676c:	b91b      	cbnz	r3, d6776 <_Z2UPv+0x32>
    {
    }
    else
    {
      btncounter++;
   d676e:	4a0a      	ldr	r2, [pc, #40]	; (d6798 <_Z2UPv+0x54>)
   d6770:	7813      	ldrb	r3, [r2, #0]
   d6772:	3301      	adds	r3, #1
   d6774:	7013      	strb	r3, [r2, #0]
    }
    btnid = 3;
   d6776:	4b09      	ldr	r3, [pc, #36]	; (d679c <_Z2UPv+0x58>)
   d6778:	2203      	movs	r2, #3
   d677a:	701a      	strb	r2, [r3, #0]
   d677c:	f002 fcc0 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
    last_micros = micros();
   d6780:	6020      	str	r0, [r4, #0]
  }
}
   d6782:	bd10      	pop	{r4, pc}
   d6784:	bd10      	pop	{r4, pc}
   d6786:	bf00      	nop
   d6788:	2003e10c 	.word	0x2003e10c
   d678c:	2003e308 	.word	0x2003e308
   d6790:	2003d840 	.word	0x2003d840
   d6794:	2003e1f6 	.word	0x2003e1f6
   d6798:	2003e1c0 	.word	0x2003e1c0
   d679c:	2003e208 	.word	0x2003e208

000d67a0 <_Z4DOWNv>:

void DOWN()
{
   d67a0:	b510      	push	{r4, lr}
  if (menuShowing && (long)(micros() - last_micros) >= debouncing_time * 1000)
   d67a2:	4b10      	ldr	r3, [pc, #64]	; (d67e4 <_Z4DOWNv+0x44>)
   d67a4:	781b      	ldrb	r3, [r3, #0]
   d67a6:	b1db      	cbz	r3, d67e0 <_Z4DOWNv+0x40>
   d67a8:	f002 fcaa 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
   d67ac:	4b0e      	ldr	r3, [pc, #56]	; (d67e8 <_Z4DOWNv+0x48>)
   d67ae:	681a      	ldr	r2, [r3, #0]
   d67b0:	1a80      	subs	r0, r0, r2
   d67b2:	4a0e      	ldr	r2, [pc, #56]	; (d67ec <_Z4DOWNv+0x4c>)
   d67b4:	6811      	ldr	r1, [r2, #0]
   d67b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d67ba:	434a      	muls	r2, r1
   d67bc:	4290      	cmp	r0, r2
   d67be:	461c      	mov	r4, r3
   d67c0:	da00      	bge.n	d67c4 <_Z4DOWNv+0x24>
   d67c2:	bd10      	pop	{r4, pc}
  {
    if (appmode)
   d67c4:	4b0a      	ldr	r3, [pc, #40]	; (d67f0 <_Z4DOWNv+0x50>)
   d67c6:	781b      	ldrb	r3, [r3, #0]
   d67c8:	b91b      	cbnz	r3, d67d2 <_Z4DOWNv+0x32>
    {
    }
    else
    {
      btncounter++;
   d67ca:	4a0a      	ldr	r2, [pc, #40]	; (d67f4 <_Z4DOWNv+0x54>)
   d67cc:	7813      	ldrb	r3, [r2, #0]
   d67ce:	3301      	adds	r3, #1
   d67d0:	7013      	strb	r3, [r2, #0]
    }
    btnid = 2;
   d67d2:	4b09      	ldr	r3, [pc, #36]	; (d67f8 <_Z4DOWNv+0x58>)
   d67d4:	2202      	movs	r2, #2
   d67d6:	701a      	strb	r2, [r3, #0]
   d67d8:	f002 fc92 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
    last_micros = micros();
   d67dc:	6020      	str	r0, [r4, #0]
  }
}
   d67de:	bd10      	pop	{r4, pc}
   d67e0:	bd10      	pop	{r4, pc}
   d67e2:	bf00      	nop
   d67e4:	2003e10c 	.word	0x2003e10c
   d67e8:	2003e308 	.word	0x2003e308
   d67ec:	2003d840 	.word	0x2003d840
   d67f0:	2003e1f6 	.word	0x2003e1f6
   d67f4:	2003e1c0 	.word	0x2003e1c0
   d67f8:	2003e208 	.word	0x2003e208

000d67fc <_Z5ENTERv>:

void ENTER()
{
   d67fc:	b510      	push	{r4, lr}
  if (menuShowing && (long)(micros() - last_micros) >= debouncing_time * 1000)
   d67fe:	4b10      	ldr	r3, [pc, #64]	; (d6840 <_Z5ENTERv+0x44>)
   d6800:	781b      	ldrb	r3, [r3, #0]
   d6802:	b1db      	cbz	r3, d683c <_Z5ENTERv+0x40>
   d6804:	f002 fc7c 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
   d6808:	4b0e      	ldr	r3, [pc, #56]	; (d6844 <_Z5ENTERv+0x48>)
   d680a:	681a      	ldr	r2, [r3, #0]
   d680c:	1a80      	subs	r0, r0, r2
   d680e:	4a0e      	ldr	r2, [pc, #56]	; (d6848 <_Z5ENTERv+0x4c>)
   d6810:	6811      	ldr	r1, [r2, #0]
   d6812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6816:	434a      	muls	r2, r1
   d6818:	4290      	cmp	r0, r2
   d681a:	461c      	mov	r4, r3
   d681c:	da00      	bge.n	d6820 <_Z5ENTERv+0x24>
   d681e:	bd10      	pop	{r4, pc}
  {
    if (appmode)
   d6820:	4b0a      	ldr	r3, [pc, #40]	; (d684c <_Z5ENTERv+0x50>)
   d6822:	781b      	ldrb	r3, [r3, #0]
   d6824:	b91b      	cbnz	r3, d682e <_Z5ENTERv+0x32>
    {
    }
    else
    {
      btncounter++;
   d6826:	4a0a      	ldr	r2, [pc, #40]	; (d6850 <_Z5ENTERv+0x54>)
   d6828:	7813      	ldrb	r3, [r2, #0]
   d682a:	3301      	adds	r3, #1
   d682c:	7013      	strb	r3, [r2, #0]
    }
    btnid = 1;
   d682e:	4b09      	ldr	r3, [pc, #36]	; (d6854 <_Z5ENTERv+0x58>)
   d6830:	2201      	movs	r2, #1
   d6832:	701a      	strb	r2, [r3, #0]
   d6834:	f002 fc64 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
    last_micros = micros();
   d6838:	6020      	str	r0, [r4, #0]
  }
}
   d683a:	bd10      	pop	{r4, pc}
   d683c:	bd10      	pop	{r4, pc}
   d683e:	bf00      	nop
   d6840:	2003e10c 	.word	0x2003e10c
   d6844:	2003e308 	.word	0x2003e308
   d6848:	2003d840 	.word	0x2003d840
   d684c:	2003e1f6 	.word	0x2003e1f6
   d6850:	2003e1c0 	.word	0x2003e1c0
   d6854:	2003e208 	.word	0x2003e208

000d6858 <_Z4LEFTv>:

void LEFT()
{
   d6858:	b510      	push	{r4, lr}
  if (menuShowing && (long)(micros() - last_micros) >= debouncing_time * 1000)
   d685a:	4b11      	ldr	r3, [pc, #68]	; (d68a0 <_Z4LEFTv+0x48>)
   d685c:	781b      	ldrb	r3, [r3, #0]
   d685e:	b1eb      	cbz	r3, d689c <_Z4LEFTv+0x44>
   d6860:	f002 fc4e 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
   d6864:	4b0f      	ldr	r3, [pc, #60]	; (d68a4 <_Z4LEFTv+0x4c>)
   d6866:	681a      	ldr	r2, [r3, #0]
   d6868:	1a80      	subs	r0, r0, r2
   d686a:	4a0f      	ldr	r2, [pc, #60]	; (d68a8 <_Z4LEFTv+0x50>)
   d686c:	6811      	ldr	r1, [r2, #0]
   d686e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6872:	434a      	muls	r2, r1
   d6874:	4290      	cmp	r0, r2
   d6876:	461c      	mov	r4, r3
   d6878:	da00      	bge.n	d687c <_Z4LEFTv+0x24>
   d687a:	bd10      	pop	{r4, pc}
  {
    if (appmode)
   d687c:	4b0b      	ldr	r3, [pc, #44]	; (d68ac <_Z4LEFTv+0x54>)
   d687e:	781b      	ldrb	r3, [r3, #0]
   d6880:	b91b      	cbnz	r3, d688a <_Z4LEFTv+0x32>
    {
    }
    else
    {
      btncounter++;
   d6882:	4a0b      	ldr	r2, [pc, #44]	; (d68b0 <_Z4LEFTv+0x58>)
   d6884:	7813      	ldrb	r3, [r2, #0]
   d6886:	3301      	adds	r3, #1
   d6888:	7013      	strb	r3, [r2, #0]
    }
    resetDisplayBools();
   d688a:	f7fe fdb7 	bl	d53fc <_Z17resetDisplayBoolsv>
    btnid = 4;
   d688e:	4b09      	ldr	r3, [pc, #36]	; (d68b4 <_Z4LEFTv+0x5c>)
   d6890:	2204      	movs	r2, #4
   d6892:	701a      	strb	r2, [r3, #0]
   d6894:	f002 fc34 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
    last_micros = micros();
   d6898:	6020      	str	r0, [r4, #0]
  }
}
   d689a:	bd10      	pop	{r4, pc}
   d689c:	bd10      	pop	{r4, pc}
   d689e:	bf00      	nop
   d68a0:	2003e10c 	.word	0x2003e10c
   d68a4:	2003e308 	.word	0x2003e308
   d68a8:	2003d840 	.word	0x2003d840
   d68ac:	2003e1f6 	.word	0x2003e1f6
   d68b0:	2003e1c0 	.word	0x2003e1c0
   d68b4:	2003e208 	.word	0x2003e208

000d68b8 <_Z5RIGHTv>:

void RIGHT()
{
   d68b8:	b510      	push	{r4, lr}
  if (menuShowing && (long)(micros() - last_micros) >= debouncing_time * 1000)
   d68ba:	4b11      	ldr	r3, [pc, #68]	; (d6900 <_Z5RIGHTv+0x48>)
   d68bc:	781b      	ldrb	r3, [r3, #0]
   d68be:	b1eb      	cbz	r3, d68fc <_Z5RIGHTv+0x44>
   d68c0:	f002 fc1e 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
   d68c4:	4b0f      	ldr	r3, [pc, #60]	; (d6904 <_Z5RIGHTv+0x4c>)
   d68c6:	681a      	ldr	r2, [r3, #0]
   d68c8:	1a80      	subs	r0, r0, r2
   d68ca:	4a0f      	ldr	r2, [pc, #60]	; (d6908 <_Z5RIGHTv+0x50>)
   d68cc:	6811      	ldr	r1, [r2, #0]
   d68ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d68d2:	434a      	muls	r2, r1
   d68d4:	4290      	cmp	r0, r2
   d68d6:	461c      	mov	r4, r3
   d68d8:	da00      	bge.n	d68dc <_Z5RIGHTv+0x24>
   d68da:	bd10      	pop	{r4, pc}
  {
    if (appmode)
   d68dc:	4b0b      	ldr	r3, [pc, #44]	; (d690c <_Z5RIGHTv+0x54>)
   d68de:	781b      	ldrb	r3, [r3, #0]
   d68e0:	b91b      	cbnz	r3, d68ea <_Z5RIGHTv+0x32>
    {
    }
    else
    {
      btncounter++;
   d68e2:	4a0b      	ldr	r2, [pc, #44]	; (d6910 <_Z5RIGHTv+0x58>)
   d68e4:	7813      	ldrb	r3, [r2, #0]
   d68e6:	3301      	adds	r3, #1
   d68e8:	7013      	strb	r3, [r2, #0]
    }
    resetDisplayBools();
   d68ea:	f7fe fd87 	bl	d53fc <_Z17resetDisplayBoolsv>
    btnid = 5;
   d68ee:	4b09      	ldr	r3, [pc, #36]	; (d6914 <_Z5RIGHTv+0x5c>)
   d68f0:	2205      	movs	r2, #5
   d68f2:	701a      	strb	r2, [r3, #0]
   d68f4:	f002 fc04 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
    last_micros = micros();
   d68f8:	6020      	str	r0, [r4, #0]
  }
}
   d68fa:	bd10      	pop	{r4, pc}
   d68fc:	bd10      	pop	{r4, pc}
   d68fe:	bf00      	nop
   d6900:	2003e10c 	.word	0x2003e10c
   d6904:	2003e308 	.word	0x2003e308
   d6908:	2003d840 	.word	0x2003d840
   d690c:	2003e1f6 	.word	0x2003e1f6
   d6910:	2003e1c0 	.word	0x2003e1c0
   d6914:	2003e208 	.word	0x2003e208

000d6918 <_Z3ESCv>:
  attachInterrupt(JOYSTICK_LEFT, LEFT, FALLING);
  attachInterrupt(JOYSTICK_RIGHT, RIGHT, FALLING);
}

void ESC()
{
   d6918:	b510      	push	{r4, lr}
   d691a:	f002 fbf1 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
  if ((long)(micros() - last_micros) >= debouncing_time * 1000)
   d691e:	4b14      	ldr	r3, [pc, #80]	; (d6970 <_Z3ESCv+0x58>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	1ac0      	subs	r0, r0, r3
   d6924:	4b13      	ldr	r3, [pc, #76]	; (d6974 <_Z3ESCv+0x5c>)
   d6926:	681a      	ldr	r2, [r3, #0]
   d6928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d692c:	4353      	muls	r3, r2
   d692e:	4298      	cmp	r0, r3
   d6930:	db1c      	blt.n	d696c <_Z3ESCv+0x54>
  {
    detachInterrupt(RED_BUTTON_A);
   d6932:	200c      	movs	r0, #12
   d6934:	f003 fa66 	bl	d9e04 <_Z15detachInterruptt>
    detachInterrupt(BLUE_BUTTON_B);
   d6938:	200e      	movs	r0, #14
   d693a:	f003 fa63 	bl	d9e04 <_Z15detachInterruptt>
    detachInterrupt(GREEN_BUTTON_C);
   d693e:	200d      	movs	r0, #13
   d6940:	f003 fa60 	bl	d9e04 <_Z15detachInterruptt>
    detachInterrupt(YELLOW_BUTTON_D);
   d6944:	200f      	movs	r0, #15
   d6946:	f003 fa5d 	bl	d9e04 <_Z15detachInterruptt>

    appmode = 0;
   d694a:	4b0b      	ldr	r3, [pc, #44]	; (d6978 <_Z3ESCv+0x60>)
   d694c:	2400      	movs	r4, #0
   d694e:	701c      	strb	r4, [r3, #0]
    btnid = 4;
   d6950:	4b0a      	ldr	r3, [pc, #40]	; (d697c <_Z3ESCv+0x64>)
   d6952:	2204      	movs	r2, #4
   d6954:	701a      	strb	r2, [r3, #0]
    btncounter++;
   d6956:	4a0a      	ldr	r2, [pc, #40]	; (d6980 <_Z3ESCv+0x68>)
   d6958:	7813      	ldrb	r3, [r2, #0]
   d695a:	3301      	adds	r3, #1
   d695c:	7013      	strb	r3, [r2, #0]

    resetDisplayBools();
   d695e:	f7fe fd4d 	bl	d53fc <_Z17resetDisplayBoolsv>
    toggleAllButtons(LOW);
   d6962:	4620      	mov	r0, r4
  }
}
   d6964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    appmode = 0;
    btnid = 4;
    btncounter++;

    resetDisplayBools();
    toggleAllButtons(LOW);
   d6968:	f000 b91c 	b.w	d6ba4 <_Z16toggleAllButtonsi>
   d696c:	bd10      	pop	{r4, pc}
   d696e:	bf00      	nop
   d6970:	2003e308 	.word	0x2003e308
   d6974:	2003d840 	.word	0x2003d840
   d6978:	2003e1f6 	.word	0x2003e1f6
   d697c:	2003e208 	.word	0x2003e208
   d6980:	2003e1c0 	.word	0x2003e1c0

000d6984 <_Z4BACKv>:
  }
}

void BACK()
{
   d6984:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6986:	f002 fbbb 	bl	d9100 <HAL_Timer_Get_Micro_Seconds>
  if ((long)(micros() - last_micros) >= debouncing_time * 1000)
   d698a:	4b13      	ldr	r3, [pc, #76]	; (d69d8 <_Z4BACKv+0x54>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	1ac0      	subs	r0, r0, r3
   d6990:	4b12      	ldr	r3, [pc, #72]	; (d69dc <_Z4BACKv+0x58>)
   d6992:	681a      	ldr	r2, [r3, #0]
   d6994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6998:	4353      	muls	r3, r2
   d699a:	4298      	cmp	r0, r3
   d699c:	db19      	blt.n	d69d2 <_Z4BACKv+0x4e>
  {
    appmode = 0;
   d699e:	4b10      	ldr	r3, [pc, #64]	; (d69e0 <_Z4BACKv+0x5c>)
    btnid = 4;
    btncounter++;
   d69a0:	4a10      	ldr	r2, [pc, #64]	; (d69e4 <_Z4BACKv+0x60>)

void BACK()
{
  if ((long)(micros() - last_micros) >= debouncing_time * 1000)
  {
    appmode = 0;
   d69a2:	2500      	movs	r5, #0
   d69a4:	701d      	strb	r5, [r3, #0]
    btnid = 4;
   d69a6:	4b10      	ldr	r3, [pc, #64]	; (d69e8 <_Z4BACKv+0x64>)
   d69a8:	2404      	movs	r4, #4
   d69aa:	701c      	strb	r4, [r3, #0]
    btncounter++;
   d69ac:	7813      	ldrb	r3, [r2, #0]
   d69ae:	3301      	adds	r3, #1
   d69b0:	7013      	strb	r3, [r2, #0]
    resetDisplayBools();
   d69b2:	f7fe fd23 	bl	d53fc <_Z17resetDisplayBoolsv>
    toggleAllButtons(LOW);
   d69b6:	4628      	mov	r0, r5
   d69b8:	f000 f8f4 	bl	d6ba4 <_Z16toggleAllButtonsi>

    detachInterrupt(JOYSTICK_LEFT);
   d69bc:	4620      	mov	r0, r4
   d69be:	f003 fa21 	bl	d9e04 <_Z15detachInterruptt>
    attachInterrupt(JOYSTICK_LEFT, LEFT, FALLING); // Set the default interrupt back up
   d69c2:	9500      	str	r5, [sp, #0]
   d69c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d69c8:	2202      	movs	r2, #2
   d69ca:	4908      	ldr	r1, [pc, #32]	; (d69ec <_Z4BACKv+0x68>)
   d69cc:	4620      	mov	r0, r4
   d69ce:	f003 f9f3 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  }
}
   d69d2:	b003      	add	sp, #12
   d69d4:	bd30      	pop	{r4, r5, pc}
   d69d6:	bf00      	nop
   d69d8:	2003e308 	.word	0x2003e308
   d69dc:	2003d840 	.word	0x2003d840
   d69e0:	2003e1f6 	.word	0x2003e1f6
   d69e4:	2003e1c0 	.word	0x2003e1c0
   d69e8:	2003e208 	.word	0x2003e208
   d69ec:	000d6859 	.word	0x000d6859

000d69f0 <_Z23setupJoystickInterruptsv>:
    last_micros = micros();
  }
}

void setupJoystickInterrupts()
{
   d69f0:	b513      	push	{r0, r1, r4, lr}
  // Set up Interrupts
  attachInterrupt(JOYSTICK_UP, UP, FALLING);
   d69f2:	2400      	movs	r4, #0
   d69f4:	9400      	str	r4, [sp, #0]
   d69f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d69fa:	2202      	movs	r2, #2
   d69fc:	4912      	ldr	r1, [pc, #72]	; (d6a48 <_Z23setupJoystickInterruptsv+0x58>)
   d69fe:	2006      	movs	r0, #6
   d6a00:	f003 f9da 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(JOYSTICK_DOWN, DOWN, FALLING);
   d6a04:	9400      	str	r4, [sp, #0]
   d6a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a0a:	2202      	movs	r2, #2
   d6a0c:	490f      	ldr	r1, [pc, #60]	; (d6a4c <_Z23setupJoystickInterruptsv+0x5c>)
   d6a0e:	2005      	movs	r0, #5
   d6a10:	f003 f9d2 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(JOYSTICK_CENTER, ENTER, FALLING);
   d6a14:	2202      	movs	r2, #2
   d6a16:	9400      	str	r4, [sp, #0]
   d6a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a1c:	490c      	ldr	r1, [pc, #48]	; (d6a50 <_Z23setupJoystickInterruptsv+0x60>)
   d6a1e:	4610      	mov	r0, r2
   d6a20:	f003 f9ca 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(JOYSTICK_LEFT, LEFT, FALLING);
   d6a24:	9400      	str	r4, [sp, #0]
   d6a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a2a:	2202      	movs	r2, #2
   d6a2c:	4909      	ldr	r1, [pc, #36]	; (d6a54 <_Z23setupJoystickInterruptsv+0x64>)
   d6a2e:	2004      	movs	r0, #4
   d6a30:	f003 f9c2 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(JOYSTICK_RIGHT, RIGHT, FALLING);
   d6a34:	9400      	str	r4, [sp, #0]
   d6a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a3a:	2202      	movs	r2, #2
   d6a3c:	4906      	ldr	r1, [pc, #24]	; (d6a58 <_Z23setupJoystickInterruptsv+0x68>)
   d6a3e:	2003      	movs	r0, #3
   d6a40:	f003 f9ba 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d6a44:	b002      	add	sp, #8
   d6a46:	bd10      	pop	{r4, pc}
   d6a48:	000d6745 	.word	0x000d6745
   d6a4c:	000d67a1 	.word	0x000d67a1
   d6a50:	000d67fd 	.word	0x000d67fd
   d6a54:	000d6859 	.word	0x000d6859
   d6a58:	000d68b9 	.word	0x000d68b9

000d6a5c <_Z23setupLEDButtonInterruptv>:
    attachInterrupt(JOYSTICK_LEFT, LEFT, FALLING); // Set the default interrupt back up
  }
}

void setupLEDButtonInterrupt()
{
   d6a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  attachInterrupt(RED_BUTTON_A, ESC, FALLING);
   d6a5e:	4c12      	ldr	r4, [pc, #72]	; (d6aa8 <_Z23setupLEDButtonInterruptv+0x4c>)
   d6a60:	2500      	movs	r5, #0
   d6a62:	4621      	mov	r1, r4
   d6a64:	9500      	str	r5, [sp, #0]
   d6a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a6a:	2202      	movs	r2, #2
   d6a6c:	200c      	movs	r0, #12
   d6a6e:	f003 f9a3 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(BLUE_BUTTON_B, ESC, FALLING);
   d6a72:	4621      	mov	r1, r4
   d6a74:	9500      	str	r5, [sp, #0]
   d6a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a7a:	2202      	movs	r2, #2
   d6a7c:	200e      	movs	r0, #14
   d6a7e:	f003 f99b 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(GREEN_BUTTON_C, ESC, FALLING);
   d6a82:	4621      	mov	r1, r4
   d6a84:	9500      	str	r5, [sp, #0]
   d6a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a8a:	2202      	movs	r2, #2
   d6a8c:	200d      	movs	r0, #13
   d6a8e:	f003 f993 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(YELLOW_BUTTON_D, ESC, FALLING);
   d6a92:	9500      	str	r5, [sp, #0]
   d6a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a98:	2202      	movs	r2, #2
   d6a9a:	4621      	mov	r1, r4
   d6a9c:	200f      	movs	r0, #15
   d6a9e:	f003 f98b 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d6aa2:	b003      	add	sp, #12
   d6aa4:	bd30      	pop	{r4, r5, pc}
   d6aa6:	bf00      	nop
   d6aa8:	000d6919 	.word	0x000d6919

000d6aac <_Z24setupBackButtonInterruptv>:

void setupBackButtonInterrupt()
{
   d6aac:	b507      	push	{r0, r1, r2, lr}
  detachInterrupt(JOYSTICK_LEFT);
   d6aae:	2004      	movs	r0, #4
   d6ab0:	f003 f9a8 	bl	d9e04 <_Z15detachInterruptt>
  attachInterrupt(JOYSTICK_LEFT, BACK, FALLING);
   d6ab4:	2300      	movs	r3, #0
   d6ab6:	9300      	str	r3, [sp, #0]
   d6ab8:	2202      	movs	r2, #2
   d6aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6abe:	4903      	ldr	r1, [pc, #12]	; (d6acc <_Z24setupBackButtonInterruptv+0x20>)
   d6ac0:	2004      	movs	r0, #4
   d6ac2:	f003 f979 	bl	d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d6ac6:	b003      	add	sp, #12
   d6ac8:	f85d fb04 	ldr.w	pc, [sp], #4
   d6acc:	000d6985 	.word	0x000d6985

000d6ad0 <_GLOBAL__sub_I_codeEntered>:
      codeEntered = false;
      currentProgress = 0;
      inCodeMode = false;
    }
  }
}
   d6ad0:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6ad2:	f002 fb1d 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
  JOYSTICK_CENTER
};

bool codeEntered = false;
int currentProgress = 0;
unsigned long lastCheck = millis();
   d6ad6:	4b01      	ldr	r3, [pc, #4]	; (d6adc <_GLOBAL__sub_I_codeEntered+0xc>)
   d6ad8:	6018      	str	r0, [r3, #0]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	2003e30c 	.word	0x2003e30c

000d6ae0 <_Z6fadeInii>:

int LEDnumber = 0;
int fadeIncrement = 5;

void fadeIn(int ledPin, int delayInt)
{
   d6ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int fadeValue = 0; fadeValue <= 255; fadeValue += fadeIncrement)
   d6ae2:	4d08      	ldr	r5, [pc, #32]	; (d6b04 <_Z6fadeInii+0x24>)

int LEDnumber = 0;
int fadeIncrement = 5;

void fadeIn(int ledPin, int delayInt)
{
   d6ae4:	460e      	mov	r6, r1
  for (int fadeValue = 0; fadeValue <= 255; fadeValue += fadeIncrement)
   d6ae6:	2400      	movs	r4, #0
  {
    analogWrite(ledPin, fadeValue);
   d6ae8:	b287      	uxth	r7, r0
   d6aea:	4621      	mov	r1, r4
   d6aec:	4638      	mov	r0, r7
   d6aee:	f004 fcdd 	bl	db4ac <_Z11analogWritetm>
    delay(delayInt);
   d6af2:	4630      	mov	r0, r6
   d6af4:	f002 fe14 	bl	d9720 <delay>
int LEDnumber = 0;
int fadeIncrement = 5;

void fadeIn(int ledPin, int delayInt)
{
  for (int fadeValue = 0; fadeValue <= 255; fadeValue += fadeIncrement)
   d6af8:	682b      	ldr	r3, [r5, #0]
   d6afa:	441c      	add	r4, r3
   d6afc:	2cff      	cmp	r4, #255	; 0xff
   d6afe:	ddf4      	ble.n	d6aea <_Z6fadeInii+0xa>
  {
    analogWrite(ledPin, fadeValue);
    delay(delayInt);
  }
}
   d6b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6b02:	bf00      	nop
   d6b04:	2003d844 	.word	0x2003d844

000d6b08 <_Z7fadeOutii>:

void fadeOut(int ledPin, int delayInt)
{
   d6b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int fadeValue = 255; fadeValue >= 0; fadeValue -= fadeIncrement)
   d6b0a:	4d07      	ldr	r5, [pc, #28]	; (d6b28 <_Z7fadeOutii+0x20>)
    delay(delayInt);
  }
}

void fadeOut(int ledPin, int delayInt)
{
   d6b0c:	460e      	mov	r6, r1
  for (int fadeValue = 255; fadeValue >= 0; fadeValue -= fadeIncrement)
   d6b0e:	24ff      	movs	r4, #255	; 0xff
  {
    analogWrite(ledPin, fadeValue);
   d6b10:	b287      	uxth	r7, r0
   d6b12:	4621      	mov	r1, r4
   d6b14:	4638      	mov	r0, r7
   d6b16:	f004 fcc9 	bl	db4ac <_Z11analogWritetm>
    delay(delayInt);
   d6b1a:	4630      	mov	r0, r6
   d6b1c:	f002 fe00 	bl	d9720 <delay>
  }
}

void fadeOut(int ledPin, int delayInt)
{
  for (int fadeValue = 255; fadeValue >= 0; fadeValue -= fadeIncrement)
   d6b20:	682b      	ldr	r3, [r5, #0]
   d6b22:	1ae4      	subs	r4, r4, r3
   d6b24:	d5f5      	bpl.n	d6b12 <_Z7fadeOutii+0xa>
  {
    analogWrite(ledPin, fadeValue);
    delay(delayInt);
  }
}
   d6b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6b28:	2003d844 	.word	0x2003d844

000d6b2c <_Z9fadeAllInv>:
    fadeOut(ledPin, 15);
  }
}

void fadeAllIn()
{
   d6b2c:	b538      	push	{r3, r4, r5, lr}
  for (int fadeValue = 5; fadeValue <= 255; fadeValue += fadeIncrement)
   d6b2e:	4d0d      	ldr	r5, [pc, #52]	; (d6b64 <_Z9fadeAllInv+0x38>)
   d6b30:	2405      	movs	r4, #5
  {
    analogWrite(RED_LED, fadeValue);
   d6b32:	4621      	mov	r1, r4
   d6b34:	2010      	movs	r0, #16
   d6b36:	f004 fcb9 	bl	db4ac <_Z11analogWritetm>
    analogWrite(BLUE_LED, fadeValue);
   d6b3a:	4621      	mov	r1, r4
   d6b3c:	2012      	movs	r0, #18
   d6b3e:	f004 fcb5 	bl	db4ac <_Z11analogWritetm>
    analogWrite(GREEN_LED, fadeValue);
   d6b42:	4621      	mov	r1, r4
   d6b44:	2011      	movs	r0, #17
   d6b46:	f004 fcb1 	bl	db4ac <_Z11analogWritetm>
    analogWrite(YELLOW_LED, fadeValue);
   d6b4a:	4621      	mov	r1, r4
   d6b4c:	2013      	movs	r0, #19
   d6b4e:	f004 fcad 	bl	db4ac <_Z11analogWritetm>
    delay(15);
   d6b52:	200f      	movs	r0, #15
   d6b54:	f002 fde4 	bl	d9720 <delay>
  }
}

void fadeAllIn()
{
  for (int fadeValue = 5; fadeValue <= 255; fadeValue += fadeIncrement)
   d6b58:	682b      	ldr	r3, [r5, #0]
   d6b5a:	441c      	add	r4, r3
   d6b5c:	2cff      	cmp	r4, #255	; 0xff
   d6b5e:	dde8      	ble.n	d6b32 <_Z9fadeAllInv+0x6>
    analogWrite(BLUE_LED, fadeValue);
    analogWrite(GREEN_LED, fadeValue);
    analogWrite(YELLOW_LED, fadeValue);
    delay(15);
  }
}
   d6b60:	bd38      	pop	{r3, r4, r5, pc}
   d6b62:	bf00      	nop
   d6b64:	2003d844 	.word	0x2003d844

000d6b68 <_Z10fadeAllOutv>:

void fadeAllOut()
{
   d6b68:	b538      	push	{r3, r4, r5, lr}
  for (int fadeValue = 255; fadeValue > 0; fadeValue -= fadeIncrement)
   d6b6a:	4d0d      	ldr	r5, [pc, #52]	; (d6ba0 <_Z10fadeAllOutv+0x38>)
   d6b6c:	24ff      	movs	r4, #255	; 0xff
  {
    analogWrite(RED_LED, fadeValue);
   d6b6e:	4621      	mov	r1, r4
   d6b70:	2010      	movs	r0, #16
   d6b72:	f004 fc9b 	bl	db4ac <_Z11analogWritetm>
    analogWrite(BLUE_LED, fadeValue);
   d6b76:	4621      	mov	r1, r4
   d6b78:	2012      	movs	r0, #18
   d6b7a:	f004 fc97 	bl	db4ac <_Z11analogWritetm>
    analogWrite(GREEN_LED, fadeValue);
   d6b7e:	4621      	mov	r1, r4
   d6b80:	2011      	movs	r0, #17
   d6b82:	f004 fc93 	bl	db4ac <_Z11analogWritetm>
    analogWrite(YELLOW_LED, fadeValue);
   d6b86:	4621      	mov	r1, r4
   d6b88:	2013      	movs	r0, #19
   d6b8a:	f004 fc8f 	bl	db4ac <_Z11analogWritetm>
    delay(15);
   d6b8e:	200f      	movs	r0, #15
   d6b90:	f002 fdc6 	bl	d9720 <delay>
  }
}

void fadeAllOut()
{
  for (int fadeValue = 255; fadeValue > 0; fadeValue -= fadeIncrement)
   d6b94:	682b      	ldr	r3, [r5, #0]
   d6b96:	1ae4      	subs	r4, r4, r3
   d6b98:	2c00      	cmp	r4, #0
   d6b9a:	dce8      	bgt.n	d6b6e <_Z10fadeAllOutv+0x6>
    analogWrite(BLUE_LED, fadeValue);
    analogWrite(GREEN_LED, fadeValue);
    analogWrite(YELLOW_LED, fadeValue);
    delay(15);
  }
}
   d6b9c:	bd38      	pop	{r3, r4, r5, pc}
   d6b9e:	bf00      	nop
   d6ba0:	2003d844 	.word	0x2003d844

000d6ba4 <_Z16toggleAllButtonsi>:
  analogWrite(YELLOW_LED, 255);
}

// Toggle all the buttons on or off
void toggleAllButtons(int state)
{
   d6ba4:	b510      	push	{r4, lr}
  int analogState = state == HIGH ? 255 : 0;
   d6ba6:	2801      	cmp	r0, #1
   d6ba8:	bf0c      	ite	eq
   d6baa:	24ff      	moveq	r4, #255	; 0xff
   d6bac:	2400      	movne	r4, #0

  analogWrite(RED_LED, analogState);
   d6bae:	4621      	mov	r1, r4
   d6bb0:	2010      	movs	r0, #16
   d6bb2:	f004 fc7b 	bl	db4ac <_Z11analogWritetm>
  analogWrite(BLUE_LED, analogState);
   d6bb6:	4621      	mov	r1, r4
   d6bb8:	2012      	movs	r0, #18
   d6bba:	f004 fc77 	bl	db4ac <_Z11analogWritetm>
  analogWrite(GREEN_LED, analogState);
   d6bbe:	4621      	mov	r1, r4
   d6bc0:	2011      	movs	r0, #17
   d6bc2:	f004 fc73 	bl	db4ac <_Z11analogWritetm>
  analogWrite(YELLOW_LED, analogState);
   d6bc6:	4621      	mov	r1, r4
   d6bc8:	2013      	movs	r0, #19
}
   d6bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  int analogState = state == HIGH ? 255 : 0;

  analogWrite(RED_LED, analogState);
  analogWrite(BLUE_LED, analogState);
  analogWrite(GREEN_LED, analogState);
  analogWrite(YELLOW_LED, analogState);
   d6bce:	f004 bc6d 	b.w	db4ac <_Z11analogWritetm>

000d6bd2 <_Z8pulseLEDi>:
    delay(delayInt);
  }
}

void pulseLED(int ledPin)
{
   d6bd2:	b538      	push	{r3, r4, r5, lr}
   d6bd4:	4605      	mov	r5, r0
  toggleAllButtons(LOW);
   d6bd6:	2000      	movs	r0, #0
   d6bd8:	f7ff ffe4 	bl	d6ba4 <_Z16toggleAllButtonsi>
   d6bdc:	2403      	movs	r4, #3
  for (int i = 0; i < 3; i++)
  {
    fadeIn(ledPin, 15);
   d6bde:	210f      	movs	r1, #15
   d6be0:	4628      	mov	r0, r5
   d6be2:	f7ff ff7d 	bl	d6ae0 <_Z6fadeInii>
    fadeOut(ledPin, 15);
   d6be6:	210f      	movs	r1, #15
   d6be8:	4628      	mov	r0, r5
   d6bea:	f7ff ff8d 	bl	d6b08 <_Z7fadeOutii>
}

void pulseLED(int ledPin)
{
  toggleAllButtons(LOW);
  for (int i = 0; i < 3; i++)
   d6bee:	3c01      	subs	r4, #1
   d6bf0:	d1f5      	bne.n	d6bde <_Z8pulseLEDi+0xc>
  {
    fadeIn(ledPin, 15);
    fadeOut(ledPin, 15);
  }
}
   d6bf2:	bd38      	pop	{r3, r4, r5, pc}

000d6bf4 <_Z14initLEDButtonsv>:
  }
}

// Set up the tactile LED buttons
void initLEDButtons()
{
   d6bf4:	b508      	push	{r3, lr}
  int del = 300;
  int medDel = 500;

  // Init D7
  pinMode(D7, INPUT_PULLDOWN);
   d6bf6:	2103      	movs	r1, #3
   d6bf8:	2007      	movs	r0, #7
   d6bfa:	f004 fc03 	bl	db404 <pinMode>

  // Init LEDs as Outputs
  pinMode(RED_LED, OUTPUT);
   d6bfe:	2101      	movs	r1, #1
   d6c00:	2010      	movs	r0, #16
   d6c02:	f004 fbff 	bl	db404 <pinMode>
  pinMode(BLUE_LED, OUTPUT);
   d6c06:	2101      	movs	r1, #1
   d6c08:	2012      	movs	r0, #18
   d6c0a:	f004 fbfb 	bl	db404 <pinMode>
  pinMode(GREEN_LED, OUTPUT);
   d6c0e:	2101      	movs	r1, #1
   d6c10:	2011      	movs	r0, #17
   d6c12:	f004 fbf7 	bl	db404 <pinMode>
  pinMode(YELLOW_LED, OUTPUT);
   d6c16:	2101      	movs	r1, #1
   d6c18:	2013      	movs	r0, #19
   d6c1a:	f004 fbf3 	bl	db404 <pinMode>

  fadeAllIn();
   d6c1e:	f7ff ff85 	bl	d6b2c <_Z9fadeAllInv>
  fadeAllOut();
   d6c22:	f7ff ffa1 	bl	d6b68 <_Z10fadeAllOutv>
  fadeAllIn();
   d6c26:	f7ff ff81 	bl	d6b2c <_Z9fadeAllInv>
  fadeAllOut();
   d6c2a:	f7ff ff9d 	bl	d6b68 <_Z10fadeAllOutv>
  fadeAllIn();
   d6c2e:	f7ff ff7d 	bl	d6b2c <_Z9fadeAllInv>

  toggleAllButtons(LOW);
   d6c32:	2000      	movs	r0, #0
   d6c34:	f7ff ffb6 	bl	d6ba4 <_Z16toggleAllButtonsi>
  delay(medDel);
   d6c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d6c3c:	f002 fd70 	bl	d9720 <delay>

  analogWrite(RED_LED, 255);
   d6c40:	21ff      	movs	r1, #255	; 0xff
   d6c42:	2010      	movs	r0, #16
   d6c44:	f004 fc32 	bl	db4ac <_Z11analogWritetm>
  delay(del);
   d6c48:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6c4c:	f002 fd68 	bl	d9720 <delay>
  analogWrite(BLUE_LED, 255);
   d6c50:	21ff      	movs	r1, #255	; 0xff
   d6c52:	2012      	movs	r0, #18
   d6c54:	f004 fc2a 	bl	db4ac <_Z11analogWritetm>
  delay(del);
   d6c58:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6c5c:	f002 fd60 	bl	d9720 <delay>
  analogWrite(GREEN_LED, 255);
   d6c60:	21ff      	movs	r1, #255	; 0xff
   d6c62:	2011      	movs	r0, #17
   d6c64:	f004 fc22 	bl	db4ac <_Z11analogWritetm>
  delay(del);
   d6c68:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d6c6c:	f002 fd58 	bl	d9720 <delay>
  analogWrite(YELLOW_LED, 255);
   d6c70:	21ff      	movs	r1, #255	; 0xff
   d6c72:	2013      	movs	r0, #19
}
   d6c74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(del);
  analogWrite(BLUE_LED, 255);
  delay(del);
  analogWrite(GREEN_LED, 255);
  delay(del);
  analogWrite(YELLOW_LED, 255);
   d6c78:	f004 bc18 	b.w	db4ac <_Z11analogWritetm>

000d6c7c <_Z7setLEDsh>:

// Lights a given LEDs
// Pass in a byte that is made up from CHOICE_RED, CHOICE_YELLOW, etc
void setLEDs(byte leds)
{
  if ((leds & CHOICE_RED) != 0)
   d6c7c:	f010 0101 	ands.w	r1, r0, #1
}

// Lights a given LEDs
// Pass in a byte that is made up from CHOICE_RED, CHOICE_YELLOW, etc
void setLEDs(byte leds)
{
   d6c80:	b510      	push	{r4, lr}
  if ((leds & CHOICE_RED) != 0)
    analogWrite(RED_LED, 255);
   d6c82:	bf18      	it	ne
   d6c84:	21ff      	movne	r1, #255	; 0xff
}

// Lights a given LEDs
// Pass in a byte that is made up from CHOICE_RED, CHOICE_YELLOW, etc
void setLEDs(byte leds)
{
   d6c86:	4604      	mov	r4, r0
  if ((leds & CHOICE_RED) != 0)
    analogWrite(RED_LED, 255);
  else
    analogWrite(RED_LED, 0);
   d6c88:	2010      	movs	r0, #16
   d6c8a:	f004 fc0f 	bl	db4ac <_Z11analogWritetm>

  if ((leds & CHOICE_GREEN) != 0)
   d6c8e:	f004 0302 	and.w	r3, r4, #2
   d6c92:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d6c96:	b103      	cbz	r3, d6c9a <_Z7setLEDsh+0x1e>
    analogWrite(GREEN_LED, 255);
   d6c98:	21ff      	movs	r1, #255	; 0xff
  else
    analogWrite(GREEN_LED, 0);
   d6c9a:	2011      	movs	r0, #17
   d6c9c:	f004 fc06 	bl	db4ac <_Z11analogWritetm>

  if ((leds & CHOICE_BLUE) != 0)
   d6ca0:	f004 0304 	and.w	r3, r4, #4
   d6ca4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
   d6ca8:	b103      	cbz	r3, d6cac <_Z7setLEDsh+0x30>
    analogWrite(BLUE_LED, 255);
   d6caa:	21ff      	movs	r1, #255	; 0xff
  else
    analogWrite(BLUE_LED, 0);
   d6cac:	2012      	movs	r0, #18

  if ((leds & CHOICE_YELLOW) != 0)
   d6cae:	f004 0408 	and.w	r4, r4, #8
    analogWrite(GREEN_LED, 0);

  if ((leds & CHOICE_BLUE) != 0)
    analogWrite(BLUE_LED, 255);
  else
    analogWrite(BLUE_LED, 0);
   d6cb2:	f004 fbfb 	bl	db4ac <_Z11analogWritetm>

  if ((leds & CHOICE_YELLOW) != 0)
   d6cb6:	f004 01ff 	and.w	r1, r4, #255	; 0xff
   d6cba:	b104      	cbz	r4, d6cbe <_Z7setLEDsh+0x42>
    analogWrite(YELLOW_LED, 255);
   d6cbc:	21ff      	movs	r1, #255	; 0xff
  else
    analogWrite(YELLOW_LED, 0);
   d6cbe:	2013      	movs	r0, #19
}
   d6cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    analogWrite(BLUE_LED, 0);

  if ((leds & CHOICE_YELLOW) != 0)
    analogWrite(YELLOW_LED, 255);
  else
    analogWrite(YELLOW_LED, 0);
   d6cc4:	f004 bbf2 	b.w	db4ac <_Z11analogWritetm>

000d6cc8 <_Z5tonerhi>:
// Red, upper left:     440Hz - 2.272ms - 1.136ms pulse
// Green, upper right:  880Hz - 1.136ms - 0.568ms pulse
// Blue, lower left:    587.33Hz - 1.702ms - 0.851ms pulse
// Yellow, lower right: 784Hz - 1.276ms - 0.638ms pulse
void toner(byte which, int buzz_length_ms)
{
   d6cc8:	b538      	push	{r3, r4, r5, lr}
   d6cca:	4605      	mov	r5, r0
   d6ccc:	460c      	mov	r4, r1
  setLEDs(which); //Turn on a given LED
   d6cce:	f7ff ffd5 	bl	d6c7c <_Z7setLEDsh>

  //Play the sound associated with the given LED
  switch (which)
   d6cd2:	1e68      	subs	r0, r5, #1
   d6cd4:	2807      	cmp	r0, #7
   d6cd6:	d813      	bhi.n	d6d00 <_Z5tonerhi+0x38>
   d6cd8:	e8df f000 	tbb	[pc, r0]
   d6cdc:	0a120704 	.word	0x0a120704
   d6ce0:	0d121212 	.word	0x0d121212
  {
  case CHOICE_RED:
    buzz_sound(buzz_length_ms, 1136);
   d6ce4:	f44f 618e 	mov.w	r1, #1136	; 0x470
   d6ce8:	e007      	b.n	d6cfa <_Z5tonerhi+0x32>
    break;
  case CHOICE_GREEN:
    buzz_sound(buzz_length_ms, 568);
   d6cea:	f44f 710e 	mov.w	r1, #568	; 0x238
   d6cee:	e004      	b.n	d6cfa <_Z5tonerhi+0x32>
    break;
  case CHOICE_BLUE:
    buzz_sound(buzz_length_ms, 851);
   d6cf0:	f240 3153 	movw	r1, #851	; 0x353
   d6cf4:	e001      	b.n	d6cfa <_Z5tonerhi+0x32>
    break;
  case CHOICE_YELLOW:
    buzz_sound(buzz_length_ms, 638);
   d6cf6:	f240 217e 	movw	r1, #638	; 0x27e
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	f000 fa50 	bl	d71a0 <_Z10buzz_soundii>
    break;
  }

  setLEDs(CHOICE_OFF); // Turn off all LEDs
   d6d00:	2000      	movs	r0, #0
}
   d6d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  case CHOICE_YELLOW:
    buzz_sound(buzz_length_ms, 638);
    break;
  }

  setLEDs(CHOICE_OFF); // Turn off all LEDs
   d6d06:	f7ff bfb9 	b.w	d6c7c <_Z7setLEDsh>
	...

000d6d0c <_Z9changeLEDv>:
}

// Each time this function is called the board moves to the next LED
void changeLED()
{
   d6d0c:	b510      	push	{r4, lr}
  setLEDs(1 << LEDnumber); // Change the LED
   d6d0e:	4c07      	ldr	r4, [pc, #28]	; (d6d2c <_Z9changeLEDv+0x20>)
   d6d10:	6820      	ldr	r0, [r4, #0]
   d6d12:	2301      	movs	r3, #1
   d6d14:	fa03 f000 	lsl.w	r0, r3, r0
   d6d18:	b2c0      	uxtb	r0, r0
   d6d1a:	f7ff ffaf 	bl	d6c7c <_Z7setLEDsh>

  LEDnumber++; // Goto the next LED
   d6d1e:	6823      	ldr	r3, [r4, #0]
   d6d20:	3301      	adds	r3, #1
  if (LEDnumber > 3)
   d6d22:	2b03      	cmp	r3, #3
    LEDnumber = 0; // Wrap the counter if needed
   d6d24:	bfc8      	it	gt
   d6d26:	2300      	movgt	r3, #0
   d6d28:	6023      	str	r3, [r4, #0]
   d6d2a:	bd10      	pop	{r4, pc}
   d6d2c:	2003e310 	.word	0x2003e310

000d6d30 <_Z8ledChasev>:
}

void ledChase()
{
  appmode = 1;
  btnid = 0;
   d6d30:	4a25      	ldr	r2, [pc, #148]	; (d6dc8 <_Z8ledChasev+0x98>)
  if (LEDnumber > 3)
    LEDnumber = 0; // Wrap the counter if needed
}

void ledChase()
{
   d6d32:	b538      	push	{r3, r4, r5, lr}
  appmode = 1;
  btnid = 0;
   d6d34:	2500      	movs	r5, #0
   d6d36:	7015      	strb	r5, [r2, #0]
    LEDnumber = 0; // Wrap the counter if needed
}

void ledChase()
{
  appmode = 1;
   d6d38:	4c24      	ldr	r4, [pc, #144]	; (d6dcc <_Z8ledChasev+0x9c>)
  btnid = 0;
  int del = 100;
  showingLightAnimation = true;
   d6d3a:	4a25      	ldr	r2, [pc, #148]	; (d6dd0 <_Z8ledChasev+0xa0>)
    LEDnumber = 0; // Wrap the counter if needed
}

void ledChase()
{
  appmode = 1;
   d6d3c:	2301      	movs	r3, #1
   d6d3e:	7023      	strb	r3, [r4, #0]
  btnid = 0;
  int del = 100;
  showingLightAnimation = true;
   d6d40:	7013      	strb	r3, [r2, #0]

  setupBackButtonInterrupt();
   d6d42:	f7ff feb3 	bl	d6aac <_Z24setupBackButtonInterruptv>
  toggleAllButtons(LOW);
   d6d46:	4628      	mov	r0, r5
   d6d48:	f7ff ff2c 	bl	d6ba4 <_Z16toggleAllButtonsi>

  while (appmode)
   d6d4c:	7823      	ldrb	r3, [r4, #0]
   d6d4e:	b3d3      	cbz	r3, d6dc6 <_Z8ledChasev+0x96>
  {
    displayCarousel();
   d6d50:	f7fe fb1e 	bl	d5390 <_Z15displayCarouselv>

    analogWrite(BLUE_LED, 255);
   d6d54:	21ff      	movs	r1, #255	; 0xff
   d6d56:	2012      	movs	r0, #18
   d6d58:	f004 fba8 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6d5c:	2064      	movs	r0, #100	; 0x64
   d6d5e:	f002 fcdf 	bl	d9720 <delay>
    analogWrite(GREEN_LED, 255);
   d6d62:	21ff      	movs	r1, #255	; 0xff
   d6d64:	2011      	movs	r0, #17
   d6d66:	f004 fba1 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6d6a:	2064      	movs	r0, #100	; 0x64
   d6d6c:	f002 fcd8 	bl	d9720 <delay>
    analogWrite(YELLOW_LED, 255);
   d6d70:	21ff      	movs	r1, #255	; 0xff
   d6d72:	2013      	movs	r0, #19
   d6d74:	f004 fb9a 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6d78:	2064      	movs	r0, #100	; 0x64
   d6d7a:	f002 fcd1 	bl	d9720 <delay>
    analogWrite(RED_LED, 255);
   d6d7e:	21ff      	movs	r1, #255	; 0xff
   d6d80:	2010      	movs	r0, #16
   d6d82:	f004 fb93 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6d86:	2064      	movs	r0, #100	; 0x64
   d6d88:	f002 fcca 	bl	d9720 <delay>

    analogWrite(BLUE_LED, 0);
   d6d8c:	2100      	movs	r1, #0
   d6d8e:	2012      	movs	r0, #18
   d6d90:	f004 fb8c 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6d94:	2064      	movs	r0, #100	; 0x64
   d6d96:	f002 fcc3 	bl	d9720 <delay>
    analogWrite(GREEN_LED, 0);
   d6d9a:	2100      	movs	r1, #0
   d6d9c:	2011      	movs	r0, #17
   d6d9e:	f004 fb85 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6da2:	2064      	movs	r0, #100	; 0x64
   d6da4:	f002 fcbc 	bl	d9720 <delay>
    analogWrite(YELLOW_LED, 0);
   d6da8:	2100      	movs	r1, #0
   d6daa:	2013      	movs	r0, #19
   d6dac:	f004 fb7e 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6db0:	2064      	movs	r0, #100	; 0x64
   d6db2:	f002 fcb5 	bl	d9720 <delay>
    analogWrite(RED_LED, 0);
   d6db6:	2100      	movs	r1, #0
   d6db8:	2010      	movs	r0, #16
   d6dba:	f004 fb77 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6dbe:	2064      	movs	r0, #100	; 0x64
   d6dc0:	f002 fcae 	bl	d9720 <delay>
  showingLightAnimation = true;

  setupBackButtonInterrupt();
  toggleAllButtons(LOW);

  while (appmode)
   d6dc4:	e7c2      	b.n	d6d4c <_Z8ledChasev+0x1c>
   d6dc6:	bd38      	pop	{r3, r4, r5, pc}
   d6dc8:	2003e208 	.word	0x2003e208
   d6dcc:	2003e1f6 	.word	0x2003e1f6
   d6dd0:	2003e24d 	.word	0x2003e24d

000d6dd4 <_Z13ledPulseChasev>:
}

void ledPulseChase()
{
  appmode = 1;
  btnid = 0;
   d6dd4:	4a25      	ldr	r2, [pc, #148]	; (d6e6c <_Z13ledPulseChasev+0x98>)
    delay(del);
  }
}

void ledPulseChase()
{
   d6dd6:	b538      	push	{r3, r4, r5, lr}
  appmode = 1;
  btnid = 0;
   d6dd8:	2500      	movs	r5, #0
   d6dda:	7015      	strb	r5, [r2, #0]
  }
}

void ledPulseChase()
{
  appmode = 1;
   d6ddc:	4c24      	ldr	r4, [pc, #144]	; (d6e70 <_Z13ledPulseChasev+0x9c>)
  btnid = 0;
  int del = 5;
  int fadeDel = 10;
  showingLightAnimation = true;
   d6dde:	4a25      	ldr	r2, [pc, #148]	; (d6e74 <_Z13ledPulseChasev+0xa0>)
  }
}

void ledPulseChase()
{
  appmode = 1;
   d6de0:	2301      	movs	r3, #1
   d6de2:	7023      	strb	r3, [r4, #0]
  btnid = 0;
  int del = 5;
  int fadeDel = 10;
  showingLightAnimation = true;
   d6de4:	7013      	strb	r3, [r2, #0]

  setupBackButtonInterrupt();
   d6de6:	f7ff fe61 	bl	d6aac <_Z24setupBackButtonInterruptv>
  toggleAllButtons(LOW);
   d6dea:	4628      	mov	r0, r5
   d6dec:	f7ff feda 	bl	d6ba4 <_Z16toggleAllButtonsi>

  while (appmode)
   d6df0:	7823      	ldrb	r3, [r4, #0]
   d6df2:	b3d3      	cbz	r3, d6e6a <_Z13ledPulseChasev+0x96>
  {
    displayCarousel();
   d6df4:	f7fe facc 	bl	d5390 <_Z15displayCarouselv>

    fadeIn(BLUE_LED, fadeDel);
   d6df8:	210a      	movs	r1, #10
   d6dfa:	2012      	movs	r0, #18
   d6dfc:	f7ff fe70 	bl	d6ae0 <_Z6fadeInii>
    delay(del);
   d6e00:	2005      	movs	r0, #5
   d6e02:	f002 fc8d 	bl	d9720 <delay>
    fadeIn(GREEN_LED, fadeDel);
   d6e06:	210a      	movs	r1, #10
   d6e08:	2011      	movs	r0, #17
   d6e0a:	f7ff fe69 	bl	d6ae0 <_Z6fadeInii>
    delay(del);
   d6e0e:	2005      	movs	r0, #5
   d6e10:	f002 fc86 	bl	d9720 <delay>
    fadeIn(YELLOW_LED, fadeDel);
   d6e14:	210a      	movs	r1, #10
   d6e16:	2013      	movs	r0, #19
   d6e18:	f7ff fe62 	bl	d6ae0 <_Z6fadeInii>
    delay(del);
   d6e1c:	2005      	movs	r0, #5
   d6e1e:	f002 fc7f 	bl	d9720 <delay>
    fadeIn(RED_LED, fadeDel);
   d6e22:	210a      	movs	r1, #10
   d6e24:	2010      	movs	r0, #16
   d6e26:	f7ff fe5b 	bl	d6ae0 <_Z6fadeInii>
    delay(del);
   d6e2a:	2005      	movs	r0, #5
   d6e2c:	f002 fc78 	bl	d9720 <delay>

    fadeOut(BLUE_LED, fadeDel);
   d6e30:	210a      	movs	r1, #10
   d6e32:	2012      	movs	r0, #18
   d6e34:	f7ff fe68 	bl	d6b08 <_Z7fadeOutii>
    delay(del);
   d6e38:	2005      	movs	r0, #5
   d6e3a:	f002 fc71 	bl	d9720 <delay>
    fadeOut(GREEN_LED, fadeDel);
   d6e3e:	210a      	movs	r1, #10
   d6e40:	2011      	movs	r0, #17
   d6e42:	f7ff fe61 	bl	d6b08 <_Z7fadeOutii>
    delay(del);
   d6e46:	2005      	movs	r0, #5
   d6e48:	f002 fc6a 	bl	d9720 <delay>
    fadeOut(YELLOW_LED, fadeDel);
   d6e4c:	210a      	movs	r1, #10
   d6e4e:	2013      	movs	r0, #19
   d6e50:	f7ff fe5a 	bl	d6b08 <_Z7fadeOutii>
    delay(del);
   d6e54:	2005      	movs	r0, #5
   d6e56:	f002 fc63 	bl	d9720 <delay>
    fadeOut(RED_LED, fadeDel);
   d6e5a:	210a      	movs	r1, #10
   d6e5c:	2010      	movs	r0, #16
   d6e5e:	f7ff fe53 	bl	d6b08 <_Z7fadeOutii>
    delay(del);
   d6e62:	2005      	movs	r0, #5
   d6e64:	f002 fc5c 	bl	d9720 <delay>
  showingLightAnimation = true;

  setupBackButtonInterrupt();
  toggleAllButtons(LOW);

  while (appmode)
   d6e68:	e7c2      	b.n	d6df0 <_Z13ledPulseChasev+0x1c>
   d6e6a:	bd38      	pop	{r3, r4, r5, pc}
   d6e6c:	2003e208 	.word	0x2003e208
   d6e70:	2003e1f6 	.word	0x2003e1f6
   d6e74:	2003e24d 	.word	0x2003e24d

000d6e78 <_Z8ledPulseb>:
}

void ledPulse(bool showCarousel)
{
  appmode = 1;
  btnid = 0;
   d6e78:	4a0c      	ldr	r2, [pc, #48]	; (d6eac <_Z8ledPulseb+0x34>)
    delay(del);
  }
}

void ledPulse(bool showCarousel)
{
   d6e7a:	b570      	push	{r4, r5, r6, lr}
  appmode = 1;
  btnid = 0;
   d6e7c:	2500      	movs	r5, #0
   d6e7e:	7015      	strb	r5, [r2, #0]
  }
}

void ledPulse(bool showCarousel)
{
  appmode = 1;
   d6e80:	4c0b      	ldr	r4, [pc, #44]	; (d6eb0 <_Z8ledPulseb+0x38>)
  btnid = 0;
  showingLightAnimation = true;
   d6e82:	4a0c      	ldr	r2, [pc, #48]	; (d6eb4 <_Z8ledPulseb+0x3c>)
  }
}

void ledPulse(bool showCarousel)
{
  appmode = 1;
   d6e84:	2301      	movs	r3, #1
    delay(del);
  }
}

void ledPulse(bool showCarousel)
{
   d6e86:	4606      	mov	r6, r0
  appmode = 1;
   d6e88:	7023      	strb	r3, [r4, #0]
  btnid = 0;
  showingLightAnimation = true;
   d6e8a:	7013      	strb	r3, [r2, #0]

  setupBackButtonInterrupt();
   d6e8c:	f7ff fe0e 	bl	d6aac <_Z24setupBackButtonInterruptv>
  toggleAllButtons(LOW);
   d6e90:	4628      	mov	r0, r5
   d6e92:	f7ff fe87 	bl	d6ba4 <_Z16toggleAllButtonsi>

  while (appmode)
   d6e96:	7823      	ldrb	r3, [r4, #0]
   d6e98:	b13b      	cbz	r3, d6eaa <_Z8ledPulseb+0x32>
  {
    if (showCarousel)
   d6e9a:	b10e      	cbz	r6, d6ea0 <_Z8ledPulseb+0x28>
    {
      displayCarousel();
   d6e9c:	f7fe fa78 	bl	d5390 <_Z15displayCarouselv>
    }

    fadeAllIn();
   d6ea0:	f7ff fe44 	bl	d6b2c <_Z9fadeAllInv>
    fadeAllOut();
   d6ea4:	f7ff fe60 	bl	d6b68 <_Z10fadeAllOutv>
  showingLightAnimation = true;

  setupBackButtonInterrupt();
  toggleAllButtons(LOW);

  while (appmode)
   d6ea8:	e7f5      	b.n	d6e96 <_Z8ledPulseb+0x1e>
   d6eaa:	bd70      	pop	{r4, r5, r6, pc}
   d6eac:	2003e208 	.word	0x2003e208
   d6eb0:	2003e1f6 	.word	0x2003e1f6
   d6eb4:	2003e24d 	.word	0x2003e24d

000d6eb8 <_Z9ledRandomv>:
    fadeAllOut();
  }
}

void ledRandom()
{
   d6eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  appmode = 1;
  btnid = 0;
   d6eba:	4a16      	ldr	r2, [pc, #88]	; (d6f14 <_Z9ledRandomv+0x5c>)
  }
}

void ledRandom()
{
  appmode = 1;
   d6ebc:	4c16      	ldr	r4, [pc, #88]	; (d6f18 <_Z9ledRandomv+0x60>)
  btnid = 0;
   d6ebe:	2500      	movs	r5, #0
   d6ec0:	7015      	strb	r5, [r2, #0]
  int r = 0;
  int del = 150;
  showingLightAnimation = true;
   d6ec2:	4a16      	ldr	r2, [pc, #88]	; (d6f1c <_Z9ledRandomv+0x64>)
  }
}

void ledRandom()
{
  appmode = 1;
   d6ec4:	2301      	movs	r3, #1
  btnid = 0;
  int r = 0;
  int del = 150;
  showingLightAnimation = true;
   d6ec6:	7013      	strb	r3, [r2, #0]

  pin_t leds[4] = {RED_LED, BLUE_LED, GREEN_LED, YELLOW_LED};
   d6ec8:	4a15      	ldr	r2, [pc, #84]	; (d6f20 <_Z9ledRandomv+0x68>)
  }
}

void ledRandom()
{
  appmode = 1;
   d6eca:	7023      	strb	r3, [r4, #0]
  btnid = 0;
  int r = 0;
  int del = 150;
  showingLightAnimation = true;

  pin_t leds[4] = {RED_LED, BLUE_LED, GREEN_LED, YELLOW_LED};
   d6ecc:	6810      	ldr	r0, [r2, #0]
   d6ece:	6851      	ldr	r1, [r2, #4]
   d6ed0:	466b      	mov	r3, sp
   d6ed2:	c303      	stmia	r3!, {r0, r1}

  setupBackButtonInterrupt();
   d6ed4:	f7ff fdea 	bl	d6aac <_Z24setupBackButtonInterruptv>
  toggleAllButtons(LOW);
   d6ed8:	4628      	mov	r0, r5
   d6eda:	f7ff fe63 	bl	d6ba4 <_Z16toggleAllButtonsi>

  while (appmode)
   d6ede:	7823      	ldrb	r3, [r4, #0]
   d6ee0:	b1ab      	cbz	r3, d6f0e <_Z9ledRandomv+0x56>
  {
    displayCarousel();
   d6ee2:	f7fe fa55 	bl	d5390 <_Z15displayCarouselv>

    r = random(4);
   d6ee6:	2004      	movs	r0, #4
   d6ee8:	f003 face 	bl	da488 <_Z6randomi>

    analogWrite(leds[r], 255);
   d6eec:	ab02      	add	r3, sp, #8
   d6eee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   d6ef2:	21ff      	movs	r1, #255	; 0xff
   d6ef4:	f830 5c08 	ldrh.w	r5, [r0, #-8]
   d6ef8:	4628      	mov	r0, r5
   d6efa:	f004 fad7 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6efe:	2096      	movs	r0, #150	; 0x96
   d6f00:	f002 fc0e 	bl	d9720 <delay>
    analogWrite(leds[r], 0);
   d6f04:	2100      	movs	r1, #0
   d6f06:	4628      	mov	r0, r5
   d6f08:	f004 fad0 	bl	db4ac <_Z11analogWritetm>
  pin_t leds[4] = {RED_LED, BLUE_LED, GREEN_LED, YELLOW_LED};

  setupBackButtonInterrupt();
  toggleAllButtons(LOW);

  while (appmode)
   d6f0c:	e7e7      	b.n	d6ede <_Z9ledRandomv+0x26>

    analogWrite(leds[r], 255);
    delay(del);
    analogWrite(leds[r], 0);
  }
}
   d6f0e:	b003      	add	sp, #12
   d6f10:	bd30      	pop	{r4, r5, pc}
   d6f12:	bf00      	nop
   d6f14:	2003e208 	.word	0x2003e208
   d6f18:	2003e1f6 	.word	0x2003e1f6
   d6f1c:	2003e24d 	.word	0x2003e24d
   d6f20:	000ddb40 	.word	0x000ddb40

000d6f24 <_Z9ledSeeSawv>:

void ledSeeSaw()
{
  appmode = 1;
  btnid = 0;
   d6f24:	4a25      	ldr	r2, [pc, #148]	; (d6fbc <_Z9ledSeeSawv+0x98>)
    analogWrite(leds[r], 0);
  }
}

void ledSeeSaw()
{
   d6f26:	b538      	push	{r3, r4, r5, lr}
  appmode = 1;
  btnid = 0;
   d6f28:	2500      	movs	r5, #0
   d6f2a:	7015      	strb	r5, [r2, #0]
  }
}

void ledSeeSaw()
{
  appmode = 1;
   d6f2c:	4c24      	ldr	r4, [pc, #144]	; (d6fc0 <_Z9ledSeeSawv+0x9c>)
  btnid = 0;
  int del = 150;
  showingLightAnimation = true;
   d6f2e:	4a25      	ldr	r2, [pc, #148]	; (d6fc4 <_Z9ledSeeSawv+0xa0>)
  }
}

void ledSeeSaw()
{
  appmode = 1;
   d6f30:	2301      	movs	r3, #1
   d6f32:	7023      	strb	r3, [r4, #0]
  btnid = 0;
  int del = 150;
  showingLightAnimation = true;
   d6f34:	7013      	strb	r3, [r2, #0]

  setupBackButtonInterrupt();
   d6f36:	f7ff fdb9 	bl	d6aac <_Z24setupBackButtonInterruptv>
  toggleAllButtons(LOW);
   d6f3a:	4628      	mov	r0, r5
   d6f3c:	f7ff fe32 	bl	d6ba4 <_Z16toggleAllButtonsi>

  while (appmode)
   d6f40:	7823      	ldrb	r3, [r4, #0]
   d6f42:	b3d3      	cbz	r3, d6fba <_Z9ledSeeSawv+0x96>
  {
    displayCarousel();
   d6f44:	f7fe fa24 	bl	d5390 <_Z15displayCarouselv>

    analogWrite(BLUE_LED, 255);
   d6f48:	21ff      	movs	r1, #255	; 0xff
   d6f4a:	2012      	movs	r0, #18
   d6f4c:	f004 faae 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f50:	2096      	movs	r0, #150	; 0x96
   d6f52:	f002 fbe5 	bl	d9720 <delay>
    analogWrite(GREEN_LED, 255);
   d6f56:	21ff      	movs	r1, #255	; 0xff
   d6f58:	2011      	movs	r0, #17
   d6f5a:	f004 faa7 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f5e:	2096      	movs	r0, #150	; 0x96
   d6f60:	f002 fbde 	bl	d9720 <delay>
    analogWrite(YELLOW_LED, 255);
   d6f64:	21ff      	movs	r1, #255	; 0xff
   d6f66:	2013      	movs	r0, #19
   d6f68:	f004 faa0 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f6c:	2096      	movs	r0, #150	; 0x96
   d6f6e:	f002 fbd7 	bl	d9720 <delay>
    analogWrite(RED_LED, 255);
   d6f72:	21ff      	movs	r1, #255	; 0xff
   d6f74:	2010      	movs	r0, #16
   d6f76:	f004 fa99 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f7a:	2096      	movs	r0, #150	; 0x96
   d6f7c:	f002 fbd0 	bl	d9720 <delay>

    analogWrite(RED_LED, 0);
   d6f80:	2100      	movs	r1, #0
   d6f82:	2010      	movs	r0, #16
   d6f84:	f004 fa92 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f88:	2096      	movs	r0, #150	; 0x96
   d6f8a:	f002 fbc9 	bl	d9720 <delay>
    analogWrite(YELLOW_LED, 0);
   d6f8e:	2100      	movs	r1, #0
   d6f90:	2013      	movs	r0, #19
   d6f92:	f004 fa8b 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6f96:	2096      	movs	r0, #150	; 0x96
   d6f98:	f002 fbc2 	bl	d9720 <delay>
    analogWrite(GREEN_LED, 0);
   d6f9c:	2100      	movs	r1, #0
   d6f9e:	2011      	movs	r0, #17
   d6fa0:	f004 fa84 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6fa4:	2096      	movs	r0, #150	; 0x96
   d6fa6:	f002 fbbb 	bl	d9720 <delay>
    analogWrite(BLUE_LED, 0);
   d6faa:	2100      	movs	r1, #0
   d6fac:	2012      	movs	r0, #18
   d6fae:	f004 fa7d 	bl	db4ac <_Z11analogWritetm>
    delay(del);
   d6fb2:	2096      	movs	r0, #150	; 0x96
   d6fb4:	f002 fbb4 	bl	d9720 <delay>
  showingLightAnimation = true;

  setupBackButtonInterrupt();
  toggleAllButtons(LOW);

  while (appmode)
   d6fb8:	e7c2      	b.n	d6f40 <_Z9ledSeeSawv+0x1c>
   d6fba:	bd38      	pop	{r3, r4, r5, pc}
   d6fbc:	2003e208 	.word	0x2003e208
   d6fc0:	2003e1f6 	.word	0x2003e1f6
   d6fc4:	2003e24d 	.word	0x2003e24d

000d6fc8 <_Z16towerFullHandlerPKcS0_>:
  Mesh.connect();
}

void towerFullHandler(const char *event, const char *data)
{
  ledChase();
   d6fc8:	f7ff beb2 	b.w	d6d30 <_Z8ledChasev>

000d6fcc <_Z21towerFullSloMohandlerPKcS0_>:
}

void towerFullSloMohandler(const char *event, const char *data)
{
  // TODO: Replace with slow-mo replay
  ledPulseChase();
   d6fcc:	f7ff bf02 	b.w	d6dd4 <_Z13ledPulseChasev>

000d6fd0 <_Z15meshPingHandlerPKcS0_>:
}

void meshPingHandler(const char *event, const char *data)
{
  displayMeshPing();
   d6fd0:	f7fe bca8 	b.w	d5924 <_Z15displayMeshPingv>

000d6fd4 <_Z17zachButtonHandlerPKcS0_>:
}

void zachButtonHandler(const char *event, const char *data)
{
   d6fd4:	b508      	push	{r3, lr}
  displayHiFromZ();
   d6fd6:	f7fe fcf3 	bl	d59c0 <_Z14displayHiFromZv>
  ledPulse(false);
   d6fda:	2000      	movs	r0, #0
}
   d6fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void zachButtonHandler(const char *event, const char *data)
{
  displayHiFromZ();
  ledPulse(false);
   d6fe0:	f7ff bf4a 	b.w	d6e78 <_Z8ledPulseb>

000d6fe4 <_Z21gatewayPublishHandlerPKcS0_>:
}

void gatewayPublishHandler(const char *event, const char *data)
{
  displayGatewayPing(data);
   d6fe4:	4608      	mov	r0, r1
   d6fe6:	f7fe bcbb 	b.w	d5960 <_Z18displayGatewayPingPKc>

000d6fea <_Z9meshSetupv>:
#include "application.h"
#include "display/display.h"
#include "leds/leds.h"

void meshSetup()
{
   d6fea:	b510      	push	{r4, lr}
};

class MeshClass : public NetworkClass, public MeshPublish {
public:
    void on() {
        network_on(*this, 0, 0, NULL);
   d6fec:	2300      	movs	r3, #0
   d6fee:	461a      	mov	r2, r3
   d6ff0:	4619      	mov	r1, r3
   d6ff2:	4618      	mov	r0, r3
   d6ff4:	f002 fb54 	bl	d96a0 <network_on>
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ff8:	2300      	movs	r3, #0
   d6ffa:	461a      	mov	r2, r3
   d6ffc:	4619      	mov	r1, r3
   d6ffe:	4618      	mov	r0, r3
  Mesh.on();
  Mesh.connect();
}
   d7000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7004:	f002 bb34 	b.w	d9670 <network_connect>

000d7008 <_Z15setupMeshEventsv>:
{
  displayGatewayPing(data);
}

void setupMeshEvents()
{
   d7008:	b510      	push	{r4, lr}
  Mesh.subscribe("tower-full", towerFullHandler);
   d700a:	4c0e      	ldr	r4, [pc, #56]	; (d7044 <_Z15setupMeshEventsv+0x3c>)
   d700c:	4a0e      	ldr	r2, [pc, #56]	; (d7048 <_Z15setupMeshEventsv+0x40>)
   d700e:	490f      	ldr	r1, [pc, #60]	; (d704c <_Z15setupMeshEventsv+0x44>)
   d7010:	4620      	mov	r0, r4
   d7012:	f003 f901 	bl	da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("tower-full-slomo", towerFullSloMohandler);
   d7016:	4a0e      	ldr	r2, [pc, #56]	; (d7050 <_Z15setupMeshEventsv+0x48>)
   d7018:	490e      	ldr	r1, [pc, #56]	; (d7054 <_Z15setupMeshEventsv+0x4c>)
   d701a:	4620      	mov	r0, r4
   d701c:	f003 f8fc 	bl	da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("mesh-ping", meshPingHandler);
   d7020:	4a0d      	ldr	r2, [pc, #52]	; (d7058 <_Z15setupMeshEventsv+0x50>)
   d7022:	490e      	ldr	r1, [pc, #56]	; (d705c <_Z15setupMeshEventsv+0x54>)
   d7024:	4620      	mov	r0, r4
   d7026:	f003 f8f7 	bl	da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
  Mesh.subscribe("zach-button", zachButtonHandler);
   d702a:	4a0d      	ldr	r2, [pc, #52]	; (d7060 <_Z15setupMeshEventsv+0x58>)
   d702c:	490d      	ldr	r1, [pc, #52]	; (d7064 <_Z15setupMeshEventsv+0x5c>)
   d702e:	4620      	mov	r0, r4
   d7030:	f003 f8f2 	bl	da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>

  // Workshop subscriptions
  Mesh.subscribe("gateway-setup-clicked", gatewayPublishHandler);
   d7034:	4620      	mov	r0, r4
   d7036:	4a0c      	ldr	r2, [pc, #48]	; (d7068 <_Z15setupMeshEventsv+0x60>)
   d7038:	490c      	ldr	r1, [pc, #48]	; (d706c <_Z15setupMeshEventsv+0x64>)
}
   d703a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Mesh.subscribe("tower-full-slomo", towerFullSloMohandler);
  Mesh.subscribe("mesh-ping", meshPingHandler);
  Mesh.subscribe("zach-button", zachButtonHandler);

  // Workshop subscriptions
  Mesh.subscribe("gateway-setup-clicked", gatewayPublishHandler);
   d703e:	f003 b8eb 	b.w	da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
   d7042:	bf00      	nop
   d7044:	2003e408 	.word	0x2003e408
   d7048:	000d6fc9 	.word	0x000d6fc9
   d704c:	000ddb48 	.word	0x000ddb48
   d7050:	000d6fcd 	.word	0x000d6fcd
   d7054:	000ddb53 	.word	0x000ddb53
   d7058:	000d6fd1 	.word	0x000d6fd1
   d705c:	000dda7d 	.word	0x000dda7d
   d7060:	000d6fd5 	.word	0x000d6fd5
   d7064:	000dda6a 	.word	0x000dda6a
   d7068:	000d6fe5 	.word	0x000d6fe5
   d706c:	000ddb64 	.word	0x000ddb64

000d7070 <_Z18getMeshNetworkInfov>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7070:	2200      	movs	r2, #0
   d7072:	4611      	mov	r1, r2
   d7074:	4610      	mov	r0, r2
}

void getMeshNetworkInfo()
{
   d7076:	b508      	push	{r3, lr}
   d7078:	f002 fb0a 	bl	d9690 <network_ready>
  if (Mesh.ready())
   d707c:	4602      	mov	r2, r0
   d707e:	b108      	cbz	r0, d7084 <_Z18getMeshNetworkInfov+0x14>
  {
    displayMeshStatus("Active");
   d7080:	4809      	ldr	r0, [pc, #36]	; (d70a8 <_Z18getMeshNetworkInfov+0x38>)
   d7082:	e00b      	b.n	d709c <_Z18getMeshNetworkInfov+0x2c>
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7084:	4601      	mov	r1, r0
   d7086:	f002 fafb 	bl	d9680 <network_connecting>
  }
  else if (Mesh.connecting())
   d708a:	4602      	mov	r2, r0
   d708c:	b108      	cbz	r0, d7092 <_Z18getMeshNetworkInfov+0x22>
  {
    displayMeshStatus("Connecting");
   d708e:	4807      	ldr	r0, [pc, #28]	; (d70ac <_Z18getMeshNetworkInfov+0x3c>)
   d7090:	e004      	b.n	d709c <_Z18getMeshNetworkInfov+0x2c>
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7092:	4601      	mov	r1, r0
   d7094:	f002 fb0c 	bl	d96b0 <network_listening>
  }
  else if (Mesh.listening())
   d7098:	b120      	cbz	r0, d70a4 <_Z18getMeshNetworkInfov+0x34>
  {
    displayMeshStatus("Listening");
   d709a:	4805      	ldr	r0, [pc, #20]	; (d70b0 <_Z18getMeshNetworkInfov+0x40>)
  }
   d709c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  {
    displayMeshStatus("Connecting");
  }
  else if (Mesh.listening())
  {
    displayMeshStatus("Listening");
   d70a0:	f7fe bcbc 	b.w	d5a1c <_Z17displayMeshStatusPKc>
   d70a4:	bd08      	pop	{r3, pc}
   d70a6:	bf00      	nop
   d70a8:	000ddb7a 	.word	0x000ddb7a
   d70ac:	000ddb81 	.word	0x000ddb81
   d70b0:	000ddb8c 	.word	0x000ddb8c
   d70b4:	00000000 	.word	0x00000000

000d70b8 <_Z9playTonesiPKib>:
    NOTE_E4, 0, NOTE_D4, NOTE_E4, NOTE_G4, 0,
    NOTE_D4, NOTE_E4, 0, NOTE_G4, 0, 0,
    NOTE_D4, 0, NOTE_E4, 0, NOTE_G4, 0, NOTE_A4, 0, NOTE_C5, 0};

void playTones(int tonePin, const int tones[], bool lightLEDs)
{
   d70b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d70bc:	4688      	mov	r8, r1
   d70be:	4691      	mov	r9, r2
   d70c0:	460c      	mov	r4, r1
  for (int thisNote = 1; thisNote < (tones[0] * 2 + 1); thisNote = thisNote + 2)
   d70c2:	2501      	movs	r5, #1
    if (lightLEDs)
    {
      changeLED();
    }

    tone(tonePin, tones[thisNote], (1000 / tones[thisNote + 1]));
   d70c4:	b2c6      	uxtb	r6, r0
   d70c6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    NOTE_D4, NOTE_E4, 0, NOTE_G4, 0, 0,
    NOTE_D4, 0, NOTE_E4, 0, NOTE_G4, 0, NOTE_A4, 0, NOTE_C5, 0};

void playTones(int tonePin, const int tones[], bool lightLEDs)
{
  for (int thisNote = 1; thisNote < (tones[0] * 2 + 1); thisNote = thisNote + 2)
   d70ca:	f8d8 3000 	ldr.w	r3, [r8]
   d70ce:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
   d70d2:	dc1f      	bgt.n	d7114 <_Z9playTonesiPKib+0x5c>
  {
    if (lightLEDs)
   d70d4:	f1b9 0f00 	cmp.w	r9, #0
   d70d8:	d001      	beq.n	d70de <_Z9playTonesiPKib+0x26>
    {
      changeLED();
   d70da:	f7ff fe17 	bl	d6d0c <_Z9changeLEDv>
    }

    tone(tonePin, tones[thisNote], (1000 / tones[thisNote + 1]));
   d70de:	68a2      	ldr	r2, [r4, #8]
   d70e0:	6861      	ldr	r1, [r4, #4]
   d70e2:	fb97 f2f2 	sdiv	r2, r7, r2
   d70e6:	4630      	mov	r0, r6
   d70e8:	f003 fbf8 	bl	da8dc <tone>
    delay((1000 / tones[thisNote + 1]) * 1.30);
   d70ec:	f854 0f08 	ldr.w	r0, [r4, #8]!
   d70f0:	fb97 f0f0 	sdiv	r0, r7, r0
   d70f4:	f004 fd1c 	bl	dbb30 <__aeabi_i2d>
   d70f8:	a307      	add	r3, pc, #28	; (adr r3, d7118 <_Z9playTonesiPKib+0x60>)
   d70fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d70fe:	f004 fd7d 	bl	dbbfc <__aeabi_dmul>
   d7102:	f005 f83d 	bl	dc180 <__aeabi_d2uiz>
   d7106:	f002 fb0b 	bl	d9720 <delay>
    noTone(tonePin);
   d710a:	4630      	mov	r0, r6
   d710c:	f003 fbfd 	bl	da90a <noTone>
    NOTE_D4, NOTE_E4, 0, NOTE_G4, 0, 0,
    NOTE_D4, 0, NOTE_E4, 0, NOTE_G4, 0, NOTE_A4, 0, NOTE_C5, 0};

void playTones(int tonePin, const int tones[], bool lightLEDs)
{
  for (int thisNote = 1; thisNote < (tones[0] * 2 + 1); thisNote = thisNote + 2)
   d7110:	3502      	adds	r5, #2
   d7112:	e7da      	b.n	d70ca <_Z9playTonesiPKib+0x12>
   d7114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d7118:	cccccccd 	.word	0xcccccccd
   d711c:	3ff4cccc 	.word	0x3ff4cccc

000d7120 <_Z11playStartupib>:
  }
}

void playStartup(int tonePin, bool lightLEDs)
{
  playTones(tonePin, notes_MarioStartup, lightLEDs);
   d7120:	460a      	mov	r2, r1
   d7122:	4901      	ldr	r1, [pc, #4]	; (d7128 <_Z11playStartupib+0x8>)
   d7124:	f7ff bfc8 	b.w	d70b8 <_Z9playTonesiPKib>
   d7128:	000ddc94 	.word	0x000ddc94

000d712c <_Z12playGameOverib>:
}

void playGameOver(int tonePin, bool lightLEDs)
{
  playTones(tonePin, notes_MarioGameOver, lightLEDs);
   d712c:	460a      	mov	r2, r1
   d712e:	4901      	ldr	r1, [pc, #4]	; (d7134 <_Z12playGameOverib+0x8>)
   d7130:	f7ff bfc2 	b.w	d70b8 <_Z9playTonesiPKib>
   d7134:	000ddb98 	.word	0x000ddb98

000d7138 <_Z11playBeegeesv>:
}

void playBeegees()
{
   d7138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE); // Turn on the other LEDs until you release button
   d713a:	2007      	movs	r0, #7
   d713c:	f7ff fd9e 	bl	d6c7c <_Z7setLEDsh>

  setLEDs(CHOICE_NONE); // Turn off LEDs
   d7140:	2000      	movs	r0, #0
   d7142:	f7ff fd9b 	bl	d6c7c <_Z7setLEDsh>
  {
    // iterate over the notes of the melody:
    for (int thisNote = 0; thisNote < 32; thisNote++)
    {
      changeLED();
      tone(BUZZER_PIN, beegeesMelody[thisNote], noteDuration);
   d7146:	4e14      	ldr	r6, [pc, #80]	; (d7198 <_Z11playBeegeesv+0x60>)

void playBeegees()
{
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE); // Turn on the other LEDs until you release button

  setLEDs(CHOICE_NONE); // Turn off LEDs
   d7148:	2402      	movs	r4, #2
  {
    // iterate over the notes of the melody:
    for (int thisNote = 0; thisNote < 32; thisNote++)
    {
      changeLED();
      tone(BUZZER_PIN, beegeesMelody[thisNote], noteDuration);
   d714a:	4f14      	ldr	r7, [pc, #80]	; (d719c <_Z11playBeegeesv+0x64>)

void playBeegees()
{
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE); // Turn on the other LEDs until you release button

  setLEDs(CHOICE_NONE); // Turn off LEDs
   d714c:	2500      	movs	r5, #0
  for (int i = 0; i < 2; i++)
  {
    // iterate over the notes of the melody:
    for (int thisNote = 0; thisNote < 32; thisNote++)
    {
      changeLED();
   d714e:	f7ff fddd 	bl	d6d0c <_Z9changeLEDv>
      tone(BUZZER_PIN, beegeesMelody[thisNote], noteDuration);
   d7152:	6832      	ldr	r2, [r6, #0]
   d7154:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   d7158:	2008      	movs	r0, #8
   d715a:	f003 fbbf 	bl	da8dc <tone>
      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
   d715e:	6830      	ldr	r0, [r6, #0]
   d7160:	f004 fce6 	bl	dbb30 <__aeabi_i2d>
   d7164:	a30a      	add	r3, pc, #40	; (adr r3, d7190 <_Z11playBeegeesv+0x58>)
   d7166:	e9d3 2300 	ldrd	r2, r3, [r3]
   d716a:	f004 fd47 	bl	dbbfc <__aeabi_dmul>
   d716e:	f004 ffdf 	bl	dc130 <__aeabi_d2iz>
   d7172:	f002 fad5 	bl	d9720 <delay>
  setLEDs(CHOICE_NONE); // Turn off LEDs

  for (int i = 0; i < 2; i++)
  {
    // iterate over the notes of the melody:
    for (int thisNote = 0; thisNote < 32; thisNote++)
   d7176:	3501      	adds	r5, #1
      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
      // stop the tone playing:
      noTone(BUZZER_PIN);
   d7178:	2008      	movs	r0, #8
   d717a:	f003 fbc6 	bl	da90a <noTone>
  setLEDs(CHOICE_NONE); // Turn off LEDs

  for (int i = 0; i < 2; i++)
  {
    // iterate over the notes of the melody:
    for (int thisNote = 0; thisNote < 32; thisNote++)
   d717e:	2d20      	cmp	r5, #32
   d7180:	d1e5      	bne.n	d714e <_Z11playBeegeesv+0x16>
{
  setLEDs(CHOICE_RED | CHOICE_GREEN | CHOICE_BLUE); // Turn on the other LEDs until you release button

  setLEDs(CHOICE_NONE); // Turn off LEDs

  for (int i = 0; i < 2; i++)
   d7182:	3c01      	subs	r4, #1
   d7184:	d1e1      	bne.n	d714a <_Z11playBeegeesv+0x12>
      // stop the tone playing:
      noTone(BUZZER_PIN);
    }
  }

  setLEDs(CHOICE_NONE);
   d7186:	4620      	mov	r0, r4
}
   d7188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      // stop the tone playing:
      noTone(BUZZER_PIN);
    }
  }

  setLEDs(CHOICE_NONE);
   d718c:	f7ff bd76 	b.w	d6c7c <_Z7setLEDsh>
   d7190:	cccccccd 	.word	0xcccccccd
   d7194:	3ff4cccc 	.word	0x3ff4cccc
   d7198:	2003d848 	.word	0x2003d848
   d719c:	000ddc14 	.word	0x000ddc14

000d71a0 <_Z10buzz_soundii>:
}

// Toggle buzzer every buzz_delay_us, for a duration of buzz_length_ms.
void buzz_sound(int buzz_length_ms, int buzz_delay_us)
{
   d71a0:	b510      	push	{r4, lr}
  tone(BUZZER_PIN, buzz_delay_us, buzz_length_ms);
   d71a2:	4602      	mov	r2, r0
  setLEDs(CHOICE_NONE);
}

// Toggle buzzer every buzz_delay_us, for a duration of buzz_length_ms.
void buzz_sound(int buzz_length_ms, int buzz_delay_us)
{
   d71a4:	4604      	mov	r4, r0
  tone(BUZZER_PIN, buzz_delay_us, buzz_length_ms);
   d71a6:	2008      	movs	r0, #8
   d71a8:	f003 fb98 	bl	da8dc <tone>
  delay(buzz_length_ms);
   d71ac:	4620      	mov	r0, r4
   d71ae:	f002 fab7 	bl	d9720 <delay>
  noTone(BUZZER_PIN);
   d71b2:	2008      	movs	r0, #8
}
   d71b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Toggle buzzer every buzz_delay_us, for a duration of buzz_length_ms.
void buzz_sound(int buzz_length_ms, int buzz_delay_us)
{
  tone(BUZZER_PIN, buzz_delay_us, buzz_length_ms);
  delay(buzz_length_ms);
  noTone(BUZZER_PIN);
   d71b8:	f003 bba7 	b.w	da90a <noTone>

000d71bc <_Z12setupDisplayv>:
    play();
  }
}

void setupDisplay()
{
   d71bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.clearDisplay();
   d71be:	4c11      	ldr	r4, [pc, #68]	; (d7204 <_Z12setupDisplayv+0x48>)
   d71c0:	4620      	mov	r0, r4
   d71c2:	f001 fc3d 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d71c6:	4620      	mov	r0, r4
   d71c8:	f001 fbc4 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.setCursor(0, 0);
   d71cc:	2200      	movs	r2, #0
   d71ce:	4611      	mov	r1, r2
   d71d0:	4620      	mov	r0, r4
   d71d2:	f001 f802 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
   d71d6:	2180      	movs	r1, #128	; 0x80
   d71d8:	2230      	movs	r2, #48	; 0x30
   d71da:	2301      	movs	r3, #1
   d71dc:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d71e0:	4620      	mov	r0, r4
   d71e2:	4b09      	ldr	r3, [pc, #36]	; (d7208 <_Z12setupDisplayv+0x4c>)
   d71e4:	2210      	movs	r2, #16
   d71e6:	2100      	movs	r1, #0
   d71e8:	f000 feea 	bl	d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   d71ec:	4620      	mov	r0, r4
   d71ee:	f001 fbb1 	bl	d8954 <_ZN16Adafruit_SSD13067displayEv>
  display.startscrollleft(0x00, 0x0F);
   d71f2:	220f      	movs	r2, #15
   d71f4:	2100      	movs	r1, #0
   d71f6:	4620      	mov	r0, r4
}
   d71f8:	b004      	add	sp, #16
   d71fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.clearDisplay();
  display.display();
  display.setCursor(0, 0);
  display.drawBitmap(0, 16, sparkLogo, 128, 48, 1);
  display.display();
  display.startscrollleft(0x00, 0x0F);
   d71fe:	f001 bb26 	b.w	d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>
   d7202:	bf00      	nop
   d7204:	2003e1c8 	.word	0x2003e1c8
   d7208:	000ddcf0 	.word	0x000ddcf0

000d720c <_Z4playv>:
}

void play()
{
   d720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int notelength;
  if (a == 1 || a == 2)
   d720e:	4d4f      	ldr	r5, [pc, #316]	; (d734c <_Z4playv+0x140>)
   d7210:	682b      	ldr	r3, [r5, #0]
   d7212:	1e5a      	subs	r2, r3, #1
   d7214:	2a01      	cmp	r2, #1
   d7216:	d81d      	bhi.n	d7254 <_Z4playv+0x48>
  { // Intro
    // intro
    notelength = beatlength * song1_intro_rhythmn[b];
   d7218:	4e4d      	ldr	r6, [pc, #308]	; (d7350 <_Z4playv+0x144>)
   d721a:	494e      	ldr	r1, [pc, #312]	; (d7354 <_Z4playv+0x148>)
   d721c:	6833      	ldr	r3, [r6, #0]
    if (song1_intro_melody[b] > 0)
   d721e:	4f4e      	ldr	r7, [pc, #312]	; (d7358 <_Z4playv+0x14c>)
{
  int notelength;
  if (a == 1 || a == 2)
  { // Intro
    // intro
    notelength = beatlength * song1_intro_rhythmn[b];
   d7220:	4a4e      	ldr	r2, [pc, #312]	; (d735c <_Z4playv+0x150>)
   d7222:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    if (song1_intro_melody[b] > 0)
   d7226:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
{
  int notelength;
  if (a == 1 || a == 2)
  { // Intro
    // intro
    notelength = beatlength * song1_intro_rhythmn[b];
   d722a:	6812      	ldr	r2, [r2, #0]
    if (song1_intro_melody[b] > 0)
   d722c:	2b00      	cmp	r3, #0
{
  int notelength;
  if (a == 1 || a == 2)
  { // Intro
    // intro
    notelength = beatlength * song1_intro_rhythmn[b];
   d722e:	fb04 f402 	mul.w	r4, r4, r2
    if (song1_intro_melody[b] > 0)
   d7232:	dd0a      	ble.n	d724a <_Z4playv+0x3e>
    { // if not a rest, play note
      analogWrite(RED_LED, 255);
   d7234:	21ff      	movs	r1, #255	; 0xff
   d7236:	2010      	movs	r0, #16
   d7238:	f004 f938 	bl	db4ac <_Z11analogWritetm>
      tone(BUZZER_PIN, song1_intro_melody[b], notelength);
   d723c:	6833      	ldr	r3, [r6, #0]
   d723e:	4622      	mov	r2, r4
   d7240:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   d7244:	2008      	movs	r0, #8
   d7246:	f003 fb49 	bl	da8dc <tone>
    }
    b++;
   d724a:	6833      	ldr	r3, [r6, #0]
   d724c:	3301      	adds	r3, #1
   d724e:	6033      	str	r3, [r6, #0]
    if (b >= sizeof(song1_intro_melody) / sizeof(int))
   d7250:	2b0c      	cmp	r3, #12
   d7252:	e04a      	b.n	d72ea <_Z4playv+0xde>
      a++;
      b = 0;
      c = 0;
    }
  }
  else if (a == 3 || a == 5)
   d7254:	2b03      	cmp	r3, #3
   d7256:	d001      	beq.n	d725c <_Z4playv+0x50>
   d7258:	2b05      	cmp	r3, #5
   d725a:	d121      	bne.n	d72a0 <_Z4playv+0x94>
  { // Verse 1
    // verse
    notelength = beatlength * 2 * song1_verse1_rhythmn[b];
   d725c:	4b3f      	ldr	r3, [pc, #252]	; (d735c <_Z4playv+0x150>)
   d725e:	4e3c      	ldr	r6, [pc, #240]	; (d7350 <_Z4playv+0x144>)
   d7260:	681c      	ldr	r4, [r3, #0]
   d7262:	6832      	ldr	r2, [r6, #0]
   d7264:	493e      	ldr	r1, [pc, #248]	; (d7360 <_Z4playv+0x154>)
    if (song1_verse1_melody[b] > 0)
   d7266:	4f3f      	ldr	r7, [pc, #252]	; (d7364 <_Z4playv+0x158>)
    }
  }
  else if (a == 3 || a == 5)
  { // Verse 1
    // verse
    notelength = beatlength * 2 * song1_verse1_rhythmn[b];
   d7268:	0063      	lsls	r3, r4, #1
   d726a:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
   d726e:	435c      	muls	r4, r3
    if (song1_verse1_melody[b] > 0)
   d7270:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   d7274:	2b00      	cmp	r3, #0
   d7276:	dd0e      	ble.n	d7296 <_Z4playv+0x8a>
    {
      analogWrite(BLUE_LED, 255);
   d7278:	21ff      	movs	r1, #255	; 0xff
   d727a:	2012      	movs	r0, #18
   d727c:	f004 f916 	bl	db4ac <_Z11analogWritetm>
      tone(BUZZER_PIN, song1_verse1_melody[b], notelength);
   d7280:	6833      	ldr	r3, [r6, #0]
   d7282:	4622      	mov	r2, r4
   d7284:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   d7288:	2008      	movs	r0, #8
   d728a:	f003 fb27 	bl	da8dc <tone>
      c++;
   d728e:	4a36      	ldr	r2, [pc, #216]	; (d7368 <_Z4playv+0x15c>)
   d7290:	6813      	ldr	r3, [r2, #0]
   d7292:	3301      	adds	r3, #1
   d7294:	6013      	str	r3, [r2, #0]
    }
    b++;
   d7296:	6833      	ldr	r3, [r6, #0]
   d7298:	3301      	adds	r3, #1
   d729a:	6033      	str	r3, [r6, #0]
    if (b >= sizeof(song1_verse1_melody) / sizeof(int))
   d729c:	2b3e      	cmp	r3, #62	; 0x3e
   d729e:	e024      	b.n	d72ea <_Z4playv+0xde>
      a++;
      b = 0;
      c = 0;
    }
  }
  else if (a == 4 || a == 6)
   d72a0:	f023 0302 	bic.w	r3, r3, #2
   d72a4:	2b04      	cmp	r3, #4
   d72a6:	d129      	bne.n	d72fc <_Z4playv+0xf0>
  { //chorus
    // chorus
    notelength = beatlength * song1_chorus_rhythmn[b];
   d72a8:	4e29      	ldr	r6, [pc, #164]	; (d7350 <_Z4playv+0x144>)
   d72aa:	4930      	ldr	r1, [pc, #192]	; (d736c <_Z4playv+0x160>)
   d72ac:	6833      	ldr	r3, [r6, #0]
    if (song1_chorus_melody[b] > 0)
   d72ae:	4f30      	ldr	r7, [pc, #192]	; (d7370 <_Z4playv+0x164>)
    }
  }
  else if (a == 4 || a == 6)
  { //chorus
    // chorus
    notelength = beatlength * song1_chorus_rhythmn[b];
   d72b0:	4a2a      	ldr	r2, [pc, #168]	; (d735c <_Z4playv+0x150>)
   d72b2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    if (song1_chorus_melody[b] > 0)
   d72b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    }
  }
  else if (a == 4 || a == 6)
  { //chorus
    // chorus
    notelength = beatlength * song1_chorus_rhythmn[b];
   d72ba:	6812      	ldr	r2, [r2, #0]
    if (song1_chorus_melody[b] > 0)
   d72bc:	2b00      	cmp	r3, #0
    }
  }
  else if (a == 4 || a == 6)
  { //chorus
    // chorus
    notelength = beatlength * song1_chorus_rhythmn[b];
   d72be:	fb04 f402 	mul.w	r4, r4, r2
    if (song1_chorus_melody[b] > 0)
   d72c2:	dd0e      	ble.n	d72e2 <_Z4playv+0xd6>
    {
      analogWrite(GREEN_LED, 255);
   d72c4:	21ff      	movs	r1, #255	; 0xff
   d72c6:	2011      	movs	r0, #17
   d72c8:	f004 f8f0 	bl	db4ac <_Z11analogWritetm>
      tone(BUZZER_PIN, song1_chorus_melody[b], notelength);
   d72cc:	6833      	ldr	r3, [r6, #0]
   d72ce:	4622      	mov	r2, r4
   d72d0:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   d72d4:	2008      	movs	r0, #8
   d72d6:	f003 fb01 	bl	da8dc <tone>
      c++;
   d72da:	4a23      	ldr	r2, [pc, #140]	; (d7368 <_Z4playv+0x15c>)
   d72dc:	6813      	ldr	r3, [r2, #0]
   d72de:	3301      	adds	r3, #1
   d72e0:	6013      	str	r3, [r2, #0]
    }
    b++;
   d72e2:	6833      	ldr	r3, [r6, #0]
   d72e4:	3301      	adds	r3, #1
   d72e6:	6033      	str	r3, [r6, #0]
    if (b >= sizeof(song1_chorus_melody) / sizeof(int))
   d72e8:	2b3a      	cmp	r3, #58	; 0x3a
   d72ea:	d907      	bls.n	d72fc <_Z4playv+0xf0>
    {
      a++;
   d72ec:	682b      	ldr	r3, [r5, #0]
      b = 0;
   d72ee:	4a18      	ldr	r2, [pc, #96]	; (d7350 <_Z4playv+0x144>)
      c++;
    }
    b++;
    if (b >= sizeof(song1_chorus_melody) / sizeof(int))
    {
      a++;
   d72f0:	3301      	adds	r3, #1
   d72f2:	602b      	str	r3, [r5, #0]
      b = 0;
   d72f4:	2300      	movs	r3, #0
   d72f6:	6013      	str	r3, [r2, #0]
      c = 0;
   d72f8:	4a1b      	ldr	r2, [pc, #108]	; (d7368 <_Z4playv+0x15c>)
   d72fa:	6013      	str	r3, [r2, #0]
    }
  }
  delay(notelength); // necessary because BUZZER_PIN is on independent timer
   d72fc:	4620      	mov	r0, r4
   d72fe:	f002 fa0f 	bl	d9720 <delay>
  noTone(BUZZER_PIN);
   d7302:	2008      	movs	r0, #8
   d7304:	f003 fb01 	bl	da90a <noTone>
  analogWrite(RED_LED, 0);
   d7308:	2100      	movs	r1, #0
   d730a:	2010      	movs	r0, #16
   d730c:	f004 f8ce 	bl	db4ac <_Z11analogWritetm>
  analogWrite(BLUE_LED, 0);
   d7310:	2100      	movs	r1, #0
   d7312:	2012      	movs	r0, #18
   d7314:	f004 f8ca 	bl	db4ac <_Z11analogWritetm>
  analogWrite(GREEN_LED, 0);
   d7318:	2100      	movs	r1, #0
   d731a:	2011      	movs	r0, #17
   d731c:	f004 f8c6 	bl	db4ac <_Z11analogWritetm>
  delay(notelength * beatseparationconstant); // create separation between notes
   d7320:	4b14      	ldr	r3, [pc, #80]	; (d7374 <_Z4playv+0x168>)
   d7322:	ee07 4a90 	vmov	s15, r4
   d7326:	ed93 7a00 	vldr	s14, [r3]
   d732a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d732e:	ee67 7a87 	vmul.f32	s15, s15, s14
   d7332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   d7336:	ee17 0a90 	vmov	r0, s15
   d733a:	f002 f9f1 	bl	d9720 <delay>
  if (a == 7)
   d733e:	682b      	ldr	r3, [r5, #0]
   d7340:	2b07      	cmp	r3, #7
  { // loop back around to beginning of song
    a = 1;
   d7342:	bf02      	ittt	eq
   d7344:	4b01      	ldreq	r3, [pc, #4]	; (d734c <_Z4playv+0x140>)
   d7346:	2201      	moveq	r2, #1
   d7348:	601a      	streq	r2, [r3, #0]
   d734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d734c:	2003db34 	.word	0x2003db34
   d7350:	2003e314 	.word	0x2003e314
   d7354:	2003db70 	.word	0x2003db70
   d7358:	2003db38 	.word	0x2003db38
   d735c:	2003db6c 	.word	0x2003db6c
   d7360:	2003da38 	.word	0x2003da38
   d7364:	2003d93c 	.word	0x2003d93c
   d7368:	2003e318 	.word	0x2003e318
   d736c:	2003d84c 	.word	0x2003d84c
   d7370:	2003dba4 	.word	0x2003dba4
   d7374:	2003d938 	.word	0x2003d938

000d7378 <_Z8playRollv>:

void play();
void setupDisplay();

void playRoll()
{
   d7378:	b538      	push	{r3, r4, r5, lr}
  appmode = 1;
   d737a:	4c08      	ldr	r4, [pc, #32]	; (d739c <_Z8playRollv+0x24>)
   d737c:	2301      	movs	r3, #1
   d737e:	7023      	strb	r3, [r4, #0]
  btnid = 0;
   d7380:	4b07      	ldr	r3, [pc, #28]	; (d73a0 <_Z8playRollv+0x28>)
   d7382:	2500      	movs	r5, #0
   d7384:	701d      	strb	r5, [r3, #0]

  setupDisplay();
   d7386:	f7ff ff19 	bl	d71bc <_Z12setupDisplayv>
  toggleAllButtons(LOW);
   d738a:	4628      	mov	r0, r5
   d738c:	f7ff fc0a 	bl	d6ba4 <_Z16toggleAllButtonsi>

  // play next step in song
  while (appmode)
   d7390:	7823      	ldrb	r3, [r4, #0]
   d7392:	b113      	cbz	r3, d739a <_Z8playRollv+0x22>
  {
    play();
   d7394:	f7ff ff3a 	bl	d720c <_Z4playv>

  setupDisplay();
  toggleAllButtons(LOW);

  // play next step in song
  while (appmode)
   d7398:	e7fa      	b.n	d7390 <_Z8playRollv+0x18>
   d739a:	bd38      	pop	{r3, r4, r5, pc}
   d739c:	2003e1f6 	.word	0x2003e1f6
   d73a0:	2003e208 	.word	0x2003e208
   d73a4:	00000000 	.word	0x00000000

000d73a8 <_Z18getTempAndHumidityv>:
extern bool displayingTemp;
extern bool displayingBattery;

// Get temp and humidity from the sensors
void getTempAndHumidity()
{
   d73a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int prevTemp = currentTemp;
   d73ac:	4c40      	ldr	r4, [pc, #256]	; (d74b0 <_Z18getTempAndHumidityv+0x108>)
  int prevHumidity = currentHumidity;
   d73ae:	4d41      	ldr	r5, [pc, #260]	; (d74b4 <_Z18getTempAndHumidityv+0x10c>)

  currentTemp = round((envSensor.readTemperature() * 1.8 + 32.00) * 10) / 10;
   d73b0:	4841      	ldr	r0, [pc, #260]	; (d74b8 <_Z18getTempAndHumidityv+0x110>)
extern bool displayingBattery;

// Get temp and humidity from the sensors
void getTempAndHumidity()
{
  int prevTemp = currentTemp;
   d73b2:	f8d4 9000 	ldr.w	r9, [r4]
  int prevHumidity = currentHumidity;
   d73b6:	f8d5 8000 	ldr.w	r8, [r5]
extern bool displayingTemp;
extern bool displayingBattery;

// Get temp and humidity from the sensors
void getTempAndHumidity()
{
   d73ba:	ed2d 8b02 	vpush	{d8}
  int prevTemp = currentTemp;
  int prevHumidity = currentHumidity;

  currentTemp = round((envSensor.readTemperature() * 1.8 + 32.00) * 10) / 10;
   d73be:	f001 fb97 	bl	d8af0 <_ZN15Adafruit_Si702115readTemperatureEv>
   d73c2:	ee10 0a10 	vmov	r0, s0
   d73c6:	f004 fbc5 	bl	dbb54 <__aeabi_f2d>
   d73ca:	a337      	add	r3, pc, #220	; (adr r3, d74a8 <_Z18getTempAndHumidityv+0x100>)
   d73cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d73d0:	f004 fc14 	bl	dbbfc <__aeabi_dmul>
   d73d4:	2200      	movs	r2, #0
   d73d6:	4b39      	ldr	r3, [pc, #228]	; (d74bc <_Z18getTempAndHumidityv+0x114>)
   d73d8:	f004 fa5e 	bl	db898 <__adddf3>
   d73dc:	2200      	movs	r2, #0
   d73de:	4b38      	ldr	r3, [pc, #224]	; (d74c0 <_Z18getTempAndHumidityv+0x118>)
   d73e0:	f004 fc0c 	bl	dbbfc <__aeabi_dmul>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d73e4:	2200      	movs	r2, #0
   d73e6:	2300      	movs	r3, #0
   d73e8:	4606      	mov	r6, r0
   d73ea:	460f      	mov	r7, r1
   d73ec:	f004 fe8c 	bl	dc108 <__aeabi_dcmpge>
   d73f0:	2200      	movs	r2, #0
   d73f2:	4b34      	ldr	r3, [pc, #208]	; (d74c4 <_Z18getTempAndHumidityv+0x11c>)
   d73f4:	b120      	cbz	r0, d7400 <_Z18getTempAndHumidityv+0x58>
   d73f6:	4630      	mov	r0, r6
   d73f8:	4639      	mov	r1, r7
   d73fa:	f004 fa4d 	bl	db898 <__adddf3>
   d73fe:	e003      	b.n	d7408 <_Z18getTempAndHumidityv+0x60>
   d7400:	4630      	mov	r0, r6
   d7402:	4639      	mov	r1, r7
   d7404:	f004 fa46 	bl	db894 <__aeabi_dsub>
   d7408:	f004 fe92 	bl	dc130 <__aeabi_d2iz>
   d740c:	f004 fb90 	bl	dbb30 <__aeabi_i2d>
   d7410:	2200      	movs	r2, #0
   d7412:	4b2b      	ldr	r3, [pc, #172]	; (d74c0 <_Z18getTempAndHumidityv+0x118>)
   d7414:	f004 fd1c 	bl	dbe50 <__aeabi_ddiv>
   d7418:	f004 fe8a 	bl	dc130 <__aeabi_d2iz>
   d741c:	6020      	str	r0, [r4, #0]
  currentHumidity = round(envSensor.readHumidity() * 10) / 10;
   d741e:	4826      	ldr	r0, [pc, #152]	; (d74b8 <_Z18getTempAndHumidityv+0x110>)
   d7420:	f001 fb20 	bl	d8a64 <_ZN15Adafruit_Si702112readHumidityEv>
   d7424:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d7428:	ee20 0a27 	vmul.f32	s0, s0, s15
   d742c:	eeb0 8a67 	vmov.f32	s16, s15
   d7430:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d7434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d7438:	ee10 0a10 	vmov	r0, s0
   d743c:	db06      	blt.n	d744c <_Z18getTempAndHumidityv+0xa4>
   d743e:	f004 fb89 	bl	dbb54 <__aeabi_f2d>
   d7442:	2200      	movs	r2, #0
   d7444:	4b1f      	ldr	r3, [pc, #124]	; (d74c4 <_Z18getTempAndHumidityv+0x11c>)
   d7446:	f004 fa27 	bl	db898 <__adddf3>
   d744a:	e005      	b.n	d7458 <_Z18getTempAndHumidityv+0xb0>
   d744c:	f004 fb82 	bl	dbb54 <__aeabi_f2d>
   d7450:	2200      	movs	r2, #0
   d7452:	4b1c      	ldr	r3, [pc, #112]	; (d74c4 <_Z18getTempAndHumidityv+0x11c>)
   d7454:	f004 fa1e 	bl	db894 <__aeabi_dsub>
   d7458:	f004 fe6a 	bl	dc130 <__aeabi_d2iz>
   d745c:	ee07 0a90 	vmov	s15, r0
   d7460:	eeb8 7ae7 	vcvt.f32.s32	s14, s15

  fireEnvSensorsEvent(currentTemp, currentHumidity);
   d7464:	6820      	ldr	r0, [r4, #0]
{
  int prevTemp = currentTemp;
  int prevHumidity = currentHumidity;

  currentTemp = round((envSensor.readTemperature() * 1.8 + 32.00) * 10) / 10;
  currentHumidity = round(envSensor.readHumidity() * 10) / 10;
   d7466:	eec7 7a08 	vdiv.f32	s15, s14, s16
   d746a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d746e:	ee17 1a90 	vmov	r1, s15
   d7472:	edc5 7a00 	vstr	s15, [r5]

  fireEnvSensorsEvent(currentTemp, currentHumidity);
   d7476:	f7fe fba5 	bl	d5bc4 <_Z19fireEnvSensorsEventii>

  // If either has changed and these values are being displayed, update the display
  if (displayingTemp && (prevTemp != currentTemp || prevHumidity != currentHumidity))
   d747a:	4b13      	ldr	r3, [pc, #76]	; (d74c8 <_Z18getTempAndHumidityv+0x120>)
   d747c:	781b      	ldrb	r3, [r3, #0]
   d747e:	b16b      	cbz	r3, d749c <_Z18getTempAndHumidityv+0xf4>
   d7480:	4b0b      	ldr	r3, [pc, #44]	; (d74b0 <_Z18getTempAndHumidityv+0x108>)
   d7482:	681b      	ldr	r3, [r3, #0]
   d7484:	4599      	cmp	r9, r3
   d7486:	d103      	bne.n	d7490 <_Z18getTempAndHumidityv+0xe8>
   d7488:	4b0a      	ldr	r3, [pc, #40]	; (d74b4 <_Z18getTempAndHumidityv+0x10c>)
   d748a:	681b      	ldr	r3, [r3, #0]
   d748c:	4598      	cmp	r8, r3
   d748e:	d005      	beq.n	d749c <_Z18getTempAndHumidityv+0xf4>
  {
    showTempAndHumidity();
  }
}
   d7490:	ecbd 8b02 	vpop	{d8}
   d7494:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  fireEnvSensorsEvent(currentTemp, currentHumidity);

  // If either has changed and these values are being displayed, update the display
  if (displayingTemp && (prevTemp != currentTemp || prevHumidity != currentHumidity))
  {
    showTempAndHumidity();
   d7498:	f7fe b83a 	b.w	d5510 <_Z19showTempAndHumidityv>
  }
}
   d749c:	ecbd 8b02 	vpop	{d8}
   d74a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d74a4:	f3af 8000 	nop.w
   d74a8:	cccccccd 	.word	0xcccccccd
   d74ac:	3ffccccc 	.word	0x3ffccccc
   d74b0:	2003e1ac 	.word	0x2003e1ac
   d74b4:	2003e130 	.word	0x2003e130
   d74b8:	2003e134 	.word	0x2003e134
   d74bc:	40400000 	.word	0x40400000
   d74c0:	40240000 	.word	0x40240000
   d74c4:	3fe00000 	.word	0x3fe00000
   d74c8:	2003e244 	.word	0x2003e244

000d74cc <_Z17getBatteryReadingv>:

void getBatteryReading()
{
   d74cc:	b538      	push	{r3, r4, r5, lr}
  int prevBattery = currentBatteryReading;
   d74ce:	4c15      	ldr	r4, [pc, #84]	; (d7524 <_Z17getBatteryReadingv+0x58>)

  currentBatteryReading = round(analogRead(BATT) * 100 / 4095);
   d74d0:	2018      	movs	r0, #24
  }
}

void getBatteryReading()
{
  int prevBattery = currentBatteryReading;
   d74d2:	6825      	ldr	r5, [r4, #0]

  currentBatteryReading = round(analogRead(BATT) * 100 / 4095);
   d74d4:	f003 ffd3 	bl	db47e <analogRead>
   d74d8:	2364      	movs	r3, #100	; 0x64
   d74da:	4358      	muls	r0, r3
   d74dc:	f640 73ff 	movw	r3, #4095	; 0xfff
   d74e0:	fb90 f0f3 	sdiv	r0, r0, r3
   d74e4:	2800      	cmp	r0, #0
   d74e6:	db06      	blt.n	d74f6 <_Z17getBatteryReadingv+0x2a>
   d74e8:	f004 fb22 	bl	dbb30 <__aeabi_i2d>
   d74ec:	2200      	movs	r2, #0
   d74ee:	4b0e      	ldr	r3, [pc, #56]	; (d7528 <_Z17getBatteryReadingv+0x5c>)
   d74f0:	f004 f9d2 	bl	db898 <__adddf3>
   d74f4:	e005      	b.n	d7502 <_Z17getBatteryReadingv+0x36>
   d74f6:	f004 fb1b 	bl	dbb30 <__aeabi_i2d>
   d74fa:	2200      	movs	r2, #0
   d74fc:	4b0a      	ldr	r3, [pc, #40]	; (d7528 <_Z17getBatteryReadingv+0x5c>)
   d74fe:	f004 f9c9 	bl	db894 <__aeabi_dsub>
   d7502:	f004 fe15 	bl	dc130 <__aeabi_d2iz>
   d7506:	6020      	str	r0, [r4, #0]

  fireBatteryEvent(currentBatteryReading);
   d7508:	f7fe fba0 	bl	d5c4c <_Z16fireBatteryEventi>

  if (displayingBattery && (prevBattery != currentBatteryReading))
   d750c:	4b07      	ldr	r3, [pc, #28]	; (d752c <_Z17getBatteryReadingv+0x60>)
   d750e:	781b      	ldrb	r3, [r3, #0]
   d7510:	b13b      	cbz	r3, d7522 <_Z17getBatteryReadingv+0x56>
   d7512:	4b04      	ldr	r3, [pc, #16]	; (d7524 <_Z17getBatteryReadingv+0x58>)
   d7514:	681b      	ldr	r3, [r3, #0]
   d7516:	429d      	cmp	r5, r3
   d7518:	d003      	beq.n	d7522 <_Z17getBatteryReadingv+0x56>
  {
    showBattery();
  }
   d751a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  fireBatteryEvent(currentBatteryReading);

  if (displayingBattery && (prevBattery != currentBatteryReading))
  {
    showBattery();
   d751e:	f7fe b93f 	b.w	d57a0 <_Z11showBatteryv>
   d7522:	bd38      	pop	{r3, r4, r5, pc}
   d7524:	2003e140 	.word	0x2003e140
   d7528:	3fe00000 	.word	0x3fe00000
   d752c:	2003e24e 	.word	0x2003e24e

000d7530 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7530:	4770      	bx	lr
	...

000d7534 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d7534:	b510      	push	{r4, lr}
   d7536:	4b06      	ldr	r3, [pc, #24]	; (d7550 <_ZN3UDPD1Ev+0x1c>)
   d7538:	6003      	str	r3, [r0, #0]
   d753a:	3364      	adds	r3, #100	; 0x64
   d753c:	4604      	mov	r4, r0
   d753e:	6103      	str	r3, [r0, #16]
   d7540:	f003 fa8b 	bl	daa5a <_ZN3UDP4stopEv>
   d7544:	4620      	mov	r0, r4
   d7546:	f003 fce9 	bl	daf1c <_ZN3UDP13releaseBufferEv>
   d754a:	4620      	mov	r0, r4
   d754c:	bd10      	pop	{r4, pc}
   d754e:	bf00      	nop
   d7550:	000de77c 	.word	0x000de77c

000d7554 <_ZN9IPAddressD0Ev>:
   d7554:	b510      	push	{r4, lr}
   d7556:	4604      	mov	r4, r0
   d7558:	f7fc fda1 	bl	d409e <_ZdlPv>
   d755c:	4620      	mov	r0, r4
   d755e:	bd10      	pop	{r4, pc}

000d7560 <_ZN3UDPD0Ev>:
   d7560:	b510      	push	{r4, lr}
   d7562:	4604      	mov	r4, r0
   d7564:	f7ff ffe6 	bl	d7534 <_ZN3UDPD1Ev>
   d7568:	4620      	mov	r0, r4
   d756a:	f7fc fd98 	bl	d409e <_ZdlPv>
   d756e:	4620      	mov	r0, r4
   d7570:	bd10      	pop	{r4, pc}
	...

000d7574 <_GLOBAL__sub_I__Z10openSocketv>:
    Serial.printlnf("Received %d bytes from %s#%u", s,
                    inet_inet_ntop(AF_INET6, ip.raw().ipv6, tmp, sizeof(tmp)), udp.remotePort());
  }

  return String("Hello");
   d7574:	b538      	push	{r3, r4, r5, lr}
#include "application.h"
#include "ifapi.h"
#include "random.h"

static UDP udp;
   d7576:	4c0c      	ldr	r4, [pc, #48]	; (d75a8 <_GLOBAL__sub_I__Z10openSocketv+0x34>)
   d7578:	4d0c      	ldr	r5, [pc, #48]	; (d75ac <_GLOBAL__sub_I__Z10openSocketv+0x38>)
   d757a:	4620      	mov	r0, r4
   d757c:	f003 fcb0 	bl	daee0 <_ZN3UDPC1Ev>
   d7580:	462a      	mov	r2, r5
   d7582:	490b      	ldr	r1, [pc, #44]	; (d75b0 <_GLOBAL__sub_I__Z10openSocketv+0x3c>)
   d7584:	4620      	mov	r0, r4
   d7586:	f004 f831 	bl	db5ec <__aeabi_atexit>
namespace particle {

class Random {
public:
    Random() :
            Random(HAL_RNG_GetRandomNumber()) {
   d758a:	f001 fda9 	bl	d90e0 <HAL_RNG_GetRandomNumber>
static Random rng;
static IPAddress mcastAddr;
   d758e:	4c09      	ldr	r4, [pc, #36]	; (d75b4 <_GLOBAL__sub_I__Z10openSocketv+0x40>)
    }

    explicit Random(unsigned seed) :
            seed_(seed) {
   d7590:	4b09      	ldr	r3, [pc, #36]	; (d75b8 <_GLOBAL__sub_I__Z10openSocketv+0x44>)
   d7592:	6018      	str	r0, [r3, #0]
   d7594:	4620      	mov	r0, r4
   d7596:	f002 fc7d 	bl	d9e94 <_ZN9IPAddressC1Ev>
   d759a:	462a      	mov	r2, r5
   d759c:	4620      	mov	r0, r4
   d759e:	4907      	ldr	r1, [pc, #28]	; (d75bc <_GLOBAL__sub_I__Z10openSocketv+0x48>)
    Serial.printlnf("Received %d bytes from %s#%u", s,
                    inet_inet_ntop(AF_INET6, ip.raw().ipv6, tmp, sizeof(tmp)), udp.remotePort());
  }

  return String("Hello");
   d75a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#include "ifapi.h"
#include "random.h"

static UDP udp;
static Random rng;
static IPAddress mcastAddr;
   d75a4:	f004 b822 	b.w	db5ec <__aeabi_atexit>
   d75a8:	2003e338 	.word	0x2003e338
   d75ac:	2003e108 	.word	0x2003e108
   d75b0:	000d7535 	.word	0x000d7535
   d75b4:	2003e31c 	.word	0x2003e31c
   d75b8:	2003e334 	.word	0x2003e334
   d75bc:	000d7531 	.word	0x000d7531

000d75c0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d75c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75c4:	b085      	sub	sp, #20
   d75c6:	461e      	mov	r6, r3
   d75c8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d75cc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d75d0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d75d2:	1a9a      	subs	r2, r3, r2
   d75d4:	2a00      	cmp	r2, #0
   d75d6:	bfb8      	it	lt
   d75d8:	4252      	neglt	r2, r2
   d75da:	9200      	str	r2, [sp, #0]
   d75dc:	1a72      	subs	r2, r6, r1
   d75de:	2a00      	cmp	r2, #0
   d75e0:	bfb8      	it	lt
   d75e2:	4252      	neglt	r2, r2
   d75e4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d75e6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d75e8:	9a00      	ldr	r2, [sp, #0]
   d75ea:	9901      	ldr	r1, [sp, #4]
   d75ec:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d75ee:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d75f0:	dd05      	ble.n	d75fe <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d75f2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d75f4:	461e      	mov	r6, r3
   d75f6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d75f8:	4622      	mov	r2, r4
    swap(x0, y0);
   d75fa:	462c      	mov	r4, r5
   d75fc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d75fe:	42b4      	cmp	r4, r6
   d7600:	dd05      	ble.n	d760e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d7602:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d7604:	461d      	mov	r5, r3
   d7606:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d7608:	4622      	mov	r2, r4
   d760a:	4634      	mov	r4, r6
   d760c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d760e:	1b5a      	subs	r2, r3, r5
   d7610:	2a00      	cmp	r2, #0
   d7612:	bfb8      	it	lt
   d7614:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d7616:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d761a:	429d      	cmp	r5, r3
   d761c:	bfb4      	ite	lt
   d761e:	2301      	movlt	r3, #1
   d7620:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d7624:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d7628:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d762a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d762c:	fa0f f788 	sxth.w	r7, r8
   d7630:	2202      	movs	r2, #2
   d7632:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d7636:	42b4      	cmp	r4, r6
   d7638:	dc1f      	bgt.n	d767a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d763a:	9a01      	ldr	r2, [sp, #4]
   d763c:	9b00      	ldr	r3, [sp, #0]
   d763e:	4293      	cmp	r3, r2
   d7640:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d7644:	bfc8      	it	gt
   d7646:	4622      	movgt	r2, r4
   d7648:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d764c:	bfc8      	it	gt
   d764e:	4629      	movgt	r1, r5
   d7650:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d7652:	bfdc      	itt	le
   d7654:	462a      	movle	r2, r5
   d7656:	4621      	movle	r1, r4
   d7658:	4648      	mov	r0, r9
   d765a:	47d8      	blx	fp
    }
    err -= dy;
   d765c:	9b03      	ldr	r3, [sp, #12]
   d765e:	1aff      	subs	r7, r7, r3
   d7660:	b2bb      	uxth	r3, r7
   d7662:	b21f      	sxth	r7, r3
    if (err < 0) {
   d7664:	2f00      	cmp	r7, #0
   d7666:	da05      	bge.n	d7674 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d7668:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d766a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d766e:	4415      	add	r5, r2
   d7670:	b22d      	sxth	r5, r5
      err += dx;
   d7672:	b23f      	sxth	r7, r7
   d7674:	3401      	adds	r4, #1
   d7676:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d7678:	e7dd      	b.n	d7636 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d767a:	b005      	add	sp, #20
   d767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7680 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d7680:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d7684:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d7688:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d768a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d768e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d7690:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d7692:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d7694:	4691      	mov	r9, r2
   d7696:	460d      	mov	r5, r1
   d7698:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d769a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d769c:	6823      	ldr	r3, [r4, #0]
   d769e:	9600      	str	r6, [sp, #0]
   d76a0:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   d76a4:	444a      	add	r2, r9
   d76a6:	69df      	ldr	r7, [r3, #28]
   d76a8:	4629      	mov	r1, r5
   d76aa:	4643      	mov	r3, r8
   d76ac:	4620      	mov	r0, r4
   d76ae:	b212      	sxth	r2, r2
   d76b0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d76b2:	6823      	ldr	r3, [r4, #0]
   d76b4:	9600      	str	r6, [sp, #0]
   d76b6:	699f      	ldr	r7, [r3, #24]
   d76b8:	464a      	mov	r2, r9
   d76ba:	4653      	mov	r3, sl
   d76bc:	4629      	mov	r1, r5
   d76be:	4620      	mov	r0, r4
   d76c0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d76c2:	6823      	ldr	r3, [r4, #0]
   d76c4:	960a      	str	r6, [sp, #40]	; 0x28
   d76c6:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d76ca:	4429      	add	r1, r5
   d76cc:	699d      	ldr	r5, [r3, #24]
   d76ce:	464a      	mov	r2, r9
   d76d0:	4653      	mov	r3, sl
   d76d2:	b209      	sxth	r1, r1
   d76d4:	4620      	mov	r0, r4
   d76d6:	46ac      	mov	ip, r5
}
   d76d8:	b002      	add	sp, #8
   d76da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d76de:	4760      	bx	ip

000d76e0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d76e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d76e2:	3b01      	subs	r3, #1
   d76e4:	4413      	add	r3, r2
   d76e6:	6804      	ldr	r4, [r0, #0]
   d76e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d76ec:	9501      	str	r5, [sp, #4]
   d76ee:	b21b      	sxth	r3, r3
   d76f0:	9300      	str	r3, [sp, #0]
   d76f2:	6964      	ldr	r4, [r4, #20]
   d76f4:	460b      	mov	r3, r1
   d76f6:	47a0      	blx	r4
}
   d76f8:	b003      	add	sp, #12
   d76fa:	bd30      	pop	{r4, r5, pc}

000d76fc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d76fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d76fe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d7702:	6804      	ldr	r4, [r0, #0]
   d7704:	e88d 0024 	stmia.w	sp, {r2, r5}
   d7708:	3b01      	subs	r3, #1
   d770a:	440b      	add	r3, r1
   d770c:	6964      	ldr	r4, [r4, #20]
   d770e:	b21b      	sxth	r3, r3
   d7710:	47a0      	blx	r4
}
   d7712:	b003      	add	sp, #12
   d7714:	bd30      	pop	{r4, r5, pc}

000d7716 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d7716:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d771a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d771e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d7722:	4605      	mov	r5, r0
   d7724:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d7726:	460c      	mov	r4, r1
   d7728:	eb01 0a03 	add.w	sl, r1, r3
   d772c:	4554      	cmp	r4, sl
   d772e:	da0b      	bge.n	d7748 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d7730:	682b      	ldr	r3, [r5, #0]
   d7732:	f8cd 9000 	str.w	r9, [sp]
   d7736:	699e      	ldr	r6, [r3, #24]
   d7738:	4621      	mov	r1, r4
   d773a:	4643      	mov	r3, r8
   d773c:	463a      	mov	r2, r7
   d773e:	4628      	mov	r0, r5
   d7740:	3401      	adds	r4, #1
   d7742:	47b0      	blx	r6
   d7744:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d7746:	e7f1      	b.n	d772c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d7748:	b002      	add	sp, #8
   d774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d774e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d774e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d7750:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d7754:	6804      	ldr	r4, [r0, #0]
   d7756:	9101      	str	r1, [sp, #4]
   d7758:	9200      	str	r2, [sp, #0]
   d775a:	2200      	movs	r2, #0
   d775c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d7760:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d7762:	4611      	mov	r1, r2
   d7764:	47a0      	blx	r4
}
   d7766:	b002      	add	sp, #8
   d7768:	bd10      	pop	{r4, pc}

000d776a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d776a:	4770      	bx	lr

000d776c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d776c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d776e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7770:	2400      	movs	r4, #0
   d7772:	4d08      	ldr	r5, [pc, #32]	; (d7794 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d7774:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d7776:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d7778:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d777a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d777e:	2201      	movs	r2, #1
   d7780:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d7782:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d7784:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d7786:	8204      	strh	r4, [r0, #16]
   d7788:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d778a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d778c:	82c1      	strh	r1, [r0, #22]
   d778e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d7790:	7682      	strb	r2, [r0, #26]
}
   d7792:	bd30      	pop	{r4, r5, pc}
   d7794:	000ddff8 	.word	0x000ddff8

000d7798 <_ZN12Adafruit_GFX10drawCircleEssst>:

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
   d7798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d779c:	b08b      	sub	sp, #44	; 0x2c
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
   d779e:	fa1f fb82 	uxth.w	fp, r2
  wrap      = true;
}

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
   d77a2:	9303      	str	r3, [sp, #12]
  int16_t f = 1 - r;
   d77a4:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  wrap      = true;
}

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
   d77a8:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
  int16_t f = 1 - r;
   d77ac:	f1c6 0301 	rsb	r3, r6, #1
   d77b0:	b21b      	sxth	r3, r3
   d77b2:	9302      	str	r3, [sp, #8]
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
   d77b4:	ebc6 33c6 	rsb	r3, r6, r6, lsl #15
   d77b8:	005b      	lsls	r3, r3, #1
   d77ba:	b21b      	sxth	r3, r3
   d77bc:	9306      	str	r3, [sp, #24]
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
   d77be:	6803      	ldr	r3, [r0, #0]
  wrap      = true;
}

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
   d77c0:	4604      	mov	r4, r0
   d77c2:	4617      	mov	r7, r2
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
   d77c4:	eb06 020b 	add.w	r2, r6, fp
   d77c8:	f8d3 9010 	ldr.w	r9, [r3, #16]
   d77cc:	b212      	sxth	r2, r2
   d77ce:	462b      	mov	r3, r5
  wrap      = true;
}

// Draw a circle outline
void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
    uint16_t color) {
   d77d0:	4688      	mov	r8, r1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x = 0;
  int16_t y = r;

  drawPixel(x0  , y0+r, color);
   d77d2:	47c8      	blx	r9
  drawPixel(x0  , y0-r, color);
   d77d4:	6823      	ldr	r3, [r4, #0]
   d77d6:	ebc6 020b 	rsb	r2, r6, fp
   d77da:	4641      	mov	r1, r8
   d77dc:	f8d3 9010 	ldr.w	r9, [r3, #16]
   d77e0:	b212      	sxth	r2, r2
   d77e2:	462b      	mov	r3, r5
   d77e4:	4620      	mov	r0, r4
   d77e6:	47c8      	blx	r9
  drawPixel(x0+r, y0  , color);
   d77e8:	fa1f f388 	uxth.w	r3, r8
   d77ec:	18f1      	adds	r1, r6, r3
   d77ee:	9301      	str	r3, [sp, #4]
   d77f0:	6823      	ldr	r3, [r4, #0]
   d77f2:	463a      	mov	r2, r7
   d77f4:	f8d3 8010 	ldr.w	r8, [r3, #16]
   d77f8:	b209      	sxth	r1, r1
   d77fa:	462b      	mov	r3, r5
   d77fc:	4620      	mov	r0, r4
   d77fe:	47c0      	blx	r8
  drawPixel(x0-r, y0  , color);
   d7800:	9b01      	ldr	r3, [sp, #4]
   d7802:	1b99      	subs	r1, r3, r6
   d7804:	6823      	ldr	r3, [r4, #0]
   d7806:	463a      	mov	r2, r7
   d7808:	691e      	ldr	r6, [r3, #16]
   d780a:	b209      	sxth	r1, r1
   d780c:	462b      	mov	r3, r5
   d780e:	4620      	mov	r0, r4
   d7810:	47b0      	blx	r6
   d7812:	2300      	movs	r3, #0
   d7814:	9305      	str	r3, [sp, #20]
   d7816:	9b01      	ldr	r3, [sp, #4]
   d7818:	3301      	adds	r3, #1
   d781a:	9307      	str	r3, [sp, #28]
   d781c:	9b01      	ldr	r3, [sp, #4]
   d781e:	3b01      	subs	r3, #1
   d7820:	9308      	str	r3, [sp, #32]
   d7822:	f10b 0301 	add.w	r3, fp, #1
   d7826:	9309      	str	r3, [sp, #36]	; 0x24

  while (x<y) {
   d7828:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
   d782c:	9a03      	ldr	r2, [sp, #12]
   d782e:	4293      	cmp	r3, r2
   d7830:	f280 8084 	bge.w	d793c <_ZN12Adafruit_GFX10drawCircleEssst+0x1a4>
    if (f >= 0) {
   d7834:	9b02      	ldr	r3, [sp, #8]
   d7836:	2b00      	cmp	r3, #0
   d7838:	db0b      	blt.n	d7852 <_ZN12Adafruit_GFX10drawCircleEssst+0xba>
      y--;
   d783a:	1e53      	subs	r3, r2, #1
   d783c:	b21b      	sxth	r3, r3
   d783e:	9303      	str	r3, [sp, #12]
      ddF_y += 2;
   d7840:	9b06      	ldr	r3, [sp, #24]
   d7842:	3302      	adds	r3, #2
   d7844:	b29b      	uxth	r3, r3
   d7846:	b21a      	sxth	r2, r3
   d7848:	9206      	str	r2, [sp, #24]
      f += ddF_y;
   d784a:	9a02      	ldr	r2, [sp, #8]
   d784c:	4413      	add	r3, r2
   d784e:	b21b      	sxth	r3, r3
   d7850:	9302      	str	r3, [sp, #8]
   d7852:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    }
    x++;
    ddF_x += 2;
    f += ddF_x;
   d7856:	9b02      	ldr	r3, [sp, #8]
   d7858:	eb03 0347 	add.w	r3, r3, r7, lsl #1
   d785c:	3303      	adds	r3, #3
   d785e:	b21b      	sxth	r3, r3
   d7860:	9302      	str	r3, [sp, #8]
   d7862:	9b07      	ldr	r3, [sp, #28]
   d7864:	eb07 0a03 	add.w	sl, r7, r3
  
    drawPixel(x0 + x, y0 + y, color);
   d7868:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d786c:	9304      	str	r3, [sp, #16]
   d786e:	eb0b 0903 	add.w	r9, fp, r3
   d7872:	6823      	ldr	r3, [r4, #0]
   d7874:	fa0f fa8a 	sxth.w	sl, sl
   d7878:	fa0f f989 	sxth.w	r9, r9
   d787c:	f8d3 8010 	ldr.w	r8, [r3, #16]
   d7880:	464a      	mov	r2, r9
   d7882:	4651      	mov	r1, sl
   d7884:	462b      	mov	r3, r5
   d7886:	4620      	mov	r0, r4
   d7888:	47c0      	blx	r8
   d788a:	9b08      	ldr	r3, [sp, #32]
   d788c:	ebc7 0803 	rsb	r8, r7, r3
    drawPixel(x0 - x, y0 + y, color);
   d7890:	6823      	ldr	r3, [r4, #0]
   d7892:	691b      	ldr	r3, [r3, #16]
   d7894:	fa0f f888 	sxth.w	r8, r8
   d7898:	461e      	mov	r6, r3
   d789a:	464a      	mov	r2, r9
   d789c:	4641      	mov	r1, r8
   d789e:	462b      	mov	r3, r5
   d78a0:	4620      	mov	r0, r4
   d78a2:	47b0      	blx	r6
    drawPixel(x0 + x, y0 - y, color);
   d78a4:	9b04      	ldr	r3, [sp, #16]
   d78a6:	ebc3 090b 	rsb	r9, r3, fp
   d78aa:	6823      	ldr	r3, [r4, #0]
   d78ac:	691b      	ldr	r3, [r3, #16]
   d78ae:	fa0f f989 	sxth.w	r9, r9
   d78b2:	461e      	mov	r6, r3
   d78b4:	464a      	mov	r2, r9
   d78b6:	4651      	mov	r1, sl
   d78b8:	462b      	mov	r3, r5
   d78ba:	4620      	mov	r0, r4
   d78bc:	47b0      	blx	r6
    drawPixel(x0 - x, y0 - y, color);
   d78be:	6823      	ldr	r3, [r4, #0]
   d78c0:	464a      	mov	r2, r9
   d78c2:	f8d3 a010 	ldr.w	sl, [r3, #16]
   d78c6:	4641      	mov	r1, r8
   d78c8:	462b      	mov	r3, r5
   d78ca:	4620      	mov	r0, r4
   d78cc:	47d0      	blx	sl
    drawPixel(x0 + y, y0 + x, color);
   d78ce:	9b01      	ldr	r3, [sp, #4]
   d78d0:	9a04      	ldr	r2, [sp, #16]
   d78d2:	eb03 0802 	add.w	r8, r3, r2
   d78d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d78d8:	eb07 0903 	add.w	r9, r7, r3
   d78dc:	6823      	ldr	r3, [r4, #0]
   d78de:	fa0f f888 	sxth.w	r8, r8
   d78e2:	fa0f f989 	sxth.w	r9, r9
   d78e6:	f8d3 a010 	ldr.w	sl, [r3, #16]
   d78ea:	464a      	mov	r2, r9
   d78ec:	4641      	mov	r1, r8
   d78ee:	462b      	mov	r3, r5
   d78f0:	4620      	mov	r0, r4
   d78f2:	47d0      	blx	sl
    drawPixel(x0 - y, y0 + x, color);
   d78f4:	9b01      	ldr	r3, [sp, #4]
   d78f6:	9a04      	ldr	r2, [sp, #16]
   d78f8:	1a9e      	subs	r6, r3, r2
   d78fa:	6823      	ldr	r3, [r4, #0]
   d78fc:	b236      	sxth	r6, r6
   d78fe:	464a      	mov	r2, r9
   d7900:	f8d3 a010 	ldr.w	sl, [r3, #16]
   d7904:	4631      	mov	r1, r6
   d7906:	462b      	mov	r3, r5
   d7908:	4620      	mov	r0, r4
   d790a:	47d0      	blx	sl
   d790c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
   d7910:	1bdf      	subs	r7, r3, r7
    drawPixel(x0 + y, y0 - x, color);
   d7912:	6823      	ldr	r3, [r4, #0]
   d7914:	b23f      	sxth	r7, r7
   d7916:	4641      	mov	r1, r8
   d7918:	f8d3 9010 	ldr.w	r9, [r3, #16]
   d791c:	463a      	mov	r2, r7
   d791e:	462b      	mov	r3, r5
   d7920:	4620      	mov	r0, r4
   d7922:	47c8      	blx	r9
    drawPixel(x0 - y, y0 - x, color);
   d7924:	6823      	ldr	r3, [r4, #0]
   d7926:	463a      	mov	r2, r7
   d7928:	f8d3 8010 	ldr.w	r8, [r3, #16]
   d792c:	4631      	mov	r1, r6
   d792e:	462b      	mov	r3, r5
   d7930:	4620      	mov	r0, r4
   d7932:	47c0      	blx	r8
   d7934:	9b05      	ldr	r3, [sp, #20]
   d7936:	3301      	adds	r3, #1
   d7938:	9305      	str	r3, [sp, #20]
  drawPixel(x0  , y0+r, color);
  drawPixel(x0  , y0-r, color);
  drawPixel(x0+r, y0  , color);
  drawPixel(x0-r, y0  , color);

  while (x<y) {
   d793a:	e775      	b.n	d7828 <_ZN12Adafruit_GFX10drawCircleEssst+0x90>
    drawPixel(x0 + y, y0 + x, color);
    drawPixel(x0 - y, y0 + x, color);
    drawPixel(x0 + y, y0 - x, color);
    drawPixel(x0 - y, y0 - x, color);
  }
}
   d793c:	b00b      	add	sp, #44	; 0x2c
   d793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7942 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>:

void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
               int16_t r, uint8_t cornername, uint16_t color) {
   d7942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7946:	b087      	sub	sp, #28
   d7948:	461d      	mov	r5, r3
   d794a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   d794e:	9303      	str	r3, [sp, #12]
  int16_t f     = 1 - r;
   d7950:	b2ab      	uxth	r3, r5
    drawPixel(x0 - y, y0 - x, color);
  }
}

void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
               int16_t r, uint8_t cornername, uint16_t color) {
   d7952:	9202      	str	r2, [sp, #8]
  int16_t f     = 1 - r;
   d7954:	f1c3 0201 	rsb	r2, r3, #1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
   d7958:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   d795c:	005b      	lsls	r3, r3, #1
   d795e:	b21b      	sxth	r3, r3
   d7960:	9304      	str	r3, [sp, #16]
   d7962:	2300      	movs	r3, #0
   d7964:	9301      	str	r3, [sp, #4]
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
   d7966:	9b03      	ldr	r3, [sp, #12]
    drawPixel(x0 - y, y0 - x, color);
  }
}

void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
               int16_t r, uint8_t cornername, uint16_t color) {
   d7968:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
   d796c:	f003 0304 	and.w	r3, r3, #4
  }
}

void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
               int16_t r, uint8_t cornername, uint16_t color) {
  int16_t f     = 1 - r;
   d7970:	b212      	sxth	r2, r2
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
   d7972:	b2db      	uxtb	r3, r3
    drawPixel(x0 - y, y0 - x, color);
  }
}

void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
               int16_t r, uint8_t cornername, uint16_t color) {
   d7974:	4604      	mov	r4, r0
  int16_t f     = 1 - r;
   d7976:	9200      	str	r2, [sp, #0]
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
    if (cornername & 0x4) {
   d7978:	9305      	str	r3, [sp, #20]
      drawPixel(x0 + x, y0 + y, color);
   d797a:	fa1f f881 	uxth.w	r8, r1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
   d797e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
   d7982:	42ab      	cmp	r3, r5
   d7984:	f280 809d 	bge.w	d7ac2 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x180>
    if (f >= 0) {
   d7988:	9b00      	ldr	r3, [sp, #0]
   d798a:	2b00      	cmp	r3, #0
   d798c:	db0a      	blt.n	d79a4 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x62>
      y--;
      ddF_y += 2;
   d798e:	9b04      	ldr	r3, [sp, #16]
   d7990:	3302      	adds	r3, #2
   d7992:	b29b      	uxth	r3, r3
   d7994:	b21a      	sxth	r2, r3
   d7996:	9204      	str	r2, [sp, #16]
      f     += ddF_y;
   d7998:	9a00      	ldr	r2, [sp, #0]
   d799a:	4413      	add	r3, r2
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
   d799c:	3d01      	subs	r5, #1
      ddF_y += 2;
      f     += ddF_y;
   d799e:	b21b      	sxth	r3, r3
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
   d79a0:	b22d      	sxth	r5, r5
      ddF_y += 2;
      f     += ddF_y;
   d79a2:	9300      	str	r3, [sp, #0]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
   d79a4:	9b00      	ldr	r3, [sp, #0]
   d79a6:	f8bd 6004 	ldrh.w	r6, [sp, #4]
   d79aa:	eb03 0346 	add.w	r3, r3, r6, lsl #1
   d79ae:	3303      	adds	r3, #3
   d79b0:	b21b      	sxth	r3, r3
   d79b2:	9300      	str	r3, [sp, #0]
    if (cornername & 0x4) {
   d79b4:	9b05      	ldr	r3, [sp, #20]
   d79b6:	b1eb      	cbz	r3, d79f4 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xb2>
      drawPixel(x0 + x, y0 + y, color);
   d79b8:	f8bd 9008 	ldrh.w	r9, [sp, #8]
   d79bc:	6823      	ldr	r3, [r4, #0]
   d79be:	fa1f fa85 	uxth.w	sl, r5
   d79c2:	f108 0101 	add.w	r1, r8, #1
   d79c6:	eb09 020a 	add.w	r2, r9, sl
   d79ca:	4431      	add	r1, r6
   d79cc:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d79d0:	b212      	sxth	r2, r2
   d79d2:	463b      	mov	r3, r7
   d79d4:	b209      	sxth	r1, r1
   d79d6:	4620      	mov	r0, r4
   d79d8:	47d8      	blx	fp
      drawPixel(x0 + y, y0 + x, color);
   d79da:	6823      	ldr	r3, [r4, #0]
   d79dc:	f109 0201 	add.w	r2, r9, #1
   d79e0:	4432      	add	r2, r6
   d79e2:	eb08 010a 	add.w	r1, r8, sl
   d79e6:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d79ea:	b212      	sxth	r2, r2
   d79ec:	463b      	mov	r3, r7
   d79ee:	b209      	sxth	r1, r1
   d79f0:	4620      	mov	r0, r4
   d79f2:	47d8      	blx	fp
    } 
    if (cornername & 0x2) {
   d79f4:	9b03      	ldr	r3, [sp, #12]
   d79f6:	0799      	lsls	r1, r3, #30
   d79f8:	d51d      	bpl.n	d7a36 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0xf4>
      drawPixel(x0 + x, y0 - y, color);
   d79fa:	f8bd 9008 	ldrh.w	r9, [sp, #8]
   d79fe:	6823      	ldr	r3, [r4, #0]
   d7a00:	fa1f fa85 	uxth.w	sl, r5
   d7a04:	f108 0101 	add.w	r1, r8, #1
   d7a08:	ebca 0209 	rsb	r2, sl, r9
   d7a0c:	4431      	add	r1, r6
   d7a0e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d7a12:	b212      	sxth	r2, r2
   d7a14:	463b      	mov	r3, r7
   d7a16:	b209      	sxth	r1, r1
   d7a18:	4620      	mov	r0, r4
   d7a1a:	47d8      	blx	fp
      drawPixel(x0 + y, y0 - x, color);
   d7a1c:	6823      	ldr	r3, [r4, #0]
   d7a1e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   d7a22:	1b92      	subs	r2, r2, r6
   d7a24:	eb08 010a 	add.w	r1, r8, sl
   d7a28:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d7a2c:	b212      	sxth	r2, r2
   d7a2e:	463b      	mov	r3, r7
   d7a30:	b209      	sxth	r1, r1
   d7a32:	4620      	mov	r0, r4
   d7a34:	47d8      	blx	fp
    }
    if (cornername & 0x8) {
   d7a36:	9b03      	ldr	r3, [sp, #12]
   d7a38:	071a      	lsls	r2, r3, #28
   d7a3a:	d51d      	bpl.n	d7a78 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x136>
      drawPixel(x0 - y, y0 + x, color);
   d7a3c:	f8bd 9008 	ldrh.w	r9, [sp, #8]
   d7a40:	6823      	ldr	r3, [r4, #0]
   d7a42:	fa1f fa85 	uxth.w	sl, r5
   d7a46:	f109 0001 	add.w	r0, r9, #1
   d7a4a:	1832      	adds	r2, r6, r0
   d7a4c:	ebca 0108 	rsb	r1, sl, r8
   d7a50:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d7a54:	b212      	sxth	r2, r2
   d7a56:	463b      	mov	r3, r7
   d7a58:	b209      	sxth	r1, r1
   d7a5a:	4620      	mov	r0, r4
   d7a5c:	47d8      	blx	fp
      drawPixel(x0 - x, y0 + y, color);
   d7a5e:	6823      	ldr	r3, [r4, #0]
   d7a60:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d7a64:	eb0a 0209 	add.w	r2, sl, r9
   d7a68:	1b89      	subs	r1, r1, r6
   d7a6a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d7a6e:	b212      	sxth	r2, r2
   d7a70:	463b      	mov	r3, r7
   d7a72:	b209      	sxth	r1, r1
   d7a74:	4620      	mov	r0, r4
   d7a76:	47d8      	blx	fp
    }
    if (cornername & 0x1) {
   d7a78:	9b03      	ldr	r3, [sp, #12]
   d7a7a:	07db      	lsls	r3, r3, #31
   d7a7c:	d403      	bmi.n	d7a86 <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x144>
   d7a7e:	9b01      	ldr	r3, [sp, #4]
   d7a80:	3301      	adds	r3, #1
   d7a82:	9301      	str	r3, [sp, #4]
   d7a84:	e77b      	b.n	d797e <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x3c>
      drawPixel(x0 - y, y0 - x, color);
   d7a86:	f8bd 9008 	ldrh.w	r9, [sp, #8]
   d7a8a:	6823      	ldr	r3, [r4, #0]
   d7a8c:	fa1f fa85 	uxth.w	sl, r5
   d7a90:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7a94:	1b82      	subs	r2, r0, r6
   d7a96:	ebca 0108 	rsb	r1, sl, r8
   d7a9a:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d7a9e:	4620      	mov	r0, r4
   d7aa0:	463b      	mov	r3, r7
   d7aa2:	b212      	sxth	r2, r2
   d7aa4:	b209      	sxth	r1, r1
   d7aa6:	47d8      	blx	fp
      drawPixel(x0 - x, y0 - y, color);
   d7aa8:	6823      	ldr	r3, [r4, #0]
   d7aaa:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   d7aae:	ebca 0209 	rsb	r2, sl, r9
   d7ab2:	1b89      	subs	r1, r1, r6
   d7ab4:	b212      	sxth	r2, r2
   d7ab6:	691e      	ldr	r6, [r3, #16]
   d7ab8:	b209      	sxth	r1, r1
   d7aba:	463b      	mov	r3, r7
   d7abc:	4620      	mov	r0, r4
   d7abe:	47b0      	blx	r6
   d7ac0:	e7dd      	b.n	d7a7e <_ZN12Adafruit_GFX16drawCircleHelperEsssht+0x13c>
    }
  }
}
   d7ac2:	b007      	add	sp, #28
   d7ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7ac8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {
   d7ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7acc:	b08d      	sub	sp, #52	; 0x34
   d7ace:	461e      	mov	r6, r3
   d7ad0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d7ad4:	9309      	str	r3, [sp, #36]	; 0x24
   d7ad6:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   d7ada:	930a      	str	r3, [sp, #40]	; 0x28
   d7adc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   d7ae0:	9304      	str	r3, [sp, #16]

  int16_t f     = 1 - r;
   d7ae2:	b2b3      	uxth	r3, r6
   d7ae4:	f1c3 0801 	rsb	r8, r3, #1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
   d7ae8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   d7aec:	005b      	lsls	r3, r3, #1
   d7aee:	b21b      	sxth	r3, r3
   d7af0:	9306      	str	r3, [sp, #24]
   d7af2:	2300      	movs	r3, #0
   d7af4:	9303      	str	r3, [sp, #12]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
   d7af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {
   d7af8:	9208      	str	r2, [sp, #32]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
   d7afa:	f003 0301 	and.w	r3, r3, #1
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

// Used to do circles and roundrects
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    uint8_t cornername, int16_t delta, uint16_t color) {
   d7afe:	4604      	mov	r4, r0

  int16_t f     = 1 - r;
   d7b00:	fa0f f888 	sxth.w	r8, r8
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;

    if (cornername & 0x1) {
   d7b04:	930b      	str	r3, [sp, #44]	; 0x2c
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   d7b06:	fa1f fb81 	uxth.w	fp, r1
  int16_t ddF_x = 1;
  int16_t ddF_y = -2 * r;
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
   d7b0a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   d7b0e:	42b3      	cmp	r3, r6
   d7b10:	da78      	bge.n	d7c04 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x13c>
    if (f >= 0) {
   d7b12:	f1b8 0f00 	cmp.w	r8, #0
   d7b16:	db09      	blt.n	d7b2c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x64>
      y--;
      ddF_y += 2;
   d7b18:	9b06      	ldr	r3, [sp, #24]
   d7b1a:	3302      	adds	r3, #2
   d7b1c:	b29b      	uxth	r3, r3
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
   d7b1e:	3e01      	subs	r6, #1
      ddF_y += 2;
   d7b20:	b21a      	sxth	r2, r3
      f     += ddF_y;
   d7b22:	4498      	add	r8, r3
  int16_t x     = 0;
  int16_t y     = r;

  while (x<y) {
    if (f >= 0) {
      y--;
   d7b24:	b236      	sxth	r6, r6
      ddF_y += 2;
   d7b26:	9206      	str	r2, [sp, #24]
      f     += ddF_y;
   d7b28:	fa0f f888 	sxth.w	r8, r8
   d7b2c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
   d7b30:	ea4f 034a 	mov.w	r3, sl, lsl #1
   d7b34:	b29b      	uxth	r3, r3
   d7b36:	9305      	str	r3, [sp, #20]
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
   d7b38:	3303      	adds	r3, #3
   d7b3a:	4498      	add	r8, r3

    if (cornername & 0x1) {
   d7b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      ddF_y += 2;
      f     += ddF_y;
    }
    x++;
    ddF_x += 2;
    f     += ddF_x;
   d7b3e:	fa0f f888 	sxth.w	r8, r8

    if (cornername & 0x1) {
   d7b42:	b353      	cbz	r3, d7b9a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd2>
      drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   d7b44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   d7b48:	6825      	ldr	r5, [r4, #0]
   d7b4a:	9804      	ldr	r0, [sp, #16]
   d7b4c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
   d7b50:	9000      	str	r0, [sp, #0]
   d7b52:	fa1f f986 	uxth.w	r9, r6
   d7b56:	69a8      	ldr	r0, [r5, #24]
   d7b58:	9307      	str	r3, [sp, #28]
   d7b5a:	f10b 0101 	add.w	r1, fp, #1
   d7b5e:	3301      	adds	r3, #1
   d7b60:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   d7b64:	ebc9 0207 	rsb	r2, r9, r7
   d7b68:	4451      	add	r1, sl
   d7b6a:	4605      	mov	r5, r0
   d7b6c:	b21b      	sxth	r3, r3
   d7b6e:	b212      	sxth	r2, r2
   d7b70:	b209      	sxth	r1, r1
   d7b72:	4620      	mov	r0, r4
   d7b74:	47a8      	blx	r5
      drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
   d7b76:	9b07      	ldr	r3, [sp, #28]
   d7b78:	9a05      	ldr	r2, [sp, #20]
   d7b7a:	6820      	ldr	r0, [r4, #0]
   d7b7c:	9d04      	ldr	r5, [sp, #16]
   d7b7e:	9500      	str	r5, [sp, #0]
   d7b80:	3303      	adds	r3, #3
   d7b82:	4413      	add	r3, r2
   d7b84:	1e7a      	subs	r2, r7, #1
   d7b86:	ebca 0202 	rsb	r2, sl, r2
   d7b8a:	eb0b 0109 	add.w	r1, fp, r9
   d7b8e:	6985      	ldr	r5, [r0, #24]
   d7b90:	b21b      	sxth	r3, r3
   d7b92:	b212      	sxth	r2, r2
   d7b94:	b209      	sxth	r1, r1
   d7b96:	4620      	mov	r0, r4
   d7b98:	47a8      	blx	r5
    }
    if (cornername & 0x2) {
   d7b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7b9c:	079b      	lsls	r3, r3, #30
   d7b9e:	d403      	bmi.n	d7ba8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe0>
   d7ba0:	9b03      	ldr	r3, [sp, #12]
   d7ba2:	3301      	adds	r3, #1
   d7ba4:	9303      	str	r3, [sp, #12]
   d7ba6:	e7b0      	b.n	d7b0a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x42>
      drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
   d7ba8:	f8bd 5020 	ldrh.w	r5, [sp, #32]
   d7bac:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   d7bb0:	9804      	ldr	r0, [sp, #16]
   d7bb2:	9507      	str	r5, [sp, #28]
   d7bb4:	b2b7      	uxth	r7, r6
   d7bb6:	1bea      	subs	r2, r5, r7
   d7bb8:	6825      	ldr	r5, [r4, #0]
   d7bba:	9000      	str	r0, [sp, #0]
   d7bbc:	69a8      	ldr	r0, [r5, #24]
   d7bbe:	f109 0301 	add.w	r3, r9, #1
   d7bc2:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   d7bc6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
   d7bca:	ebca 0101 	rsb	r1, sl, r1
   d7bce:	4605      	mov	r5, r0
   d7bd0:	b21b      	sxth	r3, r3
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	b212      	sxth	r2, r2
   d7bd6:	b209      	sxth	r1, r1
   d7bd8:	47a8      	blx	r5
      drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
   d7bda:	9a05      	ldr	r2, [sp, #20]
   d7bdc:	6820      	ldr	r0, [r4, #0]
   d7bde:	9d04      	ldr	r5, [sp, #16]
   d7be0:	9500      	str	r5, [sp, #0]
   d7be2:	f109 0303 	add.w	r3, r9, #3
   d7be6:	441a      	add	r2, r3
   d7be8:	4613      	mov	r3, r2
   d7bea:	9a07      	ldr	r2, [sp, #28]
   d7bec:	6985      	ldr	r5, [r0, #24]
   d7bee:	3a01      	subs	r2, #1
   d7bf0:	ebca 0202 	rsb	r2, sl, r2
   d7bf4:	ebc7 010b 	rsb	r1, r7, fp
   d7bf8:	b21b      	sxth	r3, r3
   d7bfa:	b212      	sxth	r2, r2
   d7bfc:	b209      	sxth	r1, r1
   d7bfe:	4620      	mov	r0, r4
   d7c00:	47a8      	blx	r5
   d7c02:	e7cd      	b.n	d7ba0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd8>
    }
  }
}
   d7c04:	b00d      	add	sp, #52	; 0x34
   d7c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7c0a <_ZN12Adafruit_GFX13drawRoundRectEssssst>:
  fillRect(0, 0, _width, _height, color);
}

// Draw a rounded rectangle
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
  int16_t h, int16_t r, uint16_t color) {
   d7c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c0e:	b089      	sub	sp, #36	; 0x24
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
   d7c10:	b29b      	uxth	r3, r3
  fillRect(0, 0, _width, _height, color);
}

// Draw a rounded rectangle
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
  int16_t h, int16_t r, uint16_t color) {
   d7c12:	f9bd 904c 	ldrsh.w	r9, [sp, #76]	; 0x4c
   d7c16:	9107      	str	r1, [sp, #28]
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
   d7c18:	fa1f fa89 	uxth.w	sl, r9
   d7c1c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d7c20:	9304      	str	r3, [sp, #16]
   d7c22:	ea4f 034a 	mov.w	r3, sl, lsl #1
   d7c26:	9103      	str	r1, [sp, #12]
   d7c28:	b29b      	uxth	r3, r3
   d7c2a:	4451      	add	r1, sl
   d7c2c:	9305      	str	r3, [sp, #20]
   d7c2e:	b209      	sxth	r1, r1
   d7c30:	9102      	str	r1, [sp, #8]
   d7c32:	9b04      	ldr	r3, [sp, #16]
   d7c34:	9905      	ldr	r1, [sp, #20]
  fillRect(0, 0, _width, _height, color);
}

// Draw a rounded rectangle
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
  int16_t h, int16_t r, uint16_t color) {
   d7c36:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
   d7c3a:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
   d7c3e:	1a5f      	subs	r7, r3, r1
   d7c40:	6803      	ldr	r3, [r0, #0]
   d7c42:	9600      	str	r6, [sp, #0]
   d7c44:	b23f      	sxth	r7, r7
  fillRect(0, 0, _width, _height, color);
}

// Draw a rounded rectangle
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
  int16_t h, int16_t r, uint16_t color) {
   d7c46:	4693      	mov	fp, r2
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
   d7c48:	69dd      	ldr	r5, [r3, #28]
   d7c4a:	9902      	ldr	r1, [sp, #8]
   d7c4c:	463b      	mov	r3, r7
  drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
   d7c4e:	fa1f f888 	uxth.w	r8, r8
  fillRect(0, 0, _width, _height, color);
}

// Draw a rounded rectangle
void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
  int16_t h, int16_t r, uint16_t color) {
   d7c52:	4604      	mov	r4, r0
  // smarter version
  drawFastHLine(x+r  , y    , w-2*r, color); // Top
   d7c54:	47a8      	blx	r5
  drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
   d7c56:	fa1f f58b 	uxth.w	r5, fp
   d7c5a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   d7c5e:	442b      	add	r3, r5
   d7c60:	b29b      	uxth	r3, r3
   d7c62:	9306      	str	r3, [sp, #24]
   d7c64:	6823      	ldr	r3, [r4, #0]
   d7c66:	9600      	str	r6, [sp, #0]
   d7c68:	f8d3 b01c 	ldr.w	fp, [r3, #28]
   d7c6c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   d7c70:	9902      	ldr	r1, [sp, #8]
   d7c72:	463b      	mov	r3, r7
   d7c74:	4620      	mov	r0, r4
   d7c76:	47d8      	blx	fp
  drawFastVLine(x    , y+r  , h-2*r, color); // Left
   d7c78:	9b05      	ldr	r3, [sp, #20]
   d7c7a:	9600      	str	r6, [sp, #0]
   d7c7c:	4455      	add	r5, sl
   d7c7e:	ebc3 0808 	rsb	r8, r3, r8
   d7c82:	6823      	ldr	r3, [r4, #0]
   d7c84:	9907      	ldr	r1, [sp, #28]
   d7c86:	699f      	ldr	r7, [r3, #24]
   d7c88:	b22d      	sxth	r5, r5
   d7c8a:	fa0f f888 	sxth.w	r8, r8
   d7c8e:	4643      	mov	r3, r8
   d7c90:	462a      	mov	r2, r5
   d7c92:	4620      	mov	r0, r4
   d7c94:	47b8      	blx	r7
  drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
   d7c96:	9b03      	ldr	r3, [sp, #12]
   d7c98:	9a04      	ldr	r2, [sp, #16]
   d7c9a:	9600      	str	r6, [sp, #0]
   d7c9c:	189f      	adds	r7, r3, r2
   d7c9e:	b2bf      	uxth	r7, r7
   d7ca0:	6823      	ldr	r3, [r4, #0]
   d7ca2:	1e79      	subs	r1, r7, #1
   d7ca4:	f8d3 b018 	ldr.w	fp, [r3, #24]
   d7ca8:	462a      	mov	r2, r5
   d7caa:	4643      	mov	r3, r8
   d7cac:	4620      	mov	r0, r4
   d7cae:	b209      	sxth	r1, r1
   d7cb0:	47d8      	blx	fp
  // draw four corners
  drawCircleHelper(x+r    , y+r    , r, 1, color);
   d7cb2:	2301      	movs	r3, #1
   d7cb4:	9300      	str	r3, [sp, #0]
   d7cb6:	462a      	mov	r2, r5
   d7cb8:	464b      	mov	r3, r9
   d7cba:	9902      	ldr	r1, [sp, #8]
   d7cbc:	9601      	str	r6, [sp, #4]
   d7cbe:	4620      	mov	r0, r4
   d7cc0:	f7ff fe3f 	bl	d7942 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
   d7cc4:	ea6f 030a 	mvn.w	r3, sl
   d7cc8:	441f      	add	r7, r3
   d7cca:	b23f      	sxth	r7, r7
   d7ccc:	2302      	movs	r3, #2
   d7cce:	9300      	str	r3, [sp, #0]
   d7cd0:	462a      	mov	r2, r5
   d7cd2:	464b      	mov	r3, r9
   d7cd4:	4639      	mov	r1, r7
   d7cd6:	4620      	mov	r0, r4
   d7cd8:	9601      	str	r6, [sp, #4]
   d7cda:	f7ff fe32 	bl	d7942 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
   d7cde:	9b06      	ldr	r3, [sp, #24]
   d7ce0:	9601      	str	r6, [sp, #4]
   d7ce2:	ebca 0a03 	rsb	sl, sl, r3
   d7ce6:	fa0f fa8a 	sxth.w	sl, sl
   d7cea:	2304      	movs	r3, #4
   d7cec:	9300      	str	r3, [sp, #0]
   d7cee:	4652      	mov	r2, sl
   d7cf0:	464b      	mov	r3, r9
   d7cf2:	4639      	mov	r1, r7
   d7cf4:	4620      	mov	r0, r4
   d7cf6:	f7ff fe24 	bl	d7942 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
   d7cfa:	2308      	movs	r3, #8
   d7cfc:	9902      	ldr	r1, [sp, #8]
   d7cfe:	9312      	str	r3, [sp, #72]	; 0x48
   d7d00:	4652      	mov	r2, sl
   d7d02:	464b      	mov	r3, r9
   d7d04:	4620      	mov	r0, r4
   d7d06:	9613      	str	r6, [sp, #76]	; 0x4c
}
   d7d08:	b009      	add	sp, #36	; 0x24
   d7d0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
  // draw four corners
  drawCircleHelper(x+r    , y+r    , r, 1, color);
  drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
  drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
   d7d0e:	f7ff be18 	b.w	d7942 <_ZN12Adafruit_GFX16drawCircleHelperEsssht>

000d7d12 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
}

// Fill a rounded rectangle
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
				 int16_t h, int16_t r, uint16_t color) {
   d7d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d16:	b089      	sub	sp, #36	; 0x24
  // smarter version
  fillRect(x+r, y, w-2*r, h, color);
   d7d18:	b289      	uxth	r1, r1
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

// Fill a rounded rectangle
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
				 int16_t h, int16_t r, uint16_t color) {
   d7d1a:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
   d7d1e:	f9bd 4048 	ldrsh.w	r4, [sp, #72]	; 0x48
   d7d22:	9407      	str	r4, [sp, #28]
  // smarter version
  fillRect(x+r, y, w-2*r, h, color);
   d7d24:	fa1f f88a 	uxth.w	r8, sl
   d7d28:	ea4f 0448 	mov.w	r4, r8, lsl #1
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

// Fill a rounded rectangle
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
				 int16_t h, int16_t r, uint16_t color) {
   d7d2c:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  // smarter version
  fillRect(x+r, y, w-2*r, h, color);
   d7d30:	9105      	str	r1, [sp, #20]
   d7d32:	b29d      	uxth	r5, r3
   d7d34:	eb01 0708 	add.w	r7, r1, r8
   d7d38:	b2a3      	uxth	r3, r4
   d7d3a:	6801      	ldr	r1, [r0, #0]
   d7d3c:	9c07      	ldr	r4, [sp, #28]
   d7d3e:	9306      	str	r3, [sp, #24]
   d7d40:	b23f      	sxth	r7, r7
   d7d42:	f8cd b004 	str.w	fp, [sp, #4]
   d7d46:	9400      	str	r4, [sp, #0]
   d7d48:	1aeb      	subs	r3, r5, r3
   d7d4a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   d7d4c:	b21b      	sxth	r3, r3
   d7d4e:	4639      	mov	r1, r7
  drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
}

// Fill a rounded rectangle
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
				 int16_t h, int16_t r, uint16_t color) {
   d7d50:	4681      	mov	r9, r0
   d7d52:	4616      	mov	r6, r2
  // smarter version
  fillRect(x+r, y, w-2*r, h, color);
   d7d54:	47a0      	blx	r4

  // draw four corners
  fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
   d7d56:	9b07      	ldr	r3, [sp, #28]
   d7d58:	f8cd b008 	str.w	fp, [sp, #8]
   d7d5c:	1e5c      	subs	r4, r3, #1
   d7d5e:	9b06      	ldr	r3, [sp, #24]
   d7d60:	1ae4      	subs	r4, r4, r3
   d7d62:	9b05      	ldr	r3, [sp, #20]
   d7d64:	1e69      	subs	r1, r5, #1
   d7d66:	4446      	add	r6, r8
   d7d68:	4419      	add	r1, r3
   d7d6a:	b236      	sxth	r6, r6
   d7d6c:	b224      	sxth	r4, r4
   d7d6e:	ebc8 0101 	rsb	r1, r8, r1
   d7d72:	2301      	movs	r3, #1
   d7d74:	9300      	str	r3, [sp, #0]
   d7d76:	4632      	mov	r2, r6
   d7d78:	4653      	mov	r3, sl
   d7d7a:	4648      	mov	r0, r9
   d7d7c:	9401      	str	r4, [sp, #4]
   d7d7e:	b209      	sxth	r1, r1
   d7d80:	f7ff fea2 	bl	d7ac8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
   d7d84:	2302      	movs	r3, #2
   d7d86:	9312      	str	r3, [sp, #72]	; 0x48
   d7d88:	4632      	mov	r2, r6
   d7d8a:	4653      	mov	r3, sl
   d7d8c:	4639      	mov	r1, r7
   d7d8e:	4648      	mov	r0, r9
   d7d90:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
   d7d94:	9413      	str	r4, [sp, #76]	; 0x4c
}
   d7d96:	b009      	add	sp, #36	; 0x24
   d7d98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // smarter version
  fillRect(x+r, y, w-2*r, h, color);

  // draw four corners
  fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
  fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
   d7d9c:	f7ff be94 	b.w	d7ac8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>

000d7da0 <_ZN12Adafruit_GFX12drawTriangleEsssssst>:
}

// Draw a triangle
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
   d7da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7da4:	b085      	sub	sp, #20
  drawLine(x0, y0, x1, y1, color);
   d7da6:	6807      	ldr	r7, [r0, #0]
}

// Draw a triangle
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
   d7da8:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
   d7dac:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
  drawLine(x0, y0, x1, y1, color);
   d7db0:	9501      	str	r5, [sp, #4]
}

// Draw a triangle
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
   d7db2:	4604      	mov	r4, r0
  drawLine(x0, y0, x1, y1, color);
   d7db4:	f8cd 9000 	str.w	r9, [sp]
}

// Draw a triangle
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
   d7db8:	9203      	str	r2, [sp, #12]
  drawLine(x0, y0, x1, y1, color);
   d7dba:	697f      	ldr	r7, [r7, #20]
}

// Draw a triangle
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
   d7dbc:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
   d7dc0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
   d7dc4:	468a      	mov	sl, r1
   d7dc6:	469b      	mov	fp, r3
  drawLine(x0, y0, x1, y1, color);
   d7dc8:	47b8      	blx	r7
  drawLine(x1, y1, x2, y2, color);
   d7dca:	6823      	ldr	r3, [r4, #0]
   d7dcc:	9501      	str	r5, [sp, #4]
   d7dce:	f8cd 8000 	str.w	r8, [sp]
   d7dd2:	695f      	ldr	r7, [r3, #20]
   d7dd4:	464a      	mov	r2, r9
   d7dd6:	4633      	mov	r3, r6
   d7dd8:	4659      	mov	r1, fp
   d7dda:	4620      	mov	r0, r4
   d7ddc:	47b8      	blx	r7
  drawLine(x2, y2, x0, y0, color);
   d7dde:	6823      	ldr	r3, [r4, #0]
   d7de0:	9a03      	ldr	r2, [sp, #12]
   d7de2:	920e      	str	r2, [sp, #56]	; 0x38
   d7de4:	950f      	str	r5, [sp, #60]	; 0x3c
   d7de6:	695d      	ldr	r5, [r3, #20]
   d7de8:	4642      	mov	r2, r8
   d7dea:	4653      	mov	r3, sl
   d7dec:	4631      	mov	r1, r6
   d7dee:	4620      	mov	r0, r4
   d7df0:	46ac      	mov	ip, r5
}
   d7df2:	b005      	add	sp, #20
   d7df4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
				int16_t x1, int16_t y1,
				int16_t x2, int16_t y2, uint16_t color) {
  drawLine(x0, y0, x1, y1, color);
  drawLine(x1, y1, x2, y2, color);
  drawLine(x2, y2, x0, y0, color);
   d7df8:	4760      	bx	ip

000d7dfa <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
}

// Fill a triangle
void Adafruit_GFX::fillTriangle ( int16_t x0, int16_t y0,
				  int16_t x1, int16_t y1,
				  int16_t x2, int16_t y2, uint16_t color) {
   d7dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dfe:	b08d      	sub	sp, #52	; 0x34
   d7e00:	4615      	mov	r5, r2
   d7e02:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   d7e06:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
   d7e0a:	460c      	mov	r4, r1

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
   d7e0c:	42b5      	cmp	r5, r6
}

// Fill a triangle
void Adafruit_GFX::fillTriangle ( int16_t x0, int16_t y0,
				  int16_t x1, int16_t y1,
				  int16_t x2, int16_t y2, uint16_t color) {
   d7e0e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d7e12:	9105      	str	r1, [sp, #20]
   d7e14:	4681      	mov	r9, r0
   d7e16:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
   d7e1a:	dd06      	ble.n	d7e2a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x30>
    swap(y0, y1); swap(x0, x1);
  }
  if (y1 > y2) {
   d7e1c:	4295      	cmp	r5, r2
   d7e1e:	dd0e      	ble.n	d7e3e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x44>
   d7e20:	46a8      	mov	r8, r5

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    swap(y0, y1); swap(x0, x1);
   d7e22:	4621      	mov	r1, r4
   d7e24:	4635      	mov	r5, r6
   d7e26:	461c      	mov	r4, r3
   d7e28:	e004      	b.n	d7e34 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3a>
  }
  if (y1 > y2) {
   d7e2a:	4296      	cmp	r6, r2
   d7e2c:	f340 80c2 	ble.w	d7fb4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1ba>
   d7e30:	46b0      	mov	r8, r6
   d7e32:	4619      	mov	r1, r3
    swap(y2, y1); swap(x2, x1);
  }
  if (y0 > y1) {
   d7e34:	42aa      	cmp	r2, r5
   d7e36:	db0b      	blt.n	d7e50 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x56>
   d7e38:	4616      	mov	r6, r2
   d7e3a:	4603      	mov	r3, r0
   d7e3c:	e00c      	b.n	d7e58 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5e>
   d7e3e:	4690      	mov	r8, r2
   d7e40:	4632      	mov	r2, r6
   d7e42:	462e      	mov	r6, r5
   d7e44:	4615      	mov	r5, r2
   d7e46:	461a      	mov	r2, r3
   d7e48:	4601      	mov	r1, r0

  int16_t a, b, y, last;

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    swap(y0, y1); swap(x0, x1);
   d7e4a:	4623      	mov	r3, r4
   d7e4c:	4614      	mov	r4, r2
   d7e4e:	e003      	b.n	d7e58 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5e>
   d7e50:	462e      	mov	r6, r5
   d7e52:	4623      	mov	r3, r4
   d7e54:	4615      	mov	r5, r2
   d7e56:	4604      	mov	r4, r0
  }
  if (y0 > y1) {
    swap(y0, y1); swap(x0, x1);
  }

  if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   d7e58:	4545      	cmp	r5, r8
   d7e5a:	d11d      	bne.n	d7e98 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
    a = b = x0;
    if(x1 < a)      a = x1;
   d7e5c:	429c      	cmp	r4, r3
   d7e5e:	dc05      	bgt.n	d7e6c <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x72>
   d7e60:	42a3      	cmp	r3, r4
   d7e62:	bfb8      	it	lt
   d7e64:	4623      	movlt	r3, r4
   d7e66:	461a      	mov	r2, r3
   d7e68:	4623      	mov	r3, r4
   d7e6a:	b214      	sxth	r4, r2
    else if(x1 > b) b = x1;
    if(x2 < a)      a = x2;
   d7e6c:	428b      	cmp	r3, r1
   d7e6e:	dc04      	bgt.n	d7e7a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x80>
   d7e70:	428c      	cmp	r4, r1
   d7e72:	bfb8      	it	lt
   d7e74:	460c      	movlt	r4, r1
   d7e76:	b224      	sxth	r4, r4
   d7e78:	4619      	mov	r1, r3
    else if(x2 > b) b = x2;
    drawFastHLine(a, y0, b-a+1, color);
   d7e7a:	f8d9 2000 	ldr.w	r2, [r9]
   d7e7e:	9805      	ldr	r0, [sp, #20]
   d7e80:	9016      	str	r0, [sp, #88]	; 0x58
   d7e82:	3401      	adds	r4, #1
   d7e84:	1a63      	subs	r3, r4, r1
   d7e86:	69d4      	ldr	r4, [r2, #28]
   d7e88:	b21b      	sxth	r3, r3
   d7e8a:	462a      	mov	r2, r5
   d7e8c:	4648      	mov	r0, r9
   d7e8e:	46a4      	mov	ip, r4
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
    drawFastHLine(a, y, b-a+1, color);
  }
}
   d7e90:	b00d      	add	sp, #52	; 0x34
   d7e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a = b = x0;
    if(x1 < a)      a = x1;
    else if(x1 > b) b = x1;
    if(x2 < a)      a = x2;
    else if(x2 > b) b = x2;
    drawFastHLine(a, y0, b-a+1, color);
   d7e96:	4760      	bx	ip
    return;
  }

  int16_t
    dx01 = x1 - x0,
   d7e98:	fa1f fb83 	uxth.w	fp, r3
   d7e9c:	b2a3      	uxth	r3, r4
   d7e9e:	9302      	str	r3, [sp, #8]
   d7ea0:	ebc3 030b 	rsb	r3, r3, fp
   d7ea4:	b29b      	uxth	r3, r3
    dy01 = y1 - y0,
   d7ea6:	b2a8      	uxth	r0, r5
    drawFastHLine(a, y0, b-a+1, color);
    return;
  }

  int16_t
    dx01 = x1 - x0,
   d7ea8:	9309      	str	r3, [sp, #36]	; 0x24
    dy01 = y1 - y0,
   d7eaa:	b2b3      	uxth	r3, r6
   d7eac:	1a1a      	subs	r2, r3, r0
   d7eae:	b212      	sxth	r2, r2
   d7eb0:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   d7eb2:	9a02      	ldr	r2, [sp, #8]
   d7eb4:	b289      	uxth	r1, r1
   d7eb6:	1a8a      	subs	r2, r1, r2
   d7eb8:	b292      	uxth	r2, r2
  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
   d7eba:	4546      	cmp	r6, r8
  }

  int16_t
    dx01 = x1 - x0,
    dy01 = y1 - y0,
    dx02 = x2 - x0,
   d7ebc:	9204      	str	r2, [sp, #16]
    dy02 = y2 - y0,
   d7ebe:	fa1f f288 	uxth.w	r2, r8
   d7ec2:	eba2 0000 	sub.w	r0, r2, r0
    dx12 = x2 - x1,
   d7ec6:	ebcb 0101 	rsb	r1, fp, r1
    dy12 = y2 - y1,
   d7eca:	eba2 0203 	sub.w	r2, r2, r3
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it
   d7ece:	bf18      	it	ne
   d7ed0:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff

  int16_t
    dx01 = x1 - x0,
    dy01 = y1 - y0,
    dx02 = x2 - x0,
    dy02 = y2 - y0,
   d7ed4:	b200      	sxth	r0, r0
    dx12 = x2 - x1,
   d7ed6:	b289      	uxth	r1, r1
    dy12 = y2 - y1,
   d7ed8:	b212      	sxth	r2, r2
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it
   d7eda:	bf18      	it	ne
   d7edc:	b21b      	sxthne	r3, r3
    dx02 = x2 - x0,
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    dy12 = y2 - y1,
    sa   = 0,
    sb   = 0;
   d7ede:	f04f 0a00 	mov.w	sl, #0

  int16_t
    dx01 = x1 - x0,
    dy01 = y1 - y0,
    dx02 = x2 - x0,
    dy02 = y2 - y0,
   d7ee2:	9007      	str	r0, [sp, #28]
    dx12 = x2 - x1,
   d7ee4:	9108      	str	r1, [sp, #32]
    dy12 = y2 - y1,
   d7ee6:	920b      	str	r2, [sp, #44]	; 0x2c
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y1 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it
   d7ee8:	bf14      	ite	ne
   d7eea:	9306      	strne	r3, [sp, #24]
   d7eec:	9606      	streq	r6, [sp, #24]
   d7eee:	462f      	mov	r7, r5
    dy01 = y1 - y0,
    dx02 = x2 - x0,
    dy02 = y2 - y0,
    dx12 = x2 - x1,
    dy12 = y2 - y1,
    sa   = 0,
   d7ef0:	f8cd a00c 	str.w	sl, [sp, #12]
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
   d7ef4:	9b06      	ldr	r3, [sp, #24]
   d7ef6:	429f      	cmp	r7, r3
   d7ef8:	dc29      	bgt.n	d7f4e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x154>
    a   = x0 + sa / dy01;
   d7efa:	9b03      	ldr	r3, [sp, #12]
   d7efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d7efe:	fb93 f1f2 	sdiv	r1, r3, r2
   d7f02:	9b02      	ldr	r3, [sp, #8]
    b   = x0 + sb / dy02;
   d7f04:	9a02      	ldr	r2, [sp, #8]
   d7f06:	9803      	ldr	r0, [sp, #12]
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    a   = x0 + sa / dy01;
   d7f08:	4419      	add	r1, r3
    b   = x0 + sb / dy02;
   d7f0a:	9b07      	ldr	r3, [sp, #28]
   d7f0c:	fb9a f3f3 	sdiv	r3, sl, r3
   d7f10:	4413      	add	r3, r2
   d7f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d7f14:	4402      	add	r2, r0
   d7f16:	b212      	sxth	r2, r2
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
    a   = x0 + sa / dy01;
   d7f18:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   d7f1a:	b21b      	sxth	r3, r3
   d7f1c:	9203      	str	r2, [sp, #12]
   d7f1e:	9a04      	ldr	r2, [sp, #16]
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
    drawFastHLine(a, y, b-a+1, color);
   d7f20:	9805      	ldr	r0, [sp, #20]
   d7f22:	9000      	str	r0, [sp, #0]
    sb += dx02;
    /* longhand:
    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
   d7f24:	4299      	cmp	r1, r3
   d7f26:	4492      	add	sl, r2
   d7f28:	bfc2      	ittt	gt
   d7f2a:	460a      	movgt	r2, r1
   d7f2c:	4619      	movgt	r1, r3
   d7f2e:	4613      	movgt	r3, r2
    drawFastHLine(a, y, b-a+1, color);
   d7f30:	f8d9 2000 	ldr.w	r2, [r9]
   d7f34:	3301      	adds	r3, #1
   d7f36:	69d2      	ldr	r2, [r2, #28]
   d7f38:	1a5b      	subs	r3, r3, r1
   d7f3a:	4614      	mov	r4, r2
   d7f3c:	b21b      	sxth	r3, r3
   d7f3e:	463a      	mov	r2, r7
   d7f40:	4648      	mov	r0, r9
   d7f42:	3701      	adds	r7, #1
   d7f44:	fa0f fa8a 	sxth.w	sl, sl
   d7f48:	47a0      	blx	r4
   d7f4a:	b23f      	sxth	r7, r7
  // in the second loop...which also avoids a /0 error here if y0=y1
  // (flat-topped triangle).
  if(y1 == y2) last = y1;   // Include y1 scanline
  else         last = y1-1; // Skip it

  for(y=y0; y<=last; y++) {
   d7f4c:	e7d2      	b.n	d7ef4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xfa>
    drawFastHLine(a, y, b-a+1, color);
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
   d7f4e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7f52:	1bbe      	subs	r6, r7, r6
   d7f54:	fb16 f603 	smulbb	r6, r6, r3
  sb = dx02 * (y - y0);
   d7f58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   d7f5c:	1b7d      	subs	r5, r7, r5
   d7f5e:	fb15 f503 	smulbb	r5, r5, r3
    drawFastHLine(a, y, b-a+1, color);
  }

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
   d7f62:	b236      	sxth	r6, r6
  sb = dx02 * (y - y0);
   d7f64:	b22d      	sxth	r5, r5
  for(; y<=y2; y++) {
   d7f66:	4547      	cmp	r7, r8
   d7f68:	dc27      	bgt.n	d7fba <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c0>
    a   = x1 + sa / dy12;
    b   = x0 + sb / dy02;
   d7f6a:	9a02      	ldr	r2, [sp, #8]
  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
    a   = x1 + sa / dy12;
   d7f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7f6e:	fb96 f1f3 	sdiv	r1, r6, r3
    b   = x0 + sb / dy02;
   d7f72:	9b07      	ldr	r3, [sp, #28]
   d7f74:	fb95 f3f3 	sdiv	r3, r5, r3
   d7f78:	4413      	add	r3, r2
   d7f7a:	9a08      	ldr	r2, [sp, #32]
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
    drawFastHLine(a, y, b-a+1, color);
   d7f7c:	9805      	ldr	r0, [sp, #20]
   d7f7e:	9000      	str	r0, [sp, #0]
  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
    a   = x1 + sa / dy12;
   d7f80:	4459      	add	r1, fp
   d7f82:	b209      	sxth	r1, r1
    b   = x0 + sb / dy02;
   d7f84:	b21b      	sxth	r3, r3
   d7f86:	4416      	add	r6, r2
   d7f88:	9a04      	ldr	r2, [sp, #16]
    sb += dx02;
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
   d7f8a:	4299      	cmp	r1, r3
   d7f8c:	4415      	add	r5, r2
   d7f8e:	bfc2      	ittt	gt
   d7f90:	460a      	movgt	r2, r1
   d7f92:	4619      	movgt	r1, r3
   d7f94:	4613      	movgt	r3, r2
    drawFastHLine(a, y, b-a+1, color);
   d7f96:	3301      	adds	r3, #1
   d7f98:	f8d9 2000 	ldr.w	r2, [r9]
   d7f9c:	1a5b      	subs	r3, r3, r1
   d7f9e:	f8d2 a01c 	ldr.w	sl, [r2, #28]
   d7fa2:	b21b      	sxth	r3, r3
   d7fa4:	463a      	mov	r2, r7
   d7fa6:	4648      	mov	r0, r9
   d7fa8:	3701      	adds	r7, #1
   d7faa:	b236      	sxth	r6, r6
   d7fac:	b22d      	sxth	r5, r5
   d7fae:	47d0      	blx	sl
   d7fb0:	b23f      	sxth	r7, r7

  // For lower part of triangle, find scanline crossings for segments
  // 0-2 and 1-2.  This loop is skipped if y1=y2.
  sa = dx12 * (y - y1);
  sb = dx02 * (y - y0);
  for(; y<=y2; y++) {
   d7fb2:	e7d8      	b.n	d7f66 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x16c>

  // Sort coordinates by Y order (y2 >= y1 >= y0)
  if (y0 > y1) {
    swap(y0, y1); swap(x0, x1);
  }
  if (y1 > y2) {
   d7fb4:	4690      	mov	r8, r2
   d7fb6:	4601      	mov	r1, r0
   d7fb8:	e74e      	b.n	d7e58 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5e>
    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    */
    if(a > b) swap(a,b);
    drawFastHLine(a, y, b-a+1, color);
  }
}
   d7fba:	b00d      	add	sp, #52	; 0x34
   d7fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7fc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:

void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {
   d7fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fc4:	b087      	sub	sp, #28
   d7fc6:	469a      	mov	sl, r3
   d7fc8:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
   d7fcc:	9302      	str	r3, [sp, #8]
   d7fce:	e88d 0003 	stmia.w	sp, {r0, r1}
   d7fd2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7fd6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
   d7fda:	9303      	str	r3, [sp, #12]

  int16_t i, j, byteWidth = (w + 7) / 8;
   d7fdc:	2400      	movs	r4, #0
   d7fde:	2308      	movs	r3, #8
   d7fe0:	4625      	mov	r5, r4

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   d7fe2:	9305      	str	r3, [sp, #20]
  }
}

void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {
   d7fe4:	4691      	mov	r9, r2
   d7fe6:	f108 0207 	add.w	r2, r8, #7
   d7fea:	fb92 fbf3 	sdiv	fp, r2, r3

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
   d7fee:	9a02      	ldr	r2, [sp, #8]
   d7ff0:	b22b      	sxth	r3, r5
   d7ff2:	429a      	cmp	r2, r3
   d7ff4:	dd25      	ble.n	d8042 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
    for(i=0; i<w; i++ ) {
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
	drawPixel(x+i, y+j, color);
   d7ff6:	eb09 0305 	add.w	r3, r9, r5
   d7ffa:	b21b      	sxth	r3, r3
   d7ffc:	2600      	movs	r6, #0
   d7ffe:	9304      	str	r3, [sp, #16]
   d8000:	b233      	sxth	r3, r6
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
   d8002:	4543      	cmp	r3, r8
   d8004:	da1a      	bge.n	d803c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x7c>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   d8006:	9a05      	ldr	r2, [sp, #20]
   d8008:	fb93 f3f2 	sdiv	r3, r3, r2
   d800c:	eb0a 0204 	add.w	r2, sl, r4
   d8010:	b2b1      	uxth	r1, r6
   d8012:	5cd2      	ldrb	r2, [r2, r3]
   d8014:	2080      	movs	r0, #128	; 0x80
   d8016:	f001 0307 	and.w	r3, r1, #7
   d801a:	fa40 f303 	asr.w	r3, r0, r3
   d801e:	421a      	tst	r2, r3
   d8020:	d00a      	beq.n	d8038 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x78>
	drawPixel(x+i, y+j, color);
   d8022:	9b01      	ldr	r3, [sp, #4]
   d8024:	9a04      	ldr	r2, [sp, #16]
   d8026:	9800      	ldr	r0, [sp, #0]
   d8028:	4419      	add	r1, r3
   d802a:	9b00      	ldr	r3, [sp, #0]
   d802c:	681b      	ldr	r3, [r3, #0]
   d802e:	691b      	ldr	r3, [r3, #16]
   d8030:	b209      	sxth	r1, r1
   d8032:	461f      	mov	r7, r3
   d8034:	9b03      	ldr	r3, [sp, #12]
   d8036:	47b8      	blx	r7
   d8038:	3601      	adds	r6, #1
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
    for(i=0; i<w; i++ ) {
   d803a:	e7e1      	b.n	d8000 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x40>
   d803c:	3501      	adds	r5, #1
   d803e:	445c      	add	r4, fp
			      const uint8_t *bitmap, int16_t w, int16_t h,
			      uint16_t color) {

  int16_t i, j, byteWidth = (w + 7) / 8;

  for(j=0; j<h; j++) {
   d8040:	e7d5      	b.n	d7fee <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x2e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
	drawPixel(x+i, y+j, color);
      }
    }
  }
}
   d8042:	b007      	add	sp, #28
   d8044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d8048 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d8048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d804c:	b08f      	sub	sp, #60	; 0x3c
   d804e:	4605      	mov	r5, r0
   d8050:	9106      	str	r1, [sp, #24]
   d8052:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d8056:	9107      	str	r1, [sp, #28]
   d8058:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d805c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d805e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d8062:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d8064:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d8068:	4281      	cmp	r1, r0
   d806a:	dd7c      	ble.n	d8166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d806c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d8070:	4291      	cmp	r1, r2
   d8072:	dd78      	ble.n	d8166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d8074:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d8076:	fb11 0008 	smlabb	r0, r1, r8, r0
   d807a:	2800      	cmp	r0, #0
   d807c:	dd73      	ble.n	d8166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d807e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d8082:	2800      	cmp	r0, #0
   d8084:	dd6f      	ble.n	d8166 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d8086:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d808a:	b296      	uxth	r6, r2
   d808c:	930c      	str	r3, [sp, #48]	; 0x30
   d808e:	f106 0308 	add.w	r3, r6, #8
   d8092:	b29b      	uxth	r3, r3
   d8094:	9109      	str	r1, [sp, #36]	; 0x24
   d8096:	2400      	movs	r4, #0
   d8098:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d809a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d809c:	bf1c      	itt	ne
   d809e:	4b33      	ldrne	r3, [pc, #204]	; (d816c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d80a0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d80a2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d80a4:	bf16      	itet	ne
   d80a6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d80a8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d80ac:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d80b0:	9604      	str	r6, [sp, #16]
   d80b2:	fa1f f388 	uxth.w	r3, r8
   d80b6:	9303      	str	r3, [sp, #12]
   d80b8:	9a03      	ldr	r2, [sp, #12]
   d80ba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d80be:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d80c2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d80c6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d80c8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d80ca:	920a      	str	r2, [sp, #40]	; 0x28
   d80cc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d80ce:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d80d2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d80d4:	f019 0f01 	tst.w	r9, #1
   d80d8:	d011      	beq.n	d80fe <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d80da:	f1b8 0f01 	cmp.w	r8, #1
   d80de:	682b      	ldr	r3, [r5, #0]
   d80e0:	d103      	bne.n	d80ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d80e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d80e6:	9b07      	ldr	r3, [sp, #28]
   d80e8:	e014      	b.n	d8114 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d80ea:	9a07      	ldr	r2, [sp, #28]
   d80ec:	9201      	str	r2, [sp, #4]
   d80ee:	f8cd a000 	str.w	sl, [sp]
   d80f2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d80f6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d80fa:	4653      	mov	r3, sl
   d80fc:	e018      	b.n	d8130 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d80fe:	9b07      	ldr	r3, [sp, #28]
   d8100:	9a08      	ldr	r2, [sp, #32]
   d8102:	4293      	cmp	r3, r2
   d8104:	d017      	beq.n	d8136 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d8106:	f1b8 0f01 	cmp.w	r8, #1
   d810a:	682b      	ldr	r3, [r5, #0]
   d810c:	d107      	bne.n	d811e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d810e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d8112:	4613      	mov	r3, r2
   d8114:	b23a      	sxth	r2, r7
   d8116:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d8118:	4628      	mov	r0, r5
   d811a:	47d8      	blx	fp
   d811c:	e00b      	b.n	d8136 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d811e:	9a08      	ldr	r2, [sp, #32]
   d8120:	9201      	str	r2, [sp, #4]
   d8122:	f8cd a000 	str.w	sl, [sp]
   d8126:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d812a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d812e:	4653      	mov	r3, sl
   d8130:	990a      	ldr	r1, [sp, #40]	; 0x28
   d8132:	4628      	mov	r0, r5
   d8134:	47d8      	blx	fp
   d8136:	9b04      	ldr	r3, [sp, #16]
   d8138:	9a03      	ldr	r2, [sp, #12]
   d813a:	4413      	add	r3, r2
   d813c:	b29b      	uxth	r3, r3
   d813e:	9304      	str	r3, [sp, #16]
   d8140:	9b05      	ldr	r3, [sp, #20]
   d8142:	4413      	add	r3, r2
   d8144:	b29b      	uxth	r3, r3
   d8146:	3701      	adds	r7, #1
   d8148:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d814a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d814c:	b2bf      	uxth	r7, r7
   d814e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d8150:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d8154:	d1be      	bne.n	d80d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d8156:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8158:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d815a:	3401      	adds	r4, #1
   d815c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d8160:	b264      	sxtb	r4, r4
   d8162:	9309      	str	r3, [sp, #36]	; 0x24
   d8164:	d199      	bne.n	d809a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d8166:	b00f      	add	sp, #60	; 0x3c
   d8168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d816c:	000de028 	.word	0x000de028

000d8170 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d8170:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d8172:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d8174:	b085      	sub	sp, #20
   d8176:	4604      	mov	r4, r0
   d8178:	460b      	mov	r3, r1

  if (c == '\n') {
   d817a:	d104      	bne.n	d8186 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d817c:	7e02      	ldrb	r2, [r0, #24]
   d817e:	8a43      	ldrh	r3, [r0, #18]
   d8180:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8184:	e023      	b.n	d81ce <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d8186:	290d      	cmp	r1, #13
   d8188:	d024      	beq.n	d81d4 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d818a:	7e05      	ldrb	r5, [r0, #24]
   d818c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d8190:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d8194:	9502      	str	r5, [sp, #8]
   d8196:	8ac5      	ldrh	r5, [r0, #22]
   d8198:	9501      	str	r5, [sp, #4]
   d819a:	8a85      	ldrh	r5, [r0, #20]
   d819c:	9500      	str	r5, [sp, #0]
   d819e:	f7ff ff53 	bl	d8048 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d81a2:	7e22      	ldrb	r2, [r4, #24]
   d81a4:	8a23      	ldrh	r3, [r4, #16]
   d81a6:	b291      	uxth	r1, r2
   d81a8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d81ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d81b0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d81b2:	b21b      	sxth	r3, r3
   d81b4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d81b6:	b168      	cbz	r0, d81d4 <_ZN12Adafruit_GFX5writeEh+0x64>
   d81b8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d81bc:	f06f 0505 	mvn.w	r5, #5
   d81c0:	fb05 0202 	mla	r2, r5, r2, r0
   d81c4:	4293      	cmp	r3, r2
   d81c6:	dd05      	ble.n	d81d4 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d81c8:	8a63      	ldrh	r3, [r4, #18]
   d81ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d81ce:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d81d0:	2300      	movs	r3, #0
   d81d2:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d81d4:	2001      	movs	r0, #1
   d81d6:	b005      	add	sp, #20
   d81d8:	bd30      	pop	{r4, r5, pc}

000d81da <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d81da:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d81dc:	8242      	strh	r2, [r0, #18]
   d81de:	4770      	bx	lr

000d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d81e0:	2900      	cmp	r1, #0
   d81e2:	bf08      	it	eq
   d81e4:	2101      	moveq	r1, #1
   d81e6:	7601      	strb	r1, [r0, #24]
   d81e8:	4770      	bx	lr

000d81ea <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d81ea:	82c1      	strh	r1, [r0, #22]
   d81ec:	8281      	strh	r1, [r0, #20]
   d81ee:	4770      	bx	lr

000d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>:
  textcolor   = c;
  textbgcolor = b; 
}

void Adafruit_GFX::setTextWrap(boolean w) {
  wrap = w;
   d81f0:	7681      	strb	r1, [r0, #26]
   d81f2:	4770      	bx	lr

000d81f4 <_ZN12Adafruit_GFX11getRotationEv>:
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d81f4:	7e40      	ldrb	r0, [r0, #25]
   d81f6:	4770      	bx	lr

000d81f8 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d81f8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d81fc:	4770      	bx	lr

000d81fe <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d81fe:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d8202:	4770      	bx	lr

000d8204 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d8204:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d8206:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d8208:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d820c:	2c02      	cmp	r4, #2
   d820e:	d008      	beq.n	d8222 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d8210:	2c03      	cmp	r4, #3
   d8212:	d00f      	beq.n	d8234 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d8214:	2c01      	cmp	r4, #1
   d8216:	d170      	bne.n	d82fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d8218:	8904      	ldrh	r4, [r0, #8]
   d821a:	3c01      	subs	r4, #1
   d821c:	1aa2      	subs	r2, r4, r2
   d821e:	b212      	sxth	r2, r2
      break;
   d8220:	e00c      	b.n	d823c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d8222:	8944      	ldrh	r4, [r0, #10]
   d8224:	3c01      	subs	r4, #1
   d8226:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d8228:	8904      	ldrh	r4, [r0, #8]
   d822a:	1ae4      	subs	r4, r4, r3
   d822c:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d822e:	b212      	sxth	r2, r2
      x -= (w-1);
   d8230:	b209      	sxth	r1, r1
      break;
   d8232:	e062      	b.n	d82fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d8234:	8944      	ldrh	r4, [r0, #10]
   d8236:	1ae4      	subs	r4, r4, r3
   d8238:	1a61      	subs	r1, r4, r1
   d823a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d823c:	2a00      	cmp	r2, #0
   d823e:	db5b      	blt.n	d82f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d8240:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d8244:	4294      	cmp	r4, r2
   d8246:	f340 8090 	ble.w	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d824a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d824c:	bfbe      	ittt	lt
   d824e:	185b      	addlt	r3, r3, r1
   d8250:	b21b      	sxthlt	r3, r3
    __y = 0;
   d8252:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d8254:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d8258:	18cc      	adds	r4, r1, r3
   d825a:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d825c:	bfc4      	itt	gt
   d825e:	1a43      	subgt	r3, r0, r1
   d8260:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d8262:	2b00      	cmp	r3, #0
   d8264:	f340 8081 	ble.w	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d8268:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d826a:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d826c:	4f3f      	ldr	r7, [pc, #252]	; (d836c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d826e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d8272:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d8276:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d8278:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d827c:	d017      	beq.n	d82ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d827e:	f1c1 0108 	rsb	r1, r1, #8
   d8282:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d8284:	493a      	ldr	r1, [pc, #232]	; (d8370 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d8286:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d8288:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d828a:	bf3f      	itttt	cc
   d828c:	ebc3 0e00 	rsbcc	lr, r3, r0
   d8290:	21ff      	movcc	r1, #255	; 0xff
   d8292:	fa41 f10e 	asrcc.w	r1, r1, lr
   d8296:	400e      	andcc	r6, r1
   d8298:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d829a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d829c:	bf0c      	ite	eq
   d829e:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d82a0:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d82a2:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d82a4:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d82a6:	d360      	bcc.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d82a8:	1a18      	subs	r0, r3, r0
   d82aa:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d82ac:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d82ae:	2b07      	cmp	r3, #7
   d82b0:	d917      	bls.n	d82e2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d82b2:	2d01      	cmp	r5, #1
   d82b4:	bf0c      	ite	eq
   d82b6:	20ff      	moveq	r0, #255	; 0xff
   d82b8:	2000      	movne	r0, #0
   d82ba:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d82be:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d82c0:	3a08      	subs	r2, #8
   d82c2:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d82c4:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d82c6:	f801 0c80 	strb.w	r0, [r1, #-128]
   d82ca:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d82ce:	d8f7      	bhi.n	d82c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d82d0:	f1a3 0208 	sub.w	r2, r3, #8
   d82d4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d82d8:	3201      	adds	r2, #1
   d82da:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d82de:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d82e2:	2b00      	cmp	r3, #0
   d82e4:	d041      	beq.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d82e6:	4a23      	ldr	r2, [pc, #140]	; (d8374 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d82e8:	5cd2      	ldrb	r2, [r2, r3]
   d82ea:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d82ec:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d82ee:	bf0c      	ite	eq
   d82f0:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d82f2:	4393      	bicne	r3, r2
   d82f4:	7023      	strb	r3, [r4, #0]
   d82f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d82f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d82fa:	2a00      	cmp	r2, #0
   d82fc:	db35      	blt.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d82fe:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d8302:	4294      	cmp	r4, r2
   d8304:	dd31      	ble.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d8306:	2900      	cmp	r1, #0
    w += x;
   d8308:	bfbc      	itt	lt
   d830a:	18c9      	addlt	r1, r1, r3
   d830c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d830e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d8312:	bfb8      	it	lt
   d8314:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d8316:	18ce      	adds	r6, r1, r3
   d8318:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d831a:	bfc4      	itt	gt
   d831c:	1a63      	subgt	r3, r4, r1
   d831e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d8320:	2b00      	cmp	r3, #0
   d8322:	dd22      	ble.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d8324:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d8326:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d832a:	4810      	ldr	r0, [pc, #64]	; (d836c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d832c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d8330:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d8332:	2001      	movs	r0, #1
   d8334:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d8338:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d833a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d833c:	d109      	bne.n	d8352 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d833e:	3b01      	subs	r3, #1
   d8340:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d8342:	1c5c      	adds	r4, r3, #1
   d8344:	d011      	beq.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d8346:	f811 0b01 	ldrb.w	r0, [r1], #1
   d834a:	4310      	orrs	r0, r2
   d834c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d8350:	e7f5      	b.n	d833e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d8352:	43d2      	mvns	r2, r2
   d8354:	b2d2      	uxtb	r2, r2
   d8356:	3b01      	subs	r3, #1
   d8358:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d835a:	1c58      	adds	r0, r3, #1
   d835c:	d005      	beq.n	d836a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d835e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d8362:	4010      	ands	r0, r2
   d8364:	f801 0c01 	strb.w	r0, [r1, #-1]
   d8368:	e7f5      	b.n	d8356 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d836a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d836c:	2003dca0 	.word	0x2003dca0
   d8370:	2003dc98 	.word	0x2003dc98
   d8374:	2003dc90 	.word	0x2003dc90

000d8378 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d8378:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d837a:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d837c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d8380:	2c02      	cmp	r4, #2
   d8382:	d008      	beq.n	d8396 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d8384:	2c03      	cmp	r4, #3
   d8386:	d00f      	beq.n	d83a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d8388:	2c01      	cmp	r4, #1
   d838a:	d112      	bne.n	d83b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d838c:	8904      	ldrh	r4, [r0, #8]
   d838e:	1ae4      	subs	r4, r4, r3
   d8390:	1aa2      	subs	r2, r4, r2
   d8392:	b212      	sxth	r2, r2
      break;
   d8394:	e06d      	b.n	d8472 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d8396:	8904      	ldrh	r4, [r0, #8]
   d8398:	3c01      	subs	r4, #1
   d839a:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d839c:	8944      	ldrh	r4, [r0, #10]
   d839e:	1ae4      	subs	r4, r4, r3
   d83a0:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d83a2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d83a4:	b212      	sxth	r2, r2
      break;
   d83a6:	e004      	b.n	d83b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d83a8:	8944      	ldrh	r4, [r0, #10]
   d83aa:	3c01      	subs	r4, #1
   d83ac:	1a61      	subs	r1, r4, r1
   d83ae:	b209      	sxth	r1, r1
      break;
   d83b0:	e05f      	b.n	d8472 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d83b2:	2900      	cmp	r1, #0
   d83b4:	db5c      	blt.n	d8470 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d83b6:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d83ba:	428c      	cmp	r4, r1
   d83bc:	f340 8091 	ble.w	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d83c0:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d83c2:	bfbc      	itt	lt
   d83c4:	18d2      	addlt	r2, r2, r3
   d83c6:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d83c8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d83cc:	bfb8      	it	lt
   d83ce:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d83d0:	18d4      	adds	r4, r2, r3
   d83d2:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d83d4:	bfc4      	itt	gt
   d83d6:	1a83      	subgt	r3, r0, r2
   d83d8:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d83da:	2b00      	cmp	r3, #0
   d83dc:	f340 8081 	ble.w	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d83e0:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d83e2:	4e40      	ldr	r6, [pc, #256]	; (d84e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d83e4:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d83e6:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d83e8:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d83ec:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d83f0:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d83f4:	d017      	beq.n	d8426 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d83f6:	f1c4 0408 	rsb	r4, r4, #8
   d83fa:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d83fc:	4c3a      	ldr	r4, [pc, #232]	; (d84e8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d83fe:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d8400:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d8402:	bf3f      	itttt	cc
   d8404:	ebc2 0e00 	rsbcc	lr, r2, r0
   d8408:	24ff      	movcc	r4, #255	; 0xff
   d840a:	fa44 f40e 	asrcc.w	r4, r4, lr
   d840e:	4027      	andcc	r7, r4
   d8410:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d8412:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d8414:	bf0c      	ite	eq
   d8416:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d8418:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d841a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d841c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d841e:	d360      	bcc.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d8420:	1a10      	subs	r0, r2, r0
   d8422:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d8424:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d8426:	2a07      	cmp	r2, #7
   d8428:	d917      	bls.n	d845a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d842a:	2d01      	cmp	r5, #1
   d842c:	bf0c      	ite	eq
   d842e:	24ff      	moveq	r4, #255	; 0xff
   d8430:	2400      	movne	r4, #0
   d8432:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d8436:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d8438:	3908      	subs	r1, #8
   d843a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d843c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d843e:	f800 4c80 	strb.w	r4, [r0, #-128]
   d8442:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d8446:	d8f7      	bhi.n	d8438 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d8448:	f1a2 0108 	sub.w	r1, r2, #8
   d844c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d8450:	3101      	adds	r1, #1
   d8452:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d8456:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d845a:	2a00      	cmp	r2, #0
   d845c:	d041      	beq.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d845e:	4923      	ldr	r1, [pc, #140]	; (d84ec <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d8460:	5c89      	ldrb	r1, [r1, r2]
   d8462:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d8464:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d8466:	bf0c      	ite	eq
   d8468:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d846a:	438a      	bicne	r2, r1
   d846c:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d846e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8470:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d8472:	2900      	cmp	r1, #0
   d8474:	db35      	blt.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d8476:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d847a:	428c      	cmp	r4, r1
   d847c:	dd31      	ble.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d847e:	2a00      	cmp	r2, #0
    w += x;
   d8480:	bfbc      	itt	lt
   d8482:	18d2      	addlt	r2, r2, r3
   d8484:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d8486:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d848a:	bfb8      	it	lt
   d848c:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d848e:	18d6      	adds	r6, r2, r3
   d8490:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d8492:	bfc4      	itt	gt
   d8494:	1aa3      	subgt	r3, r4, r2
   d8496:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d8498:	2b00      	cmp	r3, #0
   d849a:	dd22      	ble.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d849c:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d849e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d84a2:	4810      	ldr	r0, [pc, #64]	; (d84e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d84a4:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d84a8:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d84aa:	2201      	movs	r2, #1
   d84ac:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d84b0:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d84b2:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d84b4:	d109      	bne.n	d84ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d84b6:	1e5a      	subs	r2, r3, #1
   d84b8:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d84ba:	1c5c      	adds	r4, r3, #1
   d84bc:	d011      	beq.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d84be:	f810 2b01 	ldrb.w	r2, [r0], #1
   d84c2:	430a      	orrs	r2, r1
   d84c4:	f800 2c01 	strb.w	r2, [r0, #-1]
   d84c8:	e7f5      	b.n	d84b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d84ca:	43c9      	mvns	r1, r1
   d84cc:	b2c9      	uxtb	r1, r1
   d84ce:	1e5a      	subs	r2, r3, #1
   d84d0:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d84d2:	1c5a      	adds	r2, r3, #1
   d84d4:	d005      	beq.n	d84e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d84d6:	f810 2b01 	ldrb.w	r2, [r0], #1
   d84da:	400a      	ands	r2, r1
   d84dc:	f800 2c01 	strb.w	r2, [r0, #-1]
   d84e0:	e7f5      	b.n	d84ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d84e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d84e4:	2003dca0 	.word	0x2003dca0
   d84e8:	2003dc98 	.word	0x2003dc98
   d84ec:	2003dc90 	.word	0x2003dc90

000d84f0 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d84f0:	b410      	push	{r4}
  
  if(hwSPI) {
   d84f2:	b12a      	cbz	r2, d8500 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x10>
    (void)SPI.transfer(d);
   d84f4:	4619      	mov	r1, r3
   d84f6:	4806      	ldr	r0, [pc, #24]	; (d8510 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x20>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
   d84f8:	f85d 4b04 	ldr.w	r4, [sp], #4


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
   d84fc:	f002 b872 	b.w	da5e4 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d8500:	2201      	movs	r2, #1
   d8502:	b2c9      	uxtb	r1, r1
   d8504:	b2c0      	uxtb	r0, r0
  }
}
   d8506:	f85d 4b04 	ldr.w	r4, [sp], #4
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d850a:	f002 bff5 	b.w	db4f8 <shiftOut>
   d850e:	bf00      	nop
   d8510:	2003e740 	.word	0x2003e740

000d8514 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d8514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d8516:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d8518:	4606      	mov	r6, r0
   d851a:	4614      	mov	r4, r2
   d851c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d851e:	db3f      	blt.n	d85a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d8520:	f7ff fe6a 	bl	d81f8 <_ZN12Adafruit_GFX5widthEv>
   d8524:	4285      	cmp	r5, r0
   d8526:	da3b      	bge.n	d85a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d8528:	2c00      	cmp	r4, #0
   d852a:	db39      	blt.n	d85a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d852c:	4630      	mov	r0, r6
   d852e:	f7ff fe66 	bl	d81fe <_ZN12Adafruit_GFX6heightEv>
   d8532:	4284      	cmp	r4, r0
   d8534:	da34      	bge.n	d85a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d8536:	4630      	mov	r0, r6
   d8538:	f7ff fe5c 	bl	d81f4 <_ZN12Adafruit_GFX11getRotationEv>
   d853c:	2802      	cmp	r0, #2
   d853e:	d127      	bne.n	d8590 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d8540:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d8542:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d8544:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d8546:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d8548:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d854a:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d854c:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d854e:	b204      	sxth	r4, r0
   d8550:	e006      	b.n	d8560 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d8552:	2801      	cmp	r0, #1
   d8554:	d104      	bne.n	d8560 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d8556:	8933      	ldrh	r3, [r6, #8]
   d8558:	3b01      	subs	r3, #1
   d855a:	1b1b      	subs	r3, r3, r4
   d855c:	462c      	mov	r4, r5
   d855e:	b21d      	sxth	r5, r3
   d8560:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d8562:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d8564:	fb94 f0f0 	sdiv	r0, r4, r0
   d8568:	b200      	sxth	r0, r0
   d856a:	4b0e      	ldr	r3, [pc, #56]	; (d85a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d856c:	f004 0207 	and.w	r2, r4, #7
   d8570:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d8574:	d104      	bne.n	d8580 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d8576:	4097      	lsls	r7, r2
   d8578:	5c5a      	ldrb	r2, [r3, r1]
   d857a:	4317      	orrs	r7, r2
   d857c:	545f      	strb	r7, [r3, r1]
   d857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d8580:	5c58      	ldrb	r0, [r3, r1]
   d8582:	2701      	movs	r7, #1
   d8584:	fa07 f202 	lsl.w	r2, r7, r2
   d8588:	ea20 0202 	bic.w	r2, r0, r2
   d858c:	545a      	strb	r2, [r3, r1]
   d858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d8590:	2803      	cmp	r0, #3
   d8592:	d1de      	bne.n	d8552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d8594:	8973      	ldrh	r3, [r6, #10]
   d8596:	3b01      	subs	r3, #1
   d8598:	1b5b      	subs	r3, r3, r5
   d859a:	4625      	mov	r5, r4
   d859c:	b21c      	sxth	r4, r3
   d859e:	e7df      	b.n	d8560 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d85a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d85a2:	bf00      	nop
   d85a4:	2003dca0 	.word	0x2003dca0

000d85a8 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d85a8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d85aa:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d85ac:	4604      	mov	r4, r0
   d85ae:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d85b0:	2180      	movs	r1, #128	; 0x80
   d85b2:	f7ff f8db 	bl	d776c <_ZN12Adafruit_GFXC1Ess>
   d85b6:	4b06      	ldr	r3, [pc, #24]	; (d85d0 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d85b8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d85ba:	23ff      	movs	r3, #255	; 0xff
   d85bc:	7763      	strb	r3, [r4, #29]
   d85be:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d85c2:	77e3      	strb	r3, [r4, #31]
   d85c4:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d85c6:	f884 5020 	strb.w	r5, [r4, #32]
}
   d85ca:	4620      	mov	r0, r4
   d85cc:	bd38      	pop	{r3, r4, r5, pc}
   d85ce:	bf00      	nop
   d85d0:	000de52c 	.word	0x000de52c

000d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d85d4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d85d6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d85da:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d85dc:	4604      	mov	r4, r0
   d85de:	460d      	mov	r5, r1
  if (sid != -1)
   d85e0:	d022      	beq.n	d8628 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d85e2:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d85e6:	2101      	movs	r1, #1
   d85e8:	b280      	uxth	r0, r0
   d85ea:	f002 ff1c 	bl	db426 <digitalWrite>
    digitalWrite(dc, LOW);
   d85ee:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d85f2:	2100      	movs	r1, #0
   d85f4:	b280      	uxth	r0, r0
   d85f6:	f002 ff16 	bl	db426 <digitalWrite>
    digitalWrite(cs, LOW);
   d85fa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d85fe:	2100      	movs	r1, #0
   d8600:	b280      	uxth	r0, r0
   d8602:	f002 ff10 	bl	db426 <digitalWrite>
    fastSPIwrite(c);
   d8606:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d860a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d860e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d8612:	462b      	mov	r3, r5
   d8614:	f7ff ff6c 	bl	d84f0 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
   d8618:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d861c:	2101      	movs	r1, #1
   d861e:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d8620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d8624:	f002 beff 	b.w	db426 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d8628:	f002 ff9e 	bl	db568 <_Z19__fetch_global_Wirev>
   d862c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d8630:	f001 fbb2 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d8634:	f002 ff98 	bl	db568 <_Z19__fetch_global_Wirev>
   d8638:	6803      	ldr	r3, [r0, #0]
   d863a:	2100      	movs	r1, #0
   d863c:	689b      	ldr	r3, [r3, #8]
   d863e:	4798      	blx	r3
    Wire.write(c);
   d8640:	f002 ff92 	bl	db568 <_Z19__fetch_global_Wirev>
   d8644:	6803      	ldr	r3, [r0, #0]
   d8646:	4629      	mov	r1, r5
   d8648:	689b      	ldr	r3, [r3, #8]
   d864a:	4798      	blx	r3
    Wire.endTransmission();
   d864c:	f002 ff8c 	bl	db568 <_Z19__fetch_global_Wirev>
  }
}
   d8650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d8654:	f001 bba7 	b.w	d9da6 <_ZN7TwoWire15endTransmissionEv>

000d8658 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d8658:	b538      	push	{r3, r4, r5, lr}
   d865a:	4604      	mov	r4, r0
   d865c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d865e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d8660:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d8664:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d8666:	3301      	adds	r3, #1
   d8668:	d033      	beq.n	d86d2 <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
   d866a:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d866e:	2101      	movs	r1, #1
   d8670:	b280      	uxth	r0, r0
   d8672:	f002 fec7 	bl	db404 <pinMode>
    pinMode(cs, OUTPUT);
   d8676:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d867a:	2101      	movs	r1, #1
   d867c:	b280      	uxth	r0, r0
   d867e:	f002 fec1 	bl	db404 <pinMode>
    if (!hwSPI){
   d8682:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d8686:	b95b      	cbnz	r3, d86a0 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d8688:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d868c:	2101      	movs	r1, #1
   d868e:	b280      	uxth	r0, r0
   d8690:	f002 feb8 	bl	db404 <pinMode>
    	pinMode(sclk, OUTPUT);
   d8694:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d8698:	2101      	movs	r1, #1
   d869a:	b280      	uxth	r0, r0
   d869c:	f002 feb2 	bl	db404 <pinMode>
    	}
    if (hwSPI){
   d86a0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d86a4:	b1cb      	cbz	r3, d86da <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
   d86a6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d86aa:	2101      	movs	r1, #1
   d86ac:	b280      	uxth	r0, r0
   d86ae:	f002 feba 	bl	db426 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d86b2:	2101      	movs	r1, #1
   d86b4:	484f      	ldr	r0, [pc, #316]	; (d87f4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d86b6:	f001 ff34 	bl	da522 <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d86ba:	2110      	movs	r1, #16
   d86bc:	484d      	ldr	r0, [pc, #308]	; (d87f4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d86be:	f001 ff7d 	bl	da5bc <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d86c2:	2100      	movs	r1, #0
   d86c4:	484b      	ldr	r0, [pc, #300]	; (d87f4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d86c6:	f001 ff2f 	bl	da528 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d86ca:	484a      	ldr	r0, [pc, #296]	; (d87f4 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d86cc:	f001 ff24 	bl	da518 <_ZN8SPIClass5beginEv>
   d86d0:	e003      	b.n	d86da <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d86d2:	f002 ff49 	bl	db568 <_Z19__fetch_global_Wirev>
   d86d6:	f001 fb47 	bl	d9d68 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d86da:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d86de:	2101      	movs	r1, #1
   d86e0:	b280      	uxth	r0, r0
   d86e2:	f002 fe8f 	bl	db404 <pinMode>
  digitalWrite(rst, HIGH);
   d86e6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d86ea:	2101      	movs	r1, #1
   d86ec:	b280      	uxth	r0, r0
   d86ee:	f002 fe9a 	bl	db426 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d86f2:	2001      	movs	r0, #1
   d86f4:	f001 f814 	bl	d9720 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d86f8:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d86fc:	2100      	movs	r1, #0
   d86fe:	b280      	uxth	r0, r0
   d8700:	f002 fe91 	bl	db426 <digitalWrite>
  // wait 10ms
  delay(10);
   d8704:	200a      	movs	r0, #10
   d8706:	f001 f80b 	bl	d9720 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d870a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d870e:	2101      	movs	r1, #1
   d8710:	b280      	uxth	r0, r0
   d8712:	f002 fe88 	bl	db426 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d8716:	4620      	mov	r0, r4
   d8718:	21ae      	movs	r1, #174	; 0xae
   d871a:	f7ff ff5b 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d871e:	4620      	mov	r0, r4
   d8720:	21d5      	movs	r1, #213	; 0xd5
   d8722:	f7ff ff57 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d8726:	4620      	mov	r0, r4
   d8728:	2180      	movs	r1, #128	; 0x80
   d872a:	f7ff ff53 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d872e:	4620      	mov	r0, r4
   d8730:	21a8      	movs	r1, #168	; 0xa8
   d8732:	f7ff ff4f 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d8736:	4620      	mov	r0, r4
   d8738:	213f      	movs	r1, #63	; 0x3f
   d873a:	f7ff ff4b 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d873e:	4620      	mov	r0, r4
   d8740:	21d3      	movs	r1, #211	; 0xd3
   d8742:	f7ff ff47 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d8746:	4620      	mov	r0, r4
   d8748:	2100      	movs	r1, #0
   d874a:	f7ff ff43 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d874e:	4620      	mov	r0, r4
   d8750:	2140      	movs	r1, #64	; 0x40
   d8752:	f7ff ff3f 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d8756:	218d      	movs	r1, #141	; 0x8d
   d8758:	4620      	mov	r0, r4
   d875a:	f7ff ff3b 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d875e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d8760:	bf0c      	ite	eq
   d8762:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d8764:	2114      	movne	r1, #20
   d8766:	4620      	mov	r0, r4
   d8768:	f7ff ff34 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d876c:	4620      	mov	r0, r4
   d876e:	2120      	movs	r1, #32
   d8770:	f7ff ff30 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d8774:	4620      	mov	r0, r4
   d8776:	2100      	movs	r1, #0
   d8778:	f7ff ff2c 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d877c:	4620      	mov	r0, r4
   d877e:	21a1      	movs	r1, #161	; 0xa1
   d8780:	f7ff ff28 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d8784:	4620      	mov	r0, r4
   d8786:	21c8      	movs	r1, #200	; 0xc8
   d8788:	f7ff ff24 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d878c:	4620      	mov	r0, r4
   d878e:	21da      	movs	r1, #218	; 0xda
   d8790:	f7ff ff20 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d8794:	4620      	mov	r0, r4
   d8796:	2112      	movs	r1, #18
   d8798:	f7ff ff1c 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d879c:	2181      	movs	r1, #129	; 0x81
   d879e:	4620      	mov	r0, r4
   d87a0:	f7ff ff18 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d87a4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d87a6:	bf0c      	ite	eq
   d87a8:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d87aa:	21cf      	movne	r1, #207	; 0xcf
   d87ac:	4620      	mov	r0, r4
   d87ae:	f7ff ff11 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d87b2:	21d9      	movs	r1, #217	; 0xd9
   d87b4:	4620      	mov	r0, r4
   d87b6:	f7ff ff0d 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d87ba:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d87bc:	bf0c      	ite	eq
   d87be:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d87c0:	21f1      	movne	r1, #241	; 0xf1
   d87c2:	4620      	mov	r0, r4
   d87c4:	f7ff ff06 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d87c8:	4620      	mov	r0, r4
   d87ca:	21db      	movs	r1, #219	; 0xdb
   d87cc:	f7ff ff02 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d87d0:	4620      	mov	r0, r4
   d87d2:	2140      	movs	r1, #64	; 0x40
   d87d4:	f7ff fefe 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d87d8:	4620      	mov	r0, r4
   d87da:	21a4      	movs	r1, #164	; 0xa4
   d87dc:	f7ff fefa 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d87e0:	4620      	mov	r0, r4
   d87e2:	21a6      	movs	r1, #166	; 0xa6
   d87e4:	f7ff fef6 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d87e8:	4620      	mov	r0, r4
   d87ea:	21af      	movs	r1, #175	; 0xaf
}
   d87ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d87f0:	f7ff bef0 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d87f4:	2003e740 	.word	0x2003e740

000d87f8 <_ZN16Adafruit_SSD130613invertDisplayEh>:
}


void Adafruit_SSD1306::invertDisplay(uint8_t i) {
  if (i) {
   d87f8:	b109      	cbz	r1, d87fe <_ZN16Adafruit_SSD130613invertDisplayEh+0x6>
    ssd1306_command(SSD1306_INVERTDISPLAY);
   d87fa:	21a7      	movs	r1, #167	; 0xa7
   d87fc:	e000      	b.n	d8800 <_ZN16Adafruit_SSD130613invertDisplayEh+0x8>
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
   d87fe:	21a6      	movs	r1, #166	; 0xa6
   d8800:	f7ff bee8 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d8804 <_ZN16Adafruit_SSD130616startscrollrightEhh>:

// startscrollright
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop){
   d8804:	b570      	push	{r4, r5, r6, lr}
   d8806:	4604      	mov	r4, r0
   d8808:	460e      	mov	r6, r1
	ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
   d880a:	2126      	movs	r1, #38	; 0x26

// startscrollright
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop){
   d880c:	4615      	mov	r5, r2
	ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
   d880e:	f7ff fee1 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8812:	4620      	mov	r0, r4
   d8814:	2100      	movs	r1, #0
   d8816:	f7ff fedd 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(start);
   d881a:	4631      	mov	r1, r6
   d881c:	4620      	mov	r0, r4
   d881e:	f7ff fed9 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8822:	4620      	mov	r0, r4
   d8824:	2100      	movs	r1, #0
   d8826:	f7ff fed5 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(stop);
   d882a:	4629      	mov	r1, r5
   d882c:	4620      	mov	r0, r4
   d882e:	f7ff fed1 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8832:	4620      	mov	r0, r4
   d8834:	2100      	movs	r1, #0
   d8836:	f7ff fecd 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0XFF);
   d883a:	4620      	mov	r0, r4
   d883c:	21ff      	movs	r1, #255	; 0xff
   d883e:	f7ff fec9 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d8842:	4620      	mov	r0, r4
   d8844:	212f      	movs	r1, #47	; 0x2f
}
   d8846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_command(start);
	ssd1306_command(0X00);
	ssd1306_command(stop);
	ssd1306_command(0X00);
	ssd1306_command(0XFF);
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d884a:	f7ff bec3 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d884e <_ZN16Adafruit_SSD130615startscrollleftEhh>:

// startscrollleft
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrollleft(uint8_t start, uint8_t stop){
   d884e:	b570      	push	{r4, r5, r6, lr}
   d8850:	4604      	mov	r4, r0
   d8852:	460e      	mov	r6, r1
	ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
   d8854:	2127      	movs	r1, #39	; 0x27

// startscrollleft
// Activate a right handed scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrollleft(uint8_t start, uint8_t stop){
   d8856:	4615      	mov	r5, r2
	ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
   d8858:	f7ff febc 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d885c:	4620      	mov	r0, r4
   d885e:	2100      	movs	r1, #0
   d8860:	f7ff feb8 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(start);
   d8864:	4631      	mov	r1, r6
   d8866:	4620      	mov	r0, r4
   d8868:	f7ff feb4 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d886c:	4620      	mov	r0, r4
   d886e:	2100      	movs	r1, #0
   d8870:	f7ff feb0 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(stop);
   d8874:	4629      	mov	r1, r5
   d8876:	4620      	mov	r0, r4
   d8878:	f7ff feac 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d887c:	4620      	mov	r0, r4
   d887e:	2100      	movs	r1, #0
   d8880:	f7ff fea8 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0XFF);
   d8884:	4620      	mov	r0, r4
   d8886:	21ff      	movs	r1, #255	; 0xff
   d8888:	f7ff fea4 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d888c:	4620      	mov	r0, r4
   d888e:	212f      	movs	r1, #47	; 0x2f
}
   d8890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_command(start);
	ssd1306_command(0X00);
	ssd1306_command(stop);
	ssd1306_command(0X00);
	ssd1306_command(0XFF);
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d8894:	f7ff be9e 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d8898 <_ZN16Adafruit_SSD130620startscrolldiagrightEhh>:

// startscrolldiagright
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrolldiagright(uint8_t start, uint8_t stop){
   d8898:	b570      	push	{r4, r5, r6, lr}
   d889a:	4604      	mov	r4, r0
   d889c:	460e      	mov	r6, r1
	ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);	
   d889e:	21a3      	movs	r1, #163	; 0xa3

// startscrolldiagright
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrolldiagright(uint8_t start, uint8_t stop){
   d88a0:	4615      	mov	r5, r2
	ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);	
   d88a2:	f7ff fe97 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d88a6:	4620      	mov	r0, r4
   d88a8:	2100      	movs	r1, #0
   d88aa:	f7ff fe93 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_LCDHEIGHT);
   d88ae:	4620      	mov	r0, r4
   d88b0:	2140      	movs	r1, #64	; 0x40
   d88b2:	f7ff fe8f 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
   d88b6:	4620      	mov	r0, r4
   d88b8:	2129      	movs	r1, #41	; 0x29
   d88ba:	f7ff fe8b 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d88be:	4620      	mov	r0, r4
   d88c0:	2100      	movs	r1, #0
   d88c2:	f7ff fe87 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(start);
   d88c6:	4631      	mov	r1, r6
   d88c8:	4620      	mov	r0, r4
   d88ca:	f7ff fe83 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d88ce:	4620      	mov	r0, r4
   d88d0:	2100      	movs	r1, #0
   d88d2:	f7ff fe7f 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(stop);
   d88d6:	4629      	mov	r1, r5
   d88d8:	4620      	mov	r0, r4
   d88da:	f7ff fe7b 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X01);
   d88de:	4620      	mov	r0, r4
   d88e0:	2101      	movs	r1, #1
   d88e2:	f7ff fe77 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d88e6:	4620      	mov	r0, r4
   d88e8:	212f      	movs	r1, #47	; 0x2f
}
   d88ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_command(0X00);
	ssd1306_command(start);
	ssd1306_command(0X00);
	ssd1306_command(stop);
	ssd1306_command(0X01);
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d88ee:	f7ff be71 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d88f2 <_ZN16Adafruit_SSD130619startscrolldiagleftEhh>:

// startscrolldiagleft
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrolldiagleft(uint8_t start, uint8_t stop){
   d88f2:	b570      	push	{r4, r5, r6, lr}
   d88f4:	4604      	mov	r4, r0
   d88f6:	460e      	mov	r6, r1
	ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);	
   d88f8:	21a3      	movs	r1, #163	; 0xa3

// startscrolldiagleft
// Activate a diagonal scroll for rows start through stop
// Hint, the display is 16 rows tall. To scroll the whole display, run:
// display.scrollright(0x00, 0x0F) 
void Adafruit_SSD1306::startscrolldiagleft(uint8_t start, uint8_t stop){
   d88fa:	4615      	mov	r5, r2
	ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);	
   d88fc:	f7ff fe6a 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8900:	4620      	mov	r0, r4
   d8902:	2100      	movs	r1, #0
   d8904:	f7ff fe66 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_LCDHEIGHT);
   d8908:	4620      	mov	r0, r4
   d890a:	2140      	movs	r1, #64	; 0x40
   d890c:	f7ff fe62 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
   d8910:	4620      	mov	r0, r4
   d8912:	212a      	movs	r1, #42	; 0x2a
   d8914:	f7ff fe5e 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8918:	4620      	mov	r0, r4
   d891a:	2100      	movs	r1, #0
   d891c:	f7ff fe5a 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(start);
   d8920:	4631      	mov	r1, r6
   d8922:	4620      	mov	r0, r4
   d8924:	f7ff fe56 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X00);
   d8928:	4620      	mov	r0, r4
   d892a:	2100      	movs	r1, #0
   d892c:	f7ff fe52 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(stop);
   d8930:	4629      	mov	r1, r5
   d8932:	4620      	mov	r0, r4
   d8934:	f7ff fe4e 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(0X01);
   d8938:	4620      	mov	r0, r4
   d893a:	2101      	movs	r1, #1
   d893c:	f7ff fe4a 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d8940:	4620      	mov	r0, r4
   d8942:	212f      	movs	r1, #47	; 0x2f
}
   d8944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ssd1306_command(0X00);
	ssd1306_command(start);
	ssd1306_command(0X00);
	ssd1306_command(stop);
	ssd1306_command(0X01);
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   d8948:	f7ff be44 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d894c <_ZN16Adafruit_SSD130610stopscrollEv>:
}

void Adafruit_SSD1306::stopscroll(void){
	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   d894c:	212e      	movs	r1, #46	; 0x2e
   d894e:	f7ff be41 	b.w	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
	...

000d8954 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d8954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d8958:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d895a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d895c:	f7ff fe3a 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d8960:	2100      	movs	r1, #0
   d8962:	4620      	mov	r0, r4
   d8964:	f7ff fe36 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d8968:	217f      	movs	r1, #127	; 0x7f
   d896a:	4620      	mov	r0, r4
   d896c:	f7ff fe32 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d8970:	2122      	movs	r1, #34	; 0x22
   d8972:	4620      	mov	r0, r4
   d8974:	f7ff fe2e 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d8978:	2100      	movs	r1, #0
   d897a:	4620      	mov	r0, r4
   d897c:	f7ff fe2a 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d8980:	2107      	movs	r1, #7
   d8982:	4620      	mov	r0, r4
   d8984:	f7ff fe26 	bl	d85d4 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d8988:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d898c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d8a3c <_ZN16Adafruit_SSD13067displayEv+0xe8>
   d8990:	3301      	adds	r3, #1
   d8992:	d02e      	beq.n	d89f2 <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d8994:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d8998:	2101      	movs	r1, #1
   d899a:	b280      	uxth	r0, r0
   d899c:	f002 fd43 	bl	db426 <digitalWrite>
    digitalWrite(dc, HIGH);
   d89a0:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d89a4:	2101      	movs	r1, #1
   d89a6:	b280      	uxth	r0, r0
   d89a8:	f002 fd3d 	bl	db426 <digitalWrite>
    digitalWrite(cs, LOW);
   d89ac:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d89b0:	2100      	movs	r1, #0
   d89b2:	b280      	uxth	r0, r0
   d89b4:	f002 fd37 	bl	db426 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d89b8:	2001      	movs	r0, #1
   d89ba:	f000 fb99 	bl	d90f0 <HAL_Delay_Microseconds>
   d89be:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d89c0:	f818 3005 	ldrb.w	r3, [r8, r5]
   d89c4:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d89c8:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d89cc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d89d0:	3501      	adds	r5, #1
   d89d2:	f7ff fd8d 	bl	d84f0 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d89d6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d89da:	d1f1      	bne.n	d89c0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d89dc:	2001      	movs	r0, #1
   d89de:	f000 fb87 	bl	d90f0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d89e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d89e6:	2101      	movs	r1, #1
   d89e8:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d89ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d89ee:	f002 bd1a 	b.w	db426 <digitalWrite>
   d89f2:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d89f4:	f002 fdb8 	bl	db568 <_Z19__fetch_global_Wirev>
   d89f8:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d89fc:	f001 f9cc 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d8a00:	f002 fdb2 	bl	db568 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d8a04:	6803      	ldr	r3, [r0, #0]
   d8a06:	2140      	movs	r1, #64	; 0x40
   d8a08:	689b      	ldr	r3, [r3, #8]
   d8a0a:	4798      	blx	r3
   d8a0c:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d8a0e:	f002 fdab 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a12:	19af      	adds	r7, r5, r6
   d8a14:	6803      	ldr	r3, [r0, #0]
   d8a16:	b2bf      	uxth	r7, r7
   d8a18:	689b      	ldr	r3, [r3, #8]
   d8a1a:	f818 1007 	ldrb.w	r1, [r8, r7]
   d8a1e:	3601      	adds	r6, #1
   d8a20:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d8a22:	2e10      	cmp	r6, #16
   d8a24:	d1f3      	bne.n	d8a0e <_ZN16Adafruit_SSD13067displayEv+0xba>
   d8a26:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d8a28:	f002 fd9e 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a2c:	b2ad      	uxth	r5, r5
   d8a2e:	f001 f9ba 	bl	d9da6 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d8a32:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d8a36:	d1dd      	bne.n	d89f4 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d8a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8a3c:	2003dca0 	.word	0x2003dca0

000d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d8a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d8a44:	2100      	movs	r1, #0
   d8a46:	4801      	ldr	r0, [pc, #4]	; (d8a4c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d8a48:	f003 bc46 	b.w	dc2d8 <memset>
   d8a4c:	2003dca0 	.word	0x2003dca0

000d8a50 <_ZN7TwoWire5writeEi>:
   d8a50:	6803      	ldr	r3, [r0, #0]
   d8a52:	b2c9      	uxtb	r1, r1
   d8a54:	689b      	ldr	r3, [r3, #8]
   d8a56:	4718      	bx	r3

000d8a58 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d8a58:	2240      	movs	r2, #64	; 0x40
   d8a5a:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d8a5c:	2200      	movs	r2, #0
   d8a5e:	6042      	str	r2, [r0, #4]
   d8a60:	6002      	str	r2, [r0, #0]
}
   d8a62:	4770      	bx	lr

000d8a64 <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d8a64:	b510      	push	{r4, lr}
   d8a66:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d8a68:	f002 fd7e 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a6c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8a70:	f001 f992 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d8a74:	f002 fd78 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a78:	6803      	ldr	r3, [r0, #0]
   d8a7a:	21f5      	movs	r1, #245	; 0xf5
   d8a7c:	689b      	ldr	r3, [r3, #8]
   d8a7e:	4798      	blx	r3
  Wire.endTransmission(false);
   d8a80:	f002 fd72 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a84:	2100      	movs	r1, #0
   d8a86:	f001 f98a 	bl	d9d9e <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d8a8a:	2019      	movs	r0, #25
   d8a8c:	f000 fe48 	bl	d9720 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d8a90:	f002 fd6a 	bl	db568 <_Z19__fetch_global_Wirev>
   d8a94:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8a98:	2203      	movs	r2, #3
   d8a9a:	f001 f974 	bl	d9d86 <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
   d8a9e:	f002 fd63 	bl	db568 <_Z19__fetch_global_Wirev>
   d8aa2:	6803      	ldr	r3, [r0, #0]
   d8aa4:	695b      	ldr	r3, [r3, #20]
   d8aa6:	4798      	blx	r3
   d8aa8:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d8aaa:	f002 fd5d 	bl	db568 <_Z19__fetch_global_Wirev>
   d8aae:	6803      	ldr	r3, [r0, #0]
   d8ab0:	695b      	ldr	r3, [r3, #20]
   d8ab2:	4798      	blx	r3
   d8ab4:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d8ab8:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d8aba:	f002 fd55 	bl	db568 <_Z19__fetch_global_Wirev>
   d8abe:	6803      	ldr	r3, [r0, #0]
   d8ac0:	695b      	ldr	r3, [r3, #20]
   d8ac2:	4798      	blx	r3

  float humidity = hum;
   d8ac4:	b2a3      	uxth	r3, r4
   d8ac6:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d8aca:	ed9f 7a06 	vldr	s14, [pc, #24]	; d8ae4 <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d8ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d8ad2:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d8ad6:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d8ada:	ed9f 7a03 	vldr	s14, [pc, #12]	; d8ae8 <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d8ade:	eea7 0a87 	vfma.f32	s0, s15, s14
   d8ae2:	bd10      	pop	{r4, pc}
   d8ae4:	42fa0000 	.word	0x42fa0000
   d8ae8:	37800000 	.word	0x37800000
   d8aec:	00000000 	.word	0x00000000

000d8af0 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d8af0:	b510      	push	{r4, lr}
   d8af2:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d8af4:	f002 fd38 	bl	db568 <_Z19__fetch_global_Wirev>
   d8af8:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8afc:	f001 f94c 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d8b00:	f002 fd32 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b04:	6803      	ldr	r3, [r0, #0]
   d8b06:	21f3      	movs	r1, #243	; 0xf3
   d8b08:	689b      	ldr	r3, [r3, #8]
   d8b0a:	4798      	blx	r3
  Wire.endTransmission(false);
   d8b0c:	f002 fd2c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b10:	2100      	movs	r1, #0
   d8b12:	f001 f944 	bl	d9d9e <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d8b16:	2019      	movs	r0, #25
   d8b18:	f000 fe02 	bl	d9720 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d8b1c:	f002 fd24 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b20:	2203      	movs	r2, #3
   d8b22:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8b26:	f001 f92e 	bl	d9d86 <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
   d8b2a:	f002 fd1d 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b2e:	6803      	ldr	r3, [r0, #0]
   d8b30:	695b      	ldr	r3, [r3, #20]
   d8b32:	4798      	blx	r3
   d8b34:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d8b36:	f002 fd17 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b3a:	6803      	ldr	r3, [r0, #0]
   d8b3c:	695b      	ldr	r3, [r3, #20]
   d8b3e:	4798      	blx	r3
   d8b40:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d8b44:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d8b46:	f002 fd0f 	bl	db568 <_Z19__fetch_global_Wirev>
   d8b4a:	6803      	ldr	r3, [r0, #0]
   d8b4c:	695b      	ldr	r3, [r3, #20]
   d8b4e:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d8b50:	b2a0      	uxth	r0, r4
   d8b52:	ee07 0a90 	vmov	s15, r0
   d8b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d8b5a:	ee17 0a90 	vmov	r0, s15
   d8b5e:	f002 fff9 	bl	dbb54 <__aeabi_f2d>
   d8b62:	a310      	add	r3, pc, #64	; (adr r3, d8ba4 <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d8b64:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b68:	f003 f848 	bl	dbbfc <__aeabi_dmul>
   d8b6c:	f003 fb28 	bl	dc1c0 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d8b70:	eddf 7a0b 	vldr	s15, [pc, #44]	; d8ba0 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d8b74:	ee07 0a10 	vmov	s14, r0
   d8b78:	ee67 7a27 	vmul.f32	s15, s14, s15
   d8b7c:	ee17 0a90 	vmov	r0, s15
   d8b80:	f002 ffe8 	bl	dbb54 <__aeabi_f2d>
   d8b84:	a304      	add	r3, pc, #16	; (adr r3, d8b98 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d8b86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b8a:	f002 fe83 	bl	db894 <__aeabi_dsub>

  return temperature;
   d8b8e:	f003 fb17 	bl	dc1c0 <__aeabi_d2f>
}
   d8b92:	ee00 0a10 	vmov	s0, r0
   d8b96:	bd10      	pop	{r4, pc}
   d8b98:	cccccccd 	.word	0xcccccccd
   d8b9c:	40476ccc 	.word	0x40476ccc
   d8ba0:	37800000 	.word	0x37800000
   d8ba4:	3d70a3d7 	.word	0x3d70a3d7
   d8ba8:	4065f70a 	.word	0x4065f70a

000d8bac <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d8bac:	b510      	push	{r4, lr}
   d8bae:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d8bb0:	f002 fcda 	bl	db568 <_Z19__fetch_global_Wirev>
   d8bb4:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8bb8:	f001 f8ee 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d8bbc:	f002 fcd4 	bl	db568 <_Z19__fetch_global_Wirev>
   d8bc0:	6803      	ldr	r3, [r0, #0]
   d8bc2:	21fe      	movs	r1, #254	; 0xfe
   d8bc4:	689b      	ldr	r3, [r3, #8]
   d8bc6:	4798      	blx	r3
  Wire.endTransmission();
   d8bc8:	f002 fcce 	bl	db568 <_Z19__fetch_global_Wirev>
   d8bcc:	f001 f8eb 	bl	d9da6 <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d8bd0:	2032      	movs	r0, #50	; 0x32
}
   d8bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d8bd6:	f000 bda3 	b.w	d9720 <delay>

000d8bda <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d8bda:	b510      	push	{r4, lr}
   d8bdc:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d8bde:	f002 fcc3 	bl	db568 <_Z19__fetch_global_Wirev>
   d8be2:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8be6:	f001 f8d7 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d8bea:	f002 fcbd 	bl	db568 <_Z19__fetch_global_Wirev>
   d8bee:	2100      	movs	r1, #0
   d8bf0:	f7ff ff2e 	bl	d8a50 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d8bf4:	f002 fcb8 	bl	db568 <_Z19__fetch_global_Wirev>
   d8bf8:	210f      	movs	r1, #15
   d8bfa:	f7ff ff29 	bl	d8a50 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d8bfe:	f002 fcb3 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c02:	f001 f8d0 	bl	d9da6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d8c06:	f002 fcaf 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c0a:	2208      	movs	r2, #8
   d8c0c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8c10:	f001 f8b9 	bl	d9d86 <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
   d8c14:	f002 fca8 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c18:	6803      	ldr	r3, [r0, #0]
   d8c1a:	695b      	ldr	r3, [r3, #20]
   d8c1c:	4798      	blx	r3
   d8c1e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d8c20:	f002 fca2 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c24:	6803      	ldr	r3, [r0, #0]
   d8c26:	695b      	ldr	r3, [r3, #20]
   d8c28:	4798      	blx	r3
  sernum_a <<= 8;
   d8c2a:	6823      	ldr	r3, [r4, #0]
   d8c2c:	021b      	lsls	r3, r3, #8
   d8c2e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d8c30:	f002 fc9a 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c34:	6803      	ldr	r3, [r0, #0]
   d8c36:	695b      	ldr	r3, [r3, #20]
   d8c38:	4798      	blx	r3
   d8c3a:	6823      	ldr	r3, [r4, #0]
   d8c3c:	4318      	orrs	r0, r3
   d8c3e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d8c40:	f002 fc92 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c44:	6803      	ldr	r3, [r0, #0]
   d8c46:	695b      	ldr	r3, [r3, #20]
   d8c48:	4798      	blx	r3
  sernum_a <<= 8;
   d8c4a:	6823      	ldr	r3, [r4, #0]
   d8c4c:	021b      	lsls	r3, r3, #8
   d8c4e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d8c50:	f002 fc8a 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c54:	6803      	ldr	r3, [r0, #0]
   d8c56:	695b      	ldr	r3, [r3, #20]
   d8c58:	4798      	blx	r3
   d8c5a:	6823      	ldr	r3, [r4, #0]
   d8c5c:	4318      	orrs	r0, r3
   d8c5e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d8c60:	f002 fc82 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c64:	6803      	ldr	r3, [r0, #0]
   d8c66:	695b      	ldr	r3, [r3, #20]
   d8c68:	4798      	blx	r3
  sernum_a <<= 8;
   d8c6a:	6823      	ldr	r3, [r4, #0]
   d8c6c:	021b      	lsls	r3, r3, #8
   d8c6e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d8c70:	f002 fc7a 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c74:	6803      	ldr	r3, [r0, #0]
   d8c76:	695b      	ldr	r3, [r3, #20]
   d8c78:	4798      	blx	r3
   d8c7a:	6823      	ldr	r3, [r4, #0]
   d8c7c:	4318      	orrs	r0, r3
   d8c7e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d8c80:	f002 fc72 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c84:	6803      	ldr	r3, [r0, #0]
   d8c86:	695b      	ldr	r3, [r3, #20]
   d8c88:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d8c8a:	f002 fc6d 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c8e:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8c92:	f001 f881 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d8c96:	f002 fc67 	bl	db568 <_Z19__fetch_global_Wirev>
   d8c9a:	2100      	movs	r1, #0
   d8c9c:	f7ff fed8 	bl	d8a50 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d8ca0:	f002 fc62 	bl	db568 <_Z19__fetch_global_Wirev>
   d8ca4:	21c9      	movs	r1, #201	; 0xc9
   d8ca6:	f7ff fed3 	bl	d8a50 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d8caa:	f002 fc5d 	bl	db568 <_Z19__fetch_global_Wirev>
   d8cae:	f001 f87a 	bl	d9da6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d8cb2:	f002 fc59 	bl	db568 <_Z19__fetch_global_Wirev>
   d8cb6:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8cba:	2208      	movs	r2, #8
   d8cbc:	f001 f863 	bl	d9d86 <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
   d8cc0:	f002 fc52 	bl	db568 <_Z19__fetch_global_Wirev>
   d8cc4:	6803      	ldr	r3, [r0, #0]
   d8cc6:	695b      	ldr	r3, [r3, #20]
   d8cc8:	4798      	blx	r3
   d8cca:	6060      	str	r0, [r4, #4]
  Wire.read();
   d8ccc:	f002 fc4c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8cd0:	6803      	ldr	r3, [r0, #0]
   d8cd2:	695b      	ldr	r3, [r3, #20]
   d8cd4:	4798      	blx	r3
  sernum_b <<= 8;
   d8cd6:	6863      	ldr	r3, [r4, #4]
   d8cd8:	021b      	lsls	r3, r3, #8
   d8cda:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d8cdc:	f002 fc44 	bl	db568 <_Z19__fetch_global_Wirev>
   d8ce0:	6803      	ldr	r3, [r0, #0]
   d8ce2:	695b      	ldr	r3, [r3, #20]
   d8ce4:	4798      	blx	r3
   d8ce6:	6863      	ldr	r3, [r4, #4]
   d8ce8:	4318      	orrs	r0, r3
   d8cea:	6060      	str	r0, [r4, #4]
  Wire.read();
   d8cec:	f002 fc3c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8cf0:	6803      	ldr	r3, [r0, #0]
   d8cf2:	695b      	ldr	r3, [r3, #20]
   d8cf4:	4798      	blx	r3
  sernum_b <<= 8;
   d8cf6:	6863      	ldr	r3, [r4, #4]
   d8cf8:	021b      	lsls	r3, r3, #8
   d8cfa:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d8cfc:	f002 fc34 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d00:	6803      	ldr	r3, [r0, #0]
   d8d02:	695b      	ldr	r3, [r3, #20]
   d8d04:	4798      	blx	r3
   d8d06:	6863      	ldr	r3, [r4, #4]
   d8d08:	4318      	orrs	r0, r3
   d8d0a:	6060      	str	r0, [r4, #4]
  Wire.read();
   d8d0c:	f002 fc2c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d10:	6803      	ldr	r3, [r0, #0]
   d8d12:	695b      	ldr	r3, [r3, #20]
   d8d14:	4798      	blx	r3
  sernum_b <<= 8;
   d8d16:	6863      	ldr	r3, [r4, #4]
   d8d18:	021b      	lsls	r3, r3, #8
   d8d1a:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d8d1c:	f002 fc24 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d20:	6803      	ldr	r3, [r0, #0]
   d8d22:	695b      	ldr	r3, [r3, #20]
   d8d24:	4798      	blx	r3
   d8d26:	6863      	ldr	r3, [r4, #4]
   d8d28:	4318      	orrs	r0, r3
   d8d2a:	6060      	str	r0, [r4, #4]
  Wire.read();
   d8d2c:	f002 fc1c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d30:	6803      	ldr	r3, [r0, #0]
}
   d8d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d8d36:	695b      	ldr	r3, [r3, #20]
   d8d38:	4718      	bx	r3

000d8d3a <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d8d3a:	b538      	push	{r3, r4, r5, lr}
   d8d3c:	4604      	mov	r4, r0
   d8d3e:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d8d40:	f002 fc12 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d44:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8d48:	f001 f826 	bl	d9d98 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d8d4c:	f002 fc0c 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d50:	6803      	ldr	r3, [r0, #0]
   d8d52:	4629      	mov	r1, r5
   d8d54:	689b      	ldr	r3, [r3, #8]
   d8d56:	4798      	blx	r3
  Wire.endTransmission(false);
   d8d58:	f002 fc06 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d5c:	2100      	movs	r1, #0
   d8d5e:	f001 f81e 	bl	d9d9e <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d8d62:	f002 fc01 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d66:	2201      	movs	r2, #1
   d8d68:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d8d6c:	f001 f80b 	bl	d9d86 <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
   d8d70:	f002 fbfa 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d74:	6803      	ldr	r3, [r0, #0]
   d8d76:	695b      	ldr	r3, [r3, #20]
   d8d78:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d8d7a:	b2c0      	uxtb	r0, r0
   d8d7c:	bd38      	pop	{r3, r4, r5, pc}

000d8d7e <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d8d7e:	b510      	push	{r4, lr}
   d8d80:	4604      	mov	r4, r0
  Wire.begin();
   d8d82:	f002 fbf1 	bl	db568 <_Z19__fetch_global_Wirev>
   d8d86:	f000 ffef 	bl	d9d68 <_ZN7TwoWire5beginEv>

  reset();
   d8d8a:	4620      	mov	r0, r4
   d8d8c:	f7ff ff0e 	bl	d8bac <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d8d90:	21e7      	movs	r1, #231	; 0xe7
   d8d92:	4620      	mov	r0, r4
   d8d94:	f7ff ffd1 	bl	d8d3a <_ZN15Adafruit_Si702113readRegister8Eh>
   d8d98:	283a      	cmp	r0, #58	; 0x3a
   d8d9a:	d104      	bne.n	d8da6 <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d8d9c:	4620      	mov	r0, r4
   d8d9e:	f7ff ff1c 	bl	d8bda <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d8da2:	2001      	movs	r0, #1
   d8da4:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d8da6:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d8da8:	bd10      	pop	{r4, pc}

000d8daa <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d8daa:	2200      	movs	r2, #0
   d8dac:	210a      	movs	r1, #10
   d8dae:	6002      	str	r2, [r0, #0]
   d8db0:	8081      	strh	r1, [r0, #4]
   d8db2:	7182      	strb	r2, [r0, #6]
   d8db4:	71c2      	strb	r2, [r0, #7]
{}
   d8db6:	4770      	bx	lr

000d8db8 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d8db8:	2300      	movs	r3, #0
    , interval_millis(10)
    , state(0)
    , pin(0)
{}

void Debounce::attach(int pin) {
   d8dba:	b510      	push	{r4, lr}
   d8dbc:	4604      	mov	r4, r0
    this->pin = pin;
   d8dbe:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d8dc0:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d8dc2:	b288      	uxth	r0, r1
   d8dc4:	f002 fb48 	bl	db458 <digitalRead>
   d8dc8:	b108      	cbz	r0, d8dce <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d8dca:	2303      	movs	r3, #3
   d8dcc:	71a3      	strb	r3, [r4, #6]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d8dce:	f000 f99f 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d8dd2:	6020      	str	r0, [r4, #0]
   d8dd4:	bd10      	pop	{r4, pc}

000d8dd6 <_ZN8Debounce6attachEi7PinMode>:
#endif
}

void Debounce::attach(int pin, PinMode mode){
   d8dd6:	b538      	push	{r3, r4, r5, lr}
   d8dd8:	460c      	mov	r4, r1
   d8dda:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d8ddc:	4611      	mov	r1, r2
   d8dde:	b2a0      	uxth	r0, r4
   d8de0:	f002 fb10 	bl	db404 <pinMode>
  
  this->attach(pin);
   d8de4:	4621      	mov	r1, r4
   d8de6:	4628      	mov	r0, r5
}
   d8de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void Debounce::attach(int pin, PinMode mode){
  pinMode(pin, mode);
  
  this->attach(pin);
   d8dec:	f7ff bfe4 	b.w	d8db8 <_ZN8Debounce6attachEi>

000d8df0 <_ZN8Debounce8intervalEt>:
}

void Debounce::interval(uint16_t interval_millis)
{
    this->interval_millis = interval_millis;
   d8df0:	8081      	strh	r1, [r0, #4]
   d8df2:	4770      	bx	lr

000d8df4 <_ZN8Debounce6updateEv>:
}

bool Debounce::update()
{
   d8df4:	b538      	push	{r3, r4, r5, lr}
   d8df6:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d8df8:	79c0      	ldrb	r0, [r0, #7]
   d8dfa:	f002 fb2d 	bl	db458 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d8dfe:	79a3      	ldrb	r3, [r4, #6]
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d8e00:	1c05      	adds	r5, r0, #0
    state &= ~_BV(STATE_CHANGED);
   d8e02:	f023 0208 	bic.w	r2, r3, #8
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d8e06:	bf18      	it	ne
   d8e08:	2501      	movne	r5, #1
    state &= ~_BV(STATE_CHANGED);

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d8e0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d8e0e:	429d      	cmp	r5, r3
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
    state &= ~_BV(STATE_CHANGED);
   d8e10:	71a2      	strb	r2, [r4, #6]

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d8e12:	d006      	beq.n	d8e22 <_ZN8Debounce6updateEv+0x2e>
   d8e14:	f000 f97c 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d8e18:	79a3      	ldrb	r3, [r4, #6]
    bool currentState = digitalRead(pin);
    state &= ~_BV(STATE_CHANGED);

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
        previous_millis = millis();
   d8e1a:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d8e1c:	f083 0302 	eor.w	r3, r3, #2
   d8e20:	e013      	b.n	d8e4a <_ZN8Debounce6updateEv+0x56>
   d8e22:	f000 f975 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
    } else
        if ( millis() - previous_millis >= interval_millis ) {
   d8e26:	6823      	ldr	r3, [r4, #0]
   d8e28:	1ac0      	subs	r0, r0, r3
   d8e2a:	88a3      	ldrh	r3, [r4, #4]
   d8e2c:	4298      	cmp	r0, r3
   d8e2e:	d30d      	bcc.n	d8e4c <_ZN8Debounce6updateEv+0x58>
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d8e30:	79a3      	ldrb	r3, [r4, #6]
   d8e32:	f003 0301 	and.w	r3, r3, #1
   d8e36:	429d      	cmp	r5, r3
   d8e38:	d008      	beq.n	d8e4c <_ZN8Debounce6updateEv+0x58>
   d8e3a:	f000 f969 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d8e3e:	79a3      	ldrb	r3, [r4, #6]
    } else
        if ( millis() - previous_millis >= interval_millis ) {
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
   d8e40:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d8e42:	f083 0301 	eor.w	r3, r3, #1
   d8e46:	f043 0308 	orr.w	r3, r3, #8
   d8e4a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d8e4c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d8e4e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d8e52:	bd38      	pop	{r3, r4, r5, pc}

000d8e54 <_ZN8Debounce4readEv>:

bool Debounce::read()
{
    return state & _BV(DEBOUNCED_STATE);
   d8e54:	7980      	ldrb	r0, [r0, #6]
}
   d8e56:	f000 0001 	and.w	r0, r0, #1
   d8e5a:	4770      	bx	lr

000d8e5c <_ZN12qMenuDisplayC1Ev>:
#include "qMenuDisplay.h"

qMenuDisplay::qMenuDisplay()
   d8e5c:	230c      	movs	r3, #12
   d8e5e:	6043      	str	r3, [r0, #4]
{
}
   d8e60:	4770      	bx	lr

000d8e62 <_ZN12qMenuDisplayC1EP16Adafruit_SSD1306>:

qMenuDisplay::qMenuDisplay(Adafruit_SSD1306 *disp)
   d8e62:	220c      	movs	r2, #12
{
  _disp = disp;
   d8e64:	e880 0006 	stmia.w	r0, {r1, r2}
}
   d8e68:	4770      	bx	lr

000d8e6a <_ZN12qMenuDisplay5BeginEv>:

void qMenuDisplay::Begin()
{
   d8e6a:	b510      	push	{r4, lr}
   d8e6c:	4604      	mov	r4, r0
  _disp->stopscroll();
   d8e6e:	6800      	ldr	r0, [r0, #0]
   d8e70:	f7ff fd6c 	bl	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
  _disp->clearDisplay();
   d8e74:	6820      	ldr	r0, [r4, #0]
   d8e76:	f7ff fde3 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  _disp->setCursor(0, 0);
   d8e7a:	2200      	movs	r2, #0
   d8e7c:	4611      	mov	r1, r2
   d8e7e:	6820      	ldr	r0, [r4, #0]
   d8e80:	f7ff f9ab 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  _disp->setTextWrap(true);
   d8e84:	6820      	ldr	r0, [r4, #0]
   d8e86:	2101      	movs	r1, #1
   d8e88:	f7ff f9b2 	bl	d81f0 <_ZN12Adafruit_GFX11setTextWrapEb>
  _disp->setTextColor(WHITE);
   d8e8c:	6820      	ldr	r0, [r4, #0]
   d8e8e:	2101      	movs	r1, #1
   d8e90:	f7ff f9ab 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  _disp->setTextSize(1);
   d8e94:	6820      	ldr	r0, [r4, #0]
   d8e96:	2101      	movs	r1, #1
}
   d8e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  _disp->stopscroll();
  _disp->clearDisplay();
  _disp->setCursor(0, 0);
  _disp->setTextWrap(true);
  _disp->setTextColor(WHITE);
  _disp->setTextSize(1);
   d8e9c:	f7ff b9a0 	b.w	d81e0 <_ZN12Adafruit_GFX11setTextSizeEh>

000d8ea0 <_ZN12qMenuDisplay5StartEv>:
}

void qMenuDisplay::Start()
{
   d8ea0:	b510      	push	{r4, lr}
   d8ea2:	4604      	mov	r4, r0
  _disp->stopscroll();
   d8ea4:	6800      	ldr	r0, [r0, #0]
   d8ea6:	f7ff fd51 	bl	d894c <_ZN16Adafruit_SSD130610stopscrollEv>
  _disp->clearDisplay();
   d8eaa:	6820      	ldr	r0, [r4, #0]
   d8eac:	f7ff fdc8 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>
  _disp->setTextColor(WHITE);
   d8eb0:	6820      	ldr	r0, [r4, #0]
   d8eb2:	2101      	movs	r1, #1
}
   d8eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void qMenuDisplay::Start()
{
  _disp->stopscroll();
  _disp->clearDisplay();
  _disp->setTextColor(WHITE);
   d8eb8:	f7ff b997 	b.w	d81ea <_ZN12Adafruit_GFX12setTextColorEt>

000d8ebc <_ZN12qMenuDisplay6FinishEv>:
}

void qMenuDisplay::Finish()
{
   d8ebc:	4770      	bx	lr

000d8ebe <_ZN12qMenuDisplay5TitleEPKc>:
  // _disp->display();
}

void qMenuDisplay::Title(const char text[])
{
   d8ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8ec0:	4604      	mov	r4, r0
  _disp->setCursor(0, 11 - textHeight / 2);
   d8ec2:	6843      	ldr	r3, [r0, #4]
   d8ec4:	6800      	ldr	r0, [r0, #0]
   d8ec6:	2202      	movs	r2, #2
   d8ec8:	fb93 f2f2 	sdiv	r2, r3, r2
   d8ecc:	f1c2 020b 	rsb	r2, r2, #11
   d8ed0:	b212      	sxth	r2, r2
{
  // _disp->display();
}

void qMenuDisplay::Title(const char text[])
{
   d8ed2:	460d      	mov	r5, r1
  _disp->setCursor(0, 11 - textHeight / 2);
   d8ed4:	2100      	movs	r1, #0
   d8ed6:	f7ff f980 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  _disp->setTextColor(WHITE);
   d8eda:	6820      	ldr	r0, [r4, #0]
   d8edc:	2101      	movs	r1, #1
   d8ede:	f7ff f984 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  _disp->println(text);
   d8ee2:	4629      	mov	r1, r5
   d8ee4:	6820      	ldr	r0, [r4, #0]
   d8ee6:	f001 fa2e 	bl	da346 <_ZN5Print7printlnEPKc>
  _disp->drawFastHLine(0, 14, 128, WHITE);
   d8eea:	6820      	ldr	r0, [r4, #0]
   d8eec:	2201      	movs	r2, #1
   d8eee:	6803      	ldr	r3, [r0, #0]
   d8ef0:	9200      	str	r2, [sp, #0]
   d8ef2:	69dd      	ldr	r5, [r3, #28]
   d8ef4:	220e      	movs	r2, #14
   d8ef6:	2380      	movs	r3, #128	; 0x80
   d8ef8:	2100      	movs	r1, #0
   d8efa:	47a8      	blx	r5
  _disp->display();
   d8efc:	6820      	ldr	r0, [r4, #0]
}
   d8efe:	b003      	add	sp, #12
   d8f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
  _disp->setCursor(0, 11 - textHeight / 2);
  _disp->setTextColor(WHITE);
  _disp->println(text);
  _disp->drawFastHLine(0, 14, 128, WHITE);
  _disp->display();
   d8f04:	f7ff bd26 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>

000d8f08 <_ZN12qMenuDisplay4ItemEiPKc>:
}

void qMenuDisplay::Item(int index, const char text[])
{
   d8f08:	b538      	push	{r3, r4, r5, lr}
  _disp->setCursor(5, (index * 14) + 32 - textHeight / 2);
   d8f0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
  _disp->drawFastHLine(0, 14, 128, WHITE);
  _disp->display();
}

void qMenuDisplay::Item(int index, const char text[])
{
   d8f0e:	4615      	mov	r5, r2
  _disp->setCursor(5, (index * 14) + 32 - textHeight / 2);
   d8f10:	6843      	ldr	r3, [r0, #4]
   d8f12:	2202      	movs	r2, #2
   d8f14:	fb93 f3f2 	sdiv	r3, r3, r2
   d8f18:	f1c3 0320 	rsb	r3, r3, #32
   d8f1c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
  _disp->drawFastHLine(0, 14, 128, WHITE);
  _disp->display();
}

void qMenuDisplay::Item(int index, const char text[])
{
   d8f20:	4604      	mov	r4, r0
  _disp->setCursor(5, (index * 14) + 32 - textHeight / 2);
   d8f22:	b212      	sxth	r2, r2
   d8f24:	2105      	movs	r1, #5
   d8f26:	6800      	ldr	r0, [r0, #0]
   d8f28:	f7ff f957 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  _disp->setTextColor(WHITE);
   d8f2c:	6820      	ldr	r0, [r4, #0]
   d8f2e:	2101      	movs	r1, #1
   d8f30:	f7ff f95b 	bl	d81ea <_ZN12Adafruit_GFX12setTextColorEt>
  _disp->println(text);
   d8f34:	4629      	mov	r1, r5
   d8f36:	6820      	ldr	r0, [r4, #0]
   d8f38:	f001 fa05 	bl	da346 <_ZN5Print7printlnEPKc>
  _disp->display();
   d8f3c:	6820      	ldr	r0, [r4, #0]
}
   d8f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void qMenuDisplay::Item(int index, const char text[])
{
  _disp->setCursor(5, (index * 14) + 32 - textHeight / 2);
  _disp->setTextColor(WHITE);
  _disp->println(text);
  _disp->display();
   d8f42:	f7ff bd07 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>

000d8f46 <_ZN12qMenuDisplay9HighlightEi>:
}

void qMenuDisplay::Highlight(int index)
{
   d8f46:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8f48:	4604      	mov	r4, r0
  _disp->drawRect(0, (index * 14) + 22, 95, 13, WHITE);
   d8f4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   d8f4e:	6800      	ldr	r0, [r0, #0]
   d8f50:	004a      	lsls	r2, r1, #1
   d8f52:	2501      	movs	r5, #1
   d8f54:	210d      	movs	r1, #13
   d8f56:	6803      	ldr	r3, [r0, #0]
   d8f58:	e88d 0022 	stmia.w	sp, {r1, r5}
   d8f5c:	3216      	adds	r2, #22
   d8f5e:	6a1d      	ldr	r5, [r3, #32]
   d8f60:	b212      	sxth	r2, r2
   d8f62:	235f      	movs	r3, #95	; 0x5f
   d8f64:	2100      	movs	r1, #0
   d8f66:	47a8      	blx	r5
  _disp->display();
   d8f68:	6820      	ldr	r0, [r4, #0]
}
   d8f6a:	b003      	add	sp, #12
   d8f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
}

void qMenuDisplay::Highlight(int index)
{
  _disp->drawRect(0, (index * 14) + 22, 95, 13, WHITE);
  _disp->display();
   d8f70:	f7ff bcf0 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>

000d8f74 <_ZN12qMenuDisplay10MessageBoxEPKc>:
}

void qMenuDisplay::MessageBox(const char text[])
{
   d8f74:	b570      	push	{r4, r5, r6, lr}
   d8f76:	4605      	mov	r5, r0
  int textWidth = strlen(text) * 9;
   d8f78:	4608      	mov	r0, r1
  _disp->drawRect(0, (index * 14) + 22, 95, 13, WHITE);
  _disp->display();
}

void qMenuDisplay::MessageBox(const char text[])
{
   d8f7a:	460e      	mov	r6, r1
  int textWidth = strlen(text) * 9;
   d8f7c:	f003 fa39 	bl	dc3f2 <strlen>
   d8f80:	4604      	mov	r4, r0
  int x = 64 - (textWidth / 2);
  int y = 32;
  _disp->clearDisplay();
   d8f82:	6828      	ldr	r0, [r5, #0]
   d8f84:	f7ff fd5c 	bl	d8a40 <_ZN16Adafruit_SSD130612clearDisplayEv>

  _disp->setCursor(x + 10, y + 5 - textHeight / 2);
   d8f88:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   d8f8c:	686a      	ldr	r2, [r5, #4]
   d8f8e:	6828      	ldr	r0, [r5, #0]
   d8f90:	2102      	movs	r1, #2
   d8f92:	fb92 f2f1 	sdiv	r2, r2, r1
   d8f96:	fb94 f1f1 	sdiv	r1, r4, r1
   d8f9a:	f1c2 0225 	rsb	r2, r2, #37	; 0x25
   d8f9e:	f1c1 014a 	rsb	r1, r1, #74	; 0x4a
   d8fa2:	b212      	sxth	r2, r2
   d8fa4:	b209      	sxth	r1, r1
   d8fa6:	f7ff f918 	bl	d81da <_ZN12Adafruit_GFX9setCursorEss>
  _disp->println(text);
   d8faa:	4631      	mov	r1, r6
   d8fac:	6828      	ldr	r0, [r5, #0]
   d8fae:	f001 f9ca 	bl	da346 <_ZN5Print7printlnEPKc>
  _disp->display();
   d8fb2:	6828      	ldr	r0, [r5, #0]
}
   d8fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  int y = 32;
  _disp->clearDisplay();

  _disp->setCursor(x + 10, y + 5 - textHeight / 2);
  _disp->println(text);
  _disp->display();
   d8fb8:	f7ff bccc 	b.w	d8954 <_ZN16Adafruit_SSD13067displayEv>

000d8fbc <_ZN11qMenuSystemC1EP16Adafruit_SSD1306>:
#include "qMenuSystem.h"
#include "qMenuDisplay.h"

qMenuSystem::qMenuSystem(Adafruit_SSD1306 *disp)
   d8fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8fbe:	f100 0530 	add.w	r5, r0, #48	; 0x30
   d8fc2:	4604      	mov	r4, r0
   d8fc4:	460f      	mov	r7, r1
   d8fc6:	4628      	mov	r0, r5
   d8fc8:	f7ff ff48 	bl	d8e5c <_ZN12qMenuDisplayC1Ev>
{
  qmd = qMenuDisplay(disp);
   d8fcc:	4639      	mov	r1, r7
   d8fce:	4668      	mov	r0, sp
   d8fd0:	f7ff ff47 	bl	d8e62 <_ZN12qMenuDisplayC1EP16Adafruit_SSD1306>
   d8fd4:	e89d 0003 	ldmia.w	sp, {r0, r1}
  _selectedIndex = 0;
   d8fd8:	2300      	movs	r3, #0
#include "qMenuSystem.h"
#include "qMenuDisplay.h"

qMenuSystem::qMenuSystem(Adafruit_SSD1306 *disp)
{
  qmd = qMenuDisplay(disp);
   d8fda:	e885 0003 	stmia.w	r5, {r0, r1}
  _selectedIndex = 0;
   d8fde:	6063      	str	r3, [r4, #4]
  _itemCount = 0;
   d8fe0:	60a3      	str	r3, [r4, #8]
  _firstVisible = 1;
}
   d8fe2:	4620      	mov	r0, r4
qMenuSystem::qMenuSystem(Adafruit_SSD1306 *disp)
{
  qmd = qMenuDisplay(disp);
  _selectedIndex = 0;
  _itemCount = 0;
  _firstVisible = 1;
   d8fe4:	2301      	movs	r3, #1
   d8fe6:	60e3      	str	r3, [r4, #12]
}
   d8fe8:	b003      	add	sp, #12
   d8fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8fec <_ZN11qMenuSystem8ShowMenuEv>:

  return 0;
}

void qMenuSystem::ShowMenu()
{
   d8fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_selectedIndex > _firstVisible + 2)
   d8ff0:	68c2      	ldr	r2, [r0, #12]
   d8ff2:	6843      	ldr	r3, [r0, #4]
   d8ff4:	1c91      	adds	r1, r2, #2
   d8ff6:	428b      	cmp	r3, r1

  return 0;
}

void qMenuSystem::ShowMenu()
{
   d8ff8:	4604      	mov	r4, r0
  if (_selectedIndex > _firstVisible + 2)
   d8ffa:	dd01      	ble.n	d9000 <_ZN11qMenuSystem8ShowMenuEv+0x14>
    _firstVisible = _selectedIndex - 2;
   d8ffc:	3b02      	subs	r3, #2
   d8ffe:	e001      	b.n	d9004 <_ZN11qMenuSystem8ShowMenuEv+0x18>
  else if (_selectedIndex < _firstVisible)
   d9000:	4293      	cmp	r3, r2
   d9002:	da00      	bge.n	d9006 <_ZN11qMenuSystem8ShowMenuEv+0x1a>
    _firstVisible = _selectedIndex;
   d9004:	60e3      	str	r3, [r4, #12]

  qmd.Start();
   d9006:	f104 0630 	add.w	r6, r4, #48	; 0x30
   d900a:	4630      	mov	r0, r6
   d900c:	f7ff ff48 	bl	d8ea0 <_ZN12qMenuDisplay5StartEv>

  // display title
  strcpy_P(tempBuffer, (char *)(CurrentMenu[0]));
   d9010:	6823      	ldr	r3, [r4, #0]
   d9012:	f104 0810 	add.w	r8, r4, #16
   d9016:	6819      	ldr	r1, [r3, #0]
   d9018:	4640      	mov	r0, r8
   d901a:	f003 f9c7 	bl	dc3ac <strcpy>
  qmd.Title(tempBuffer);
   d901e:	4641      	mov	r1, r8
   d9020:	4630      	mov	r0, r6
   d9022:	f7ff ff4c 	bl	d8ebe <_ZN12qMenuDisplay5TitleEPKc>

  // display items
  int p = 3;
  if (p > (_itemCount - _firstVisible + 1))
   d9026:	68a3      	ldr	r3, [r4, #8]
   d9028:	68e5      	ldr	r5, [r4, #12]
   d902a:	1b5d      	subs	r5, r3, r5
   d902c:	2d01      	cmp	r5, #1
    p = _itemCount - _firstVisible + 1;
   d902e:	bfd4      	ite	le
   d9030:	3501      	addle	r5, #1
  // display title
  strcpy_P(tempBuffer, (char *)(CurrentMenu[0]));
  qmd.Title(tempBuffer);

  // display items
  int p = 3;
   d9032:	2503      	movgt	r5, #3
  if (p > (_itemCount - _firstVisible + 1))
    p = _itemCount - _firstVisible + 1;
  for (int i = 0; i < p; i++)
   d9034:	2700      	movs	r7, #0
   d9036:	42bd      	cmp	r5, r7
   d9038:	68e3      	ldr	r3, [r4, #12]
   d903a:	dd0d      	ble.n	d9058 <_ZN11qMenuSystem8ShowMenuEv+0x6c>
  {
    strcpy_P(tempBuffer, (char *)(CurrentMenu[i + _firstVisible]));
   d903c:	443b      	add	r3, r7
   d903e:	6822      	ldr	r2, [r4, #0]
   d9040:	4640      	mov	r0, r8
   d9042:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   d9046:	f003 f9b1 	bl	dc3ac <strcpy>
    qmd.Item(i, tempBuffer);
   d904a:	4639      	mov	r1, r7
   d904c:	4642      	mov	r2, r8
   d904e:	4630      	mov	r0, r6
   d9050:	f7ff ff5a 	bl	d8f08 <_ZN12qMenuDisplay4ItemEiPKc>

  // display items
  int p = 3;
  if (p > (_itemCount - _firstVisible + 1))
    p = _itemCount - _firstVisible + 1;
  for (int i = 0; i < p; i++)
   d9054:	3701      	adds	r7, #1
   d9056:	e7ee      	b.n	d9036 <_ZN11qMenuSystem8ShowMenuEv+0x4a>
    strcpy_P(tempBuffer, (char *)(CurrentMenu[i + _firstVisible]));
    qmd.Item(i, tempBuffer);
  }

  // display selection
  qmd.Highlight(_selectedIndex - _firstVisible);
   d9058:	6861      	ldr	r1, [r4, #4]
   d905a:	4630      	mov	r0, r6
   d905c:	1ac9      	subs	r1, r1, r3
   d905e:	f7ff ff72 	bl	d8f46 <_ZN12qMenuDisplay9HighlightEi>

  qmd.Finish();
   d9062:	4630      	mov	r0, r6
}
   d9064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  }

  // display selection
  qmd.Highlight(_selectedIndex - _firstVisible);

  qmd.Finish();
   d9068:	f7ff bf28 	b.w	d8ebc <_ZN12qMenuDisplay6FinishEv>

000d906c <_ZN11qMenuSystem8InitMenuEPPKcii>:
  _itemCount = 0;
  _firstVisible = 1;
}

void qMenuSystem::InitMenu(const char **page, int itemCount, int selectedIndex)
{
   d906c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d906e:	4604      	mov	r4, r0
   d9070:	460f      	mov	r7, r1
   d9072:	4615      	mov	r5, r2
   d9074:	461e      	mov	r6, r3
  qmd.Begin();
   d9076:	3030      	adds	r0, #48	; 0x30
   d9078:	f7ff fef7 	bl	d8e6a <_ZN12qMenuDisplay5BeginEv>

  CurrentMenu = page;
   d907c:	6027      	str	r7, [r4, #0]
  _selectedIndex = selectedIndex;
   d907e:	6066      	str	r6, [r4, #4]
  _itemCount = itemCount;
   d9080:	60a5      	str	r5, [r4, #8]
  //  ProcessMenu(ACTION_NONE);
  ShowMenu();
   d9082:	4620      	mov	r0, r4
}
   d9084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  CurrentMenu = page;
  _selectedIndex = selectedIndex;
  _itemCount = itemCount;
  //  ProcessMenu(ACTION_NONE);
  ShowMenu();
   d9088:	f7ff bfb0 	b.w	d8fec <_ZN11qMenuSystem8ShowMenuEv>

000d908c <_ZN11qMenuSystem11ProcessMenuEi>:
}

int qMenuSystem::ProcessMenu(int action)
{
   d908c:	b508      	push	{r3, lr}
  if (action == ACTION_DOWN)
   d908e:	2902      	cmp	r1, #2
   d9090:	6843      	ldr	r3, [r0, #4]
   d9092:	d101      	bne.n	d9098 <_ZN11qMenuSystem11ProcessMenuEi+0xc>
    _selectedIndex++;
   d9094:	3301      	adds	r3, #1
   d9096:	e002      	b.n	d909e <_ZN11qMenuSystem11ProcessMenuEi+0x12>
  if (action == ACTION_UP)
   d9098:	2901      	cmp	r1, #1
   d909a:	d101      	bne.n	d90a0 <_ZN11qMenuSystem11ProcessMenuEi+0x14>
    _selectedIndex--;
   d909c:	3b01      	subs	r3, #1
   d909e:	6043      	str	r3, [r0, #4]

  if (_selectedIndex > _itemCount)
   d90a0:	6842      	ldr	r2, [r0, #4]
   d90a2:	6883      	ldr	r3, [r0, #8]
   d90a4:	429a      	cmp	r2, r3
    _selectedIndex = 1;
   d90a6:	bfc4      	itt	gt
   d90a8:	2201      	movgt	r2, #1
   d90aa:	6042      	strgt	r2, [r0, #4]
  if (_selectedIndex < 1)
   d90ac:	6842      	ldr	r2, [r0, #4]
   d90ae:	2a00      	cmp	r2, #0
    _selectedIndex = _itemCount;
   d90b0:	bfd8      	it	le
   d90b2:	6043      	strle	r3, [r0, #4]

  if (action == ACTION_SELECT)
   d90b4:	2903      	cmp	r1, #3
   d90b6:	d101      	bne.n	d90bc <_ZN11qMenuSystem11ProcessMenuEi+0x30>
    return _selectedIndex;
   d90b8:	6840      	ldr	r0, [r0, #4]
   d90ba:	bd08      	pop	{r3, pc}

  if (action == ACTION_BACK)
   d90bc:	2904      	cmp	r1, #4
   d90be:	d003      	beq.n	d90c8 <_ZN11qMenuSystem11ProcessMenuEi+0x3c>
    return -1;

  ShowMenu();
   d90c0:	f7ff ff94 	bl	d8fec <_ZN11qMenuSystem8ShowMenuEv>

  return 0;
   d90c4:	2000      	movs	r0, #0
   d90c6:	bd08      	pop	{r3, pc}

  if (action == ACTION_SELECT)
    return _selectedIndex;

  if (action == ACTION_BACK)
    return -1;
   d90c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  ShowMenu();

  return 0;
}
   d90cc:	bd08      	pop	{r3, pc}
	...

000d90d0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d90d0:	b508      	push	{r3, lr}
   d90d2:	4b02      	ldr	r3, [pc, #8]	; (d90dc <os_mutex_create+0xc>)
   d90d4:	681b      	ldr	r3, [r3, #0]
   d90d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d90d8:	9301      	str	r3, [sp, #4]
   d90da:	bd08      	pop	{r3, pc}
   d90dc:	00030248 	.word	0x00030248

000d90e0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d90e0:	b508      	push	{r3, lr}
   d90e2:	4b02      	ldr	r3, [pc, #8]	; (d90ec <HAL_RNG_GetRandomNumber+0xc>)
   d90e4:	681b      	ldr	r3, [r3, #0]
   d90e6:	685b      	ldr	r3, [r3, #4]
   d90e8:	9301      	str	r3, [sp, #4]
   d90ea:	bd08      	pop	{r3, pc}
   d90ec:	00030218 	.word	0x00030218

000d90f0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d90f0:	b508      	push	{r3, lr}
   d90f2:	4b02      	ldr	r3, [pc, #8]	; (d90fc <HAL_Delay_Microseconds+0xc>)
   d90f4:	681b      	ldr	r3, [r3, #0]
   d90f6:	68db      	ldr	r3, [r3, #12]
   d90f8:	9301      	str	r3, [sp, #4]
   d90fa:	bd08      	pop	{r3, pc}
   d90fc:	00030218 	.word	0x00030218

000d9100 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d9100:	b508      	push	{r3, lr}
   d9102:	4b02      	ldr	r3, [pc, #8]	; (d910c <HAL_Timer_Get_Micro_Seconds+0xc>)
   d9104:	681b      	ldr	r3, [r3, #0]
   d9106:	691b      	ldr	r3, [r3, #16]
   d9108:	9301      	str	r3, [sp, #4]
   d910a:	bd08      	pop	{r3, pc}
   d910c:	00030218 	.word	0x00030218

000d9110 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d9110:	b508      	push	{r3, lr}
   d9112:	4b02      	ldr	r3, [pc, #8]	; (d911c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d9114:	681b      	ldr	r3, [r3, #0]
   d9116:	695b      	ldr	r3, [r3, #20]
   d9118:	9301      	str	r3, [sp, #4]
   d911a:	bd08      	pop	{r3, pc}
   d911c:	00030218 	.word	0x00030218

000d9120 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d9120:	b508      	push	{r3, lr}
   d9122:	4b02      	ldr	r3, [pc, #8]	; (d912c <HAL_EEPROM_Init+0xc>)
   d9124:	681b      	ldr	r3, [r3, #0]
   d9126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9128:	9301      	str	r3, [sp, #4]
   d912a:	bd08      	pop	{r3, pc}
   d912c:	00030218 	.word	0x00030218

000d9130 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d9130:	b508      	push	{r3, lr}
   d9132:	4b02      	ldr	r3, [pc, #8]	; (d913c <HAL_EEPROM_Get+0xc>)
   d9134:	681b      	ldr	r3, [r3, #0]
   d9136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d9138:	9301      	str	r3, [sp, #4]
   d913a:	bd08      	pop	{r3, pc}
   d913c:	00030218 	.word	0x00030218

000d9140 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d9140:	b508      	push	{r3, lr}
   d9142:	4b02      	ldr	r3, [pc, #8]	; (d914c <HAL_EEPROM_Put+0xc>)
   d9144:	681b      	ldr	r3, [r3, #0]
   d9146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d9148:	9301      	str	r3, [sp, #4]
   d914a:	bd08      	pop	{r3, pc}
   d914c:	00030218 	.word	0x00030218

000d9150 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d9150:	b508      	push	{r3, lr}
   d9152:	4b02      	ldr	r3, [pc, #8]	; (d915c <HAL_Validate_Pin_Function+0xc>)
   d9154:	681b      	ldr	r3, [r3, #0]
   d9156:	685b      	ldr	r3, [r3, #4]
   d9158:	9301      	str	r3, [sp, #4]
   d915a:	bd08      	pop	{r3, pc}
   d915c:	0003022c 	.word	0x0003022c

000d9160 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d9160:	b508      	push	{r3, lr}
   d9162:	4b02      	ldr	r3, [pc, #8]	; (d916c <HAL_Pin_Mode+0xc>)
   d9164:	681b      	ldr	r3, [r3, #0]
   d9166:	689b      	ldr	r3, [r3, #8]
   d9168:	9301      	str	r3, [sp, #4]
   d916a:	bd08      	pop	{r3, pc}
   d916c:	0003022c 	.word	0x0003022c

000d9170 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d9170:	b508      	push	{r3, lr}
   d9172:	4b02      	ldr	r3, [pc, #8]	; (d917c <HAL_Get_Pin_Mode+0xc>)
   d9174:	681b      	ldr	r3, [r3, #0]
   d9176:	68db      	ldr	r3, [r3, #12]
   d9178:	9301      	str	r3, [sp, #4]
   d917a:	bd08      	pop	{r3, pc}
   d917c:	0003022c 	.word	0x0003022c

000d9180 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d9180:	b508      	push	{r3, lr}
   d9182:	4b02      	ldr	r3, [pc, #8]	; (d918c <HAL_GPIO_Write+0xc>)
   d9184:	681b      	ldr	r3, [r3, #0]
   d9186:	691b      	ldr	r3, [r3, #16]
   d9188:	9301      	str	r3, [sp, #4]
   d918a:	bd08      	pop	{r3, pc}
   d918c:	0003022c 	.word	0x0003022c

000d9190 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d9190:	b508      	push	{r3, lr}
   d9192:	4b02      	ldr	r3, [pc, #8]	; (d919c <HAL_GPIO_Read+0xc>)
   d9194:	681b      	ldr	r3, [r3, #0]
   d9196:	695b      	ldr	r3, [r3, #20]
   d9198:	9301      	str	r3, [sp, #4]
   d919a:	bd08      	pop	{r3, pc}
   d919c:	0003022c 	.word	0x0003022c

000d91a0 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d91a0:	b508      	push	{r3, lr}
   d91a2:	4b02      	ldr	r3, [pc, #8]	; (d91ac <HAL_Interrupts_Attach+0xc>)
   d91a4:	681b      	ldr	r3, [r3, #0]
   d91a6:	699b      	ldr	r3, [r3, #24]
   d91a8:	9301      	str	r3, [sp, #4]
   d91aa:	bd08      	pop	{r3, pc}
   d91ac:	0003022c 	.word	0x0003022c

000d91b0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
   d91b0:	b508      	push	{r3, lr}
   d91b2:	4b02      	ldr	r3, [pc, #8]	; (d91bc <HAL_Interrupts_Detach+0xc>)
   d91b4:	681b      	ldr	r3, [r3, #0]
   d91b6:	69db      	ldr	r3, [r3, #28]
   d91b8:	9301      	str	r3, [sp, #4]
   d91ba:	bd08      	pop	{r3, pc}
   d91bc:	0003022c 	.word	0x0003022c

000d91c0 <HAL_DAC_Write>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d91c0:	b508      	push	{r3, lr}
   d91c2:	4b02      	ldr	r3, [pc, #8]	; (d91cc <HAL_DAC_Write+0xc>)
   d91c4:	681b      	ldr	r3, [r3, #0]
   d91c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d91c8:	9301      	str	r3, [sp, #4]
   d91ca:	bd08      	pop	{r3, pc}
   d91cc:	0003022c 	.word	0x0003022c

000d91d0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d91d0:	b508      	push	{r3, lr}
   d91d2:	4b02      	ldr	r3, [pc, #8]	; (d91dc <HAL_ADC_Read+0xc>)
   d91d4:	681b      	ldr	r3, [r3, #0]
   d91d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d91d8:	9301      	str	r3, [sp, #4]
   d91da:	bd08      	pop	{r3, pc}
   d91dc:	0003022c 	.word	0x0003022c

000d91e0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d91e0:	b508      	push	{r3, lr}
   d91e2:	4b02      	ldr	r3, [pc, #8]	; (d91ec <HAL_PWM_Write_Ext+0xc>)
   d91e4:	681b      	ldr	r3, [r3, #0]
   d91e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d91e8:	9301      	str	r3, [sp, #4]
   d91ea:	bd08      	pop	{r3, pc}
   d91ec:	0003022c 	.word	0x0003022c

000d91f0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d91f0:	b508      	push	{r3, lr}
   d91f2:	4b02      	ldr	r3, [pc, #8]	; (d91fc <HAL_I2C_Begin+0xc>)
   d91f4:	681b      	ldr	r3, [r3, #0]
   d91f6:	68db      	ldr	r3, [r3, #12]
   d91f8:	9301      	str	r3, [sp, #4]
   d91fa:	bd08      	pop	{r3, pc}
   d91fc:	00030228 	.word	0x00030228

000d9200 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d9200:	b508      	push	{r3, lr}
   d9202:	4b02      	ldr	r3, [pc, #8]	; (d920c <HAL_I2C_Request_Data+0xc>)
   d9204:	681b      	ldr	r3, [r3, #0]
   d9206:	695b      	ldr	r3, [r3, #20]
   d9208:	9301      	str	r3, [sp, #4]
   d920a:	bd08      	pop	{r3, pc}
   d920c:	00030228 	.word	0x00030228

000d9210 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d9210:	b508      	push	{r3, lr}
   d9212:	4b02      	ldr	r3, [pc, #8]	; (d921c <HAL_I2C_Begin_Transmission+0xc>)
   d9214:	681b      	ldr	r3, [r3, #0]
   d9216:	699b      	ldr	r3, [r3, #24]
   d9218:	9301      	str	r3, [sp, #4]
   d921a:	bd08      	pop	{r3, pc}
   d921c:	00030228 	.word	0x00030228

000d9220 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d9220:	b508      	push	{r3, lr}
   d9222:	4b02      	ldr	r3, [pc, #8]	; (d922c <HAL_I2C_End_Transmission+0xc>)
   d9224:	681b      	ldr	r3, [r3, #0]
   d9226:	69db      	ldr	r3, [r3, #28]
   d9228:	9301      	str	r3, [sp, #4]
   d922a:	bd08      	pop	{r3, pc}
   d922c:	00030228 	.word	0x00030228

000d9230 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d9230:	b508      	push	{r3, lr}
   d9232:	4b02      	ldr	r3, [pc, #8]	; (d923c <HAL_I2C_Write_Data+0xc>)
   d9234:	681b      	ldr	r3, [r3, #0]
   d9236:	6a1b      	ldr	r3, [r3, #32]
   d9238:	9301      	str	r3, [sp, #4]
   d923a:	bd08      	pop	{r3, pc}
   d923c:	00030228 	.word	0x00030228

000d9240 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d9240:	b508      	push	{r3, lr}
   d9242:	4b02      	ldr	r3, [pc, #8]	; (d924c <HAL_I2C_Available_Data+0xc>)
   d9244:	681b      	ldr	r3, [r3, #0]
   d9246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9248:	9301      	str	r3, [sp, #4]
   d924a:	bd08      	pop	{r3, pc}
   d924c:	00030228 	.word	0x00030228

000d9250 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d9250:	b508      	push	{r3, lr}
   d9252:	4b02      	ldr	r3, [pc, #8]	; (d925c <HAL_I2C_Read_Data+0xc>)
   d9254:	681b      	ldr	r3, [r3, #0]
   d9256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9258:	9301      	str	r3, [sp, #4]
   d925a:	bd08      	pop	{r3, pc}
   d925c:	00030228 	.word	0x00030228

000d9260 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d9260:	b508      	push	{r3, lr}
   d9262:	4b02      	ldr	r3, [pc, #8]	; (d926c <HAL_I2C_Peek_Data+0xc>)
   d9264:	681b      	ldr	r3, [r3, #0]
   d9266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9268:	9301      	str	r3, [sp, #4]
   d926a:	bd08      	pop	{r3, pc}
   d926c:	00030228 	.word	0x00030228

000d9270 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d9270:	b508      	push	{r3, lr}
   d9272:	4b02      	ldr	r3, [pc, #8]	; (d927c <HAL_I2C_Flush_Data+0xc>)
   d9274:	681b      	ldr	r3, [r3, #0]
   d9276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9278:	9301      	str	r3, [sp, #4]
   d927a:	bd08      	pop	{r3, pc}
   d927c:	00030228 	.word	0x00030228

000d9280 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d9280:	b508      	push	{r3, lr}
   d9282:	4b02      	ldr	r3, [pc, #8]	; (d928c <HAL_I2C_Is_Enabled+0xc>)
   d9284:	681b      	ldr	r3, [r3, #0]
   d9286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9288:	9301      	str	r3, [sp, #4]
   d928a:	bd08      	pop	{r3, pc}
   d928c:	00030228 	.word	0x00030228

000d9290 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d9290:	b508      	push	{r3, lr}
   d9292:	4b02      	ldr	r3, [pc, #8]	; (d929c <HAL_I2C_Init+0xc>)
   d9294:	681b      	ldr	r3, [r3, #0]
   d9296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d9298:	9301      	str	r3, [sp, #4]
   d929a:	bd08      	pop	{r3, pc}
   d929c:	00030228 	.word	0x00030228

000d92a0 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d92a0:	b508      	push	{r3, lr}
   d92a2:	4b02      	ldr	r3, [pc, #8]	; (d92ac <if_name_to_index+0xc>)
   d92a4:	681b      	ldr	r3, [r3, #0]
   d92a6:	691b      	ldr	r3, [r3, #16]
   d92a8:	9301      	str	r3, [sp, #4]
   d92aa:	bd08      	pop	{r3, pc}
   d92ac:	0003026c 	.word	0x0003026c

000d92b0 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d92b0:	b508      	push	{r3, lr}
   d92b2:	4b02      	ldr	r3, [pc, #8]	; (d92bc <if_index_to_name+0xc>)
   d92b4:	681b      	ldr	r3, [r3, #0]
   d92b6:	695b      	ldr	r3, [r3, #20]
   d92b8:	9301      	str	r3, [sp, #4]
   d92ba:	bd08      	pop	{r3, pc}
   d92bc:	0003026c 	.word	0x0003026c

000d92c0 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d92c0:	b508      	push	{r3, lr}
   d92c2:	4b02      	ldr	r3, [pc, #8]	; (d92cc <if_get_by_index+0xc>)
   d92c4:	681b      	ldr	r3, [r3, #0]
   d92c6:	699b      	ldr	r3, [r3, #24]
   d92c8:	9301      	str	r3, [sp, #4]
   d92ca:	bd08      	pop	{r3, pc}
   d92cc:	0003026c 	.word	0x0003026c

000d92d0 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d92d0:	b508      	push	{r3, lr}
   d92d2:	4b02      	ldr	r3, [pc, #8]	; (d92dc <if_get_addrs+0xc>)
   d92d4:	681b      	ldr	r3, [r3, #0]
   d92d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d92d8:	9301      	str	r3, [sp, #4]
   d92da:	bd08      	pop	{r3, pc}
   d92dc:	0003026c 	.word	0x0003026c

000d92e0 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d92e0:	b508      	push	{r3, lr}
   d92e2:	4b02      	ldr	r3, [pc, #8]	; (d92ec <if_free_if_addrs+0xc>)
   d92e4:	681b      	ldr	r3, [r3, #0]
   d92e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d92e8:	9301      	str	r3, [sp, #4]
   d92ea:	bd08      	pop	{r3, pc}
   d92ec:	0003026c 	.word	0x0003026c

000d92f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d92f0:	b508      	push	{r3, lr}
   d92f2:	4b02      	ldr	r3, [pc, #8]	; (d92fc <inet_inet_ntop+0xc>)
   d92f4:	681b      	ldr	r3, [r3, #0]
   d92f6:	695b      	ldr	r3, [r3, #20]
   d92f8:	9301      	str	r3, [sp, #4]
   d92fa:	bd08      	pop	{r3, pc}
   d92fc:	00030264 	.word	0x00030264

000d9300 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d9300:	b508      	push	{r3, lr}
   d9302:	4b02      	ldr	r3, [pc, #8]	; (d930c <inet_inet_pton+0xc>)
   d9304:	681b      	ldr	r3, [r3, #0]
   d9306:	699b      	ldr	r3, [r3, #24]
   d9308:	9301      	str	r3, [sp, #4]
   d930a:	bd08      	pop	{r3, pc}
   d930c:	00030264 	.word	0x00030264

000d9310 <inet_ntohs>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d9310:	b508      	push	{r3, lr}
   d9312:	4b02      	ldr	r3, [pc, #8]	; (d931c <inet_ntohs+0xc>)
   d9314:	681b      	ldr	r3, [r3, #0]
   d9316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9318:	9301      	str	r3, [sp, #4]
   d931a:	bd08      	pop	{r3, pc}
   d931c:	00030264 	.word	0x00030264

000d9320 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d9320:	b508      	push	{r3, lr}
   d9322:	4b02      	ldr	r3, [pc, #8]	; (d932c <inet_htons+0xc>)
   d9324:	681b      	ldr	r3, [r3, #0]
   d9326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d9328:	9301      	str	r3, [sp, #4]
   d932a:	bd08      	pop	{r3, pc}
   d932c:	00030264 	.word	0x00030264

000d9330 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d9330:	b508      	push	{r3, lr}
   d9332:	4b02      	ldr	r3, [pc, #8]	; (d933c <netdb_freeaddrinfo+0xc>)
   d9334:	681b      	ldr	r3, [r3, #0]
   d9336:	689b      	ldr	r3, [r3, #8]
   d9338:	9301      	str	r3, [sp, #4]
   d933a:	bd08      	pop	{r3, pc}
   d933c:	00030268 	.word	0x00030268

000d9340 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d9340:	b508      	push	{r3, lr}
   d9342:	4b02      	ldr	r3, [pc, #8]	; (d934c <netdb_getaddrinfo+0xc>)
   d9344:	681b      	ldr	r3, [r3, #0]
   d9346:	68db      	ldr	r3, [r3, #12]
   d9348:	9301      	str	r3, [sp, #4]
   d934a:	bd08      	pop	{r3, pc}
   d934c:	00030268 	.word	0x00030268

000d9350 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   d9350:	b508      	push	{r3, lr}
   d9352:	4b02      	ldr	r3, [pc, #8]	; (d935c <HAL_Tone_Start+0xc>)
   d9354:	681b      	ldr	r3, [r3, #0]
   d9356:	681b      	ldr	r3, [r3, #0]
   d9358:	9301      	str	r3, [sp, #4]
   d935a:	bd08      	pop	{r3, pc}
   d935c:	00030224 	.word	0x00030224

000d9360 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   d9360:	b508      	push	{r3, lr}
   d9362:	4b02      	ldr	r3, [pc, #8]	; (d936c <HAL_Tone_Stop+0xc>)
   d9364:	681b      	ldr	r3, [r3, #0]
   d9366:	685b      	ldr	r3, [r3, #4]
   d9368:	9301      	str	r3, [sp, #4]
   d936a:	bd08      	pop	{r3, pc}
   d936c:	00030224 	.word	0x00030224

000d9370 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d9370:	b508      	push	{r3, lr}
   d9372:	4b02      	ldr	r3, [pc, #8]	; (d937c <sock_bind+0xc>)
   d9374:	681b      	ldr	r3, [r3, #0]
   d9376:	685b      	ldr	r3, [r3, #4]
   d9378:	9301      	str	r3, [sp, #4]
   d937a:	bd08      	pop	{r3, pc}
   d937c:	00030238 	.word	0x00030238

000d9380 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d9380:	b508      	push	{r3, lr}
   d9382:	4b02      	ldr	r3, [pc, #8]	; (d938c <sock_setsockopt+0xc>)
   d9384:	681b      	ldr	r3, [r3, #0]
   d9386:	699b      	ldr	r3, [r3, #24]
   d9388:	9301      	str	r3, [sp, #4]
   d938a:	bd08      	pop	{r3, pc}
   d938c:	00030238 	.word	0x00030238

000d9390 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d9390:	b508      	push	{r3, lr}
   d9392:	4b02      	ldr	r3, [pc, #8]	; (d939c <sock_close+0xc>)
   d9394:	681b      	ldr	r3, [r3, #0]
   d9396:	69db      	ldr	r3, [r3, #28]
   d9398:	9301      	str	r3, [sp, #4]
   d939a:	bd08      	pop	{r3, pc}
   d939c:	00030238 	.word	0x00030238

000d93a0 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d93a0:	b508      	push	{r3, lr}
   d93a2:	4b02      	ldr	r3, [pc, #8]	; (d93ac <sock_recvfrom+0xc>)
   d93a4:	681b      	ldr	r3, [r3, #0]
   d93a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d93a8:	9301      	str	r3, [sp, #4]
   d93aa:	bd08      	pop	{r3, pc}
   d93ac:	00030238 	.word	0x00030238

000d93b0 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d93b0:	b508      	push	{r3, lr}
   d93b2:	4b02      	ldr	r3, [pc, #8]	; (d93bc <sock_sendto+0xc>)
   d93b4:	681b      	ldr	r3, [r3, #0]
   d93b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d93b8:	9301      	str	r3, [sp, #4]
   d93ba:	bd08      	pop	{r3, pc}
   d93bc:	00030238 	.word	0x00030238

000d93c0 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d93c0:	b508      	push	{r3, lr}
   d93c2:	4b02      	ldr	r3, [pc, #8]	; (d93cc <sock_socket+0xc>)
   d93c4:	681b      	ldr	r3, [r3, #0]
   d93c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d93c8:	9301      	str	r3, [sp, #4]
   d93ca:	bd08      	pop	{r3, pc}
   d93cc:	00030238 	.word	0x00030238

000d93d0 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d93d0:	b508      	push	{r3, lr}
   d93d2:	4b02      	ldr	r3, [pc, #8]	; (d93dc <HAL_SPI_Begin+0xc>)
   d93d4:	681b      	ldr	r3, [r3, #0]
   d93d6:	681b      	ldr	r3, [r3, #0]
   d93d8:	9301      	str	r3, [sp, #4]
   d93da:	bd08      	pop	{r3, pc}
   d93dc:	00030230 	.word	0x00030230

000d93e0 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d93e0:	b508      	push	{r3, lr}
   d93e2:	4b02      	ldr	r3, [pc, #8]	; (d93ec <HAL_SPI_Set_Bit_Order+0xc>)
   d93e4:	681b      	ldr	r3, [r3, #0]
   d93e6:	689b      	ldr	r3, [r3, #8]
   d93e8:	9301      	str	r3, [sp, #4]
   d93ea:	bd08      	pop	{r3, pc}
   d93ec:	00030230 	.word	0x00030230

000d93f0 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d93f0:	b508      	push	{r3, lr}
   d93f2:	4b02      	ldr	r3, [pc, #8]	; (d93fc <HAL_SPI_Set_Data_Mode+0xc>)
   d93f4:	681b      	ldr	r3, [r3, #0]
   d93f6:	68db      	ldr	r3, [r3, #12]
   d93f8:	9301      	str	r3, [sp, #4]
   d93fa:	bd08      	pop	{r3, pc}
   d93fc:	00030230 	.word	0x00030230

000d9400 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d9400:	b508      	push	{r3, lr}
   d9402:	4b02      	ldr	r3, [pc, #8]	; (d940c <HAL_SPI_Set_Clock_Divider+0xc>)
   d9404:	681b      	ldr	r3, [r3, #0]
   d9406:	691b      	ldr	r3, [r3, #16]
   d9408:	9301      	str	r3, [sp, #4]
   d940a:	bd08      	pop	{r3, pc}
   d940c:	00030230 	.word	0x00030230

000d9410 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d9410:	b508      	push	{r3, lr}
   d9412:	4b02      	ldr	r3, [pc, #8]	; (d941c <HAL_SPI_Send_Receive_Data+0xc>)
   d9414:	681b      	ldr	r3, [r3, #0]
   d9416:	695b      	ldr	r3, [r3, #20]
   d9418:	9301      	str	r3, [sp, #4]
   d941a:	bd08      	pop	{r3, pc}
   d941c:	00030230 	.word	0x00030230

000d9420 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d9420:	b508      	push	{r3, lr}
   d9422:	4b02      	ldr	r3, [pc, #8]	; (d942c <HAL_SPI_Init+0xc>)
   d9424:	681b      	ldr	r3, [r3, #0]
   d9426:	69db      	ldr	r3, [r3, #28]
   d9428:	9301      	str	r3, [sp, #4]
   d942a:	bd08      	pop	{r3, pc}
   d942c:	00030230 	.word	0x00030230

000d9430 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d9430:	b508      	push	{r3, lr}
   d9432:	4b02      	ldr	r3, [pc, #8]	; (d943c <HAL_SPI_Is_Enabled+0xc>)
   d9434:	681b      	ldr	r3, [r3, #0]
   d9436:	6a1b      	ldr	r3, [r3, #32]
   d9438:	9301      	str	r3, [sp, #4]
   d943a:	bd08      	pop	{r3, pc}
   d943c:	00030230 	.word	0x00030230

000d9440 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d9440:	b508      	push	{r3, lr}
   d9442:	4b02      	ldr	r3, [pc, #8]	; (d944c <HAL_SPI_Info+0xc>)
   d9444:	681b      	ldr	r3, [r3, #0]
   d9446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9448:	9301      	str	r3, [sp, #4]
   d944a:	bd08      	pop	{r3, pc}
   d944c:	00030230 	.word	0x00030230

000d9450 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d9450:	b508      	push	{r3, lr}
   d9452:	4b02      	ldr	r3, [pc, #8]	; (d945c <HAL_USART_Init+0xc>)
   d9454:	681b      	ldr	r3, [r3, #0]
   d9456:	681b      	ldr	r3, [r3, #0]
   d9458:	9301      	str	r3, [sp, #4]
   d945a:	bd08      	pop	{r3, pc}
   d945c:	0003023c 	.word	0x0003023c

000d9460 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d9460:	b508      	push	{r3, lr}
   d9462:	4b02      	ldr	r3, [pc, #8]	; (d946c <HAL_USART_Write_Data+0xc>)
   d9464:	681b      	ldr	r3, [r3, #0]
   d9466:	68db      	ldr	r3, [r3, #12]
   d9468:	9301      	str	r3, [sp, #4]
   d946a:	bd08      	pop	{r3, pc}
   d946c:	0003023c 	.word	0x0003023c

000d9470 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d9470:	b508      	push	{r3, lr}
   d9472:	4b02      	ldr	r3, [pc, #8]	; (d947c <HAL_USART_Available_Data+0xc>)
   d9474:	681b      	ldr	r3, [r3, #0]
   d9476:	691b      	ldr	r3, [r3, #16]
   d9478:	9301      	str	r3, [sp, #4]
   d947a:	bd08      	pop	{r3, pc}
   d947c:	0003023c 	.word	0x0003023c

000d9480 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d9480:	b508      	push	{r3, lr}
   d9482:	4b02      	ldr	r3, [pc, #8]	; (d948c <HAL_USART_Read_Data+0xc>)
   d9484:	681b      	ldr	r3, [r3, #0]
   d9486:	695b      	ldr	r3, [r3, #20]
   d9488:	9301      	str	r3, [sp, #4]
   d948a:	bd08      	pop	{r3, pc}
   d948c:	0003023c 	.word	0x0003023c

000d9490 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d9490:	b508      	push	{r3, lr}
   d9492:	4b02      	ldr	r3, [pc, #8]	; (d949c <HAL_USART_Peek_Data+0xc>)
   d9494:	681b      	ldr	r3, [r3, #0]
   d9496:	699b      	ldr	r3, [r3, #24]
   d9498:	9301      	str	r3, [sp, #4]
   d949a:	bd08      	pop	{r3, pc}
   d949c:	0003023c 	.word	0x0003023c

000d94a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d94a0:	b508      	push	{r3, lr}
   d94a2:	4b02      	ldr	r3, [pc, #8]	; (d94ac <HAL_USART_Flush_Data+0xc>)
   d94a4:	681b      	ldr	r3, [r3, #0]
   d94a6:	69db      	ldr	r3, [r3, #28]
   d94a8:	9301      	str	r3, [sp, #4]
   d94aa:	bd08      	pop	{r3, pc}
   d94ac:	0003023c 	.word	0x0003023c

000d94b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d94b0:	b508      	push	{r3, lr}
   d94b2:	4b02      	ldr	r3, [pc, #8]	; (d94bc <HAL_USART_Is_Enabled+0xc>)
   d94b4:	681b      	ldr	r3, [r3, #0]
   d94b6:	6a1b      	ldr	r3, [r3, #32]
   d94b8:	9301      	str	r3, [sp, #4]
   d94ba:	bd08      	pop	{r3, pc}
   d94bc:	0003023c 	.word	0x0003023c

000d94c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d94c0:	b508      	push	{r3, lr}
   d94c2:	4b02      	ldr	r3, [pc, #8]	; (d94cc <HAL_USART_Available_Data_For_Write+0xc>)
   d94c4:	681b      	ldr	r3, [r3, #0]
   d94c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d94c8:	9301      	str	r3, [sp, #4]
   d94ca:	bd08      	pop	{r3, pc}
   d94cc:	0003023c 	.word	0x0003023c

000d94d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d94d0:	b508      	push	{r3, lr}
   d94d2:	4b02      	ldr	r3, [pc, #8]	; (d94dc <HAL_USB_USART_Init+0xc>)
   d94d4:	681b      	ldr	r3, [r3, #0]
   d94d6:	681b      	ldr	r3, [r3, #0]
   d94d8:	9301      	str	r3, [sp, #4]
   d94da:	bd08      	pop	{r3, pc}
   d94dc:	0003024c 	.word	0x0003024c

000d94e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d94e0:	b508      	push	{r3, lr}
   d94e2:	4b02      	ldr	r3, [pc, #8]	; (d94ec <HAL_USB_USART_Begin+0xc>)
   d94e4:	681b      	ldr	r3, [r3, #0]
   d94e6:	685b      	ldr	r3, [r3, #4]
   d94e8:	9301      	str	r3, [sp, #4]
   d94ea:	bd08      	pop	{r3, pc}
   d94ec:	0003024c 	.word	0x0003024c

000d94f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d94f0:	b508      	push	{r3, lr}
   d94f2:	4b02      	ldr	r3, [pc, #8]	; (d94fc <HAL_USB_USART_Available_Data+0xc>)
   d94f4:	681b      	ldr	r3, [r3, #0]
   d94f6:	691b      	ldr	r3, [r3, #16]
   d94f8:	9301      	str	r3, [sp, #4]
   d94fa:	bd08      	pop	{r3, pc}
   d94fc:	0003024c 	.word	0x0003024c

000d9500 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d9500:	b508      	push	{r3, lr}
   d9502:	4b02      	ldr	r3, [pc, #8]	; (d950c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d9504:	681b      	ldr	r3, [r3, #0]
   d9506:	695b      	ldr	r3, [r3, #20]
   d9508:	9301      	str	r3, [sp, #4]
   d950a:	bd08      	pop	{r3, pc}
   d950c:	0003024c 	.word	0x0003024c

000d9510 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9510:	b508      	push	{r3, lr}
   d9512:	4b02      	ldr	r3, [pc, #8]	; (d951c <HAL_USB_USART_Receive_Data+0xc>)
   d9514:	681b      	ldr	r3, [r3, #0]
   d9516:	699b      	ldr	r3, [r3, #24]
   d9518:	9301      	str	r3, [sp, #4]
   d951a:	bd08      	pop	{r3, pc}
   d951c:	0003024c 	.word	0x0003024c

000d9520 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d9520:	b508      	push	{r3, lr}
   d9522:	4b02      	ldr	r3, [pc, #8]	; (d952c <HAL_USB_USART_Send_Data+0xc>)
   d9524:	681b      	ldr	r3, [r3, #0]
   d9526:	69db      	ldr	r3, [r3, #28]
   d9528:	9301      	str	r3, [sp, #4]
   d952a:	bd08      	pop	{r3, pc}
   d952c:	0003024c 	.word	0x0003024c

000d9530 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d9530:	b508      	push	{r3, lr}
   d9532:	4b02      	ldr	r3, [pc, #8]	; (d953c <HAL_USB_USART_Flush_Data+0xc>)
   d9534:	681b      	ldr	r3, [r3, #0]
   d9536:	6a1b      	ldr	r3, [r3, #32]
   d9538:	9301      	str	r3, [sp, #4]
   d953a:	bd08      	pop	{r3, pc}
   d953c:	0003024c 	.word	0x0003024c

000d9540 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d9540:	b508      	push	{r3, lr}
   d9542:	4b02      	ldr	r3, [pc, #8]	; (d954c <panic_+0xc>)
   d9544:	681b      	ldr	r3, [r3, #0]
   d9546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d9548:	9301      	str	r3, [sp, #4]
   d954a:	bd08      	pop	{r3, pc}
   d954c:	00030260 	.word	0x00030260

000d9550 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d9550:	b508      	push	{r3, lr}
   d9552:	4b02      	ldr	r3, [pc, #8]	; (d955c <log_message+0xc>)
   d9554:	681b      	ldr	r3, [r3, #0]
   d9556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d9558:	9301      	str	r3, [sp, #4]
   d955a:	bd08      	pop	{r3, pc}
   d955c:	00030260 	.word	0x00030260

000d9560 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d9560:	b508      	push	{r3, lr}
   d9562:	4b02      	ldr	r3, [pc, #8]	; (d956c <set_system_mode+0xc>)
   d9564:	681b      	ldr	r3, [r3, #0]
   d9566:	685b      	ldr	r3, [r3, #4]
   d9568:	9301      	str	r3, [sp, #4]
   d956a:	bd08      	pop	{r3, pc}
   d956c:	00030220 	.word	0x00030220

000d9570 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d9570:	b508      	push	{r3, lr}
   d9572:	4b02      	ldr	r3, [pc, #8]	; (d957c <system_delay_ms+0xc>)
   d9574:	681b      	ldr	r3, [r3, #0]
   d9576:	695b      	ldr	r3, [r3, #20]
   d9578:	9301      	str	r3, [sp, #4]
   d957a:	bd08      	pop	{r3, pc}
   d957c:	00030220 	.word	0x00030220

000d9580 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, void(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d9580:	b508      	push	{r3, lr}
   d9582:	4b02      	ldr	r3, [pc, #8]	; (d958c <system_thread_set_state+0xc>)
   d9584:	681b      	ldr	r3, [r3, #0]
   d9586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9588:	9301      	str	r3, [sp, #4]
   d958a:	bd08      	pop	{r3, pc}
   d958c:	00030220 	.word	0x00030220

000d9590 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d9590:	b508      	push	{r3, lr}
   d9592:	4b02      	ldr	r3, [pc, #8]	; (d959c <application_thread_current+0xc>)
   d9594:	681b      	ldr	r3, [r3, #0]
   d9596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d9598:	9301      	str	r3, [sp, #4]
   d959a:	bd08      	pop	{r3, pc}
   d959c:	00030220 	.word	0x00030220

000d95a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d95a0:	b508      	push	{r3, lr}
   d95a2:	4b02      	ldr	r3, [pc, #8]	; (d95ac <application_thread_invoke+0xc>)
   d95a4:	681b      	ldr	r3, [r3, #0]
   d95a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d95a8:	9301      	str	r3, [sp, #4]
   d95aa:	bd08      	pop	{r3, pc}
   d95ac:	00030220 	.word	0x00030220

000d95b0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d95b0:	b508      	push	{r3, lr}
   d95b2:	4b03      	ldr	r3, [pc, #12]	; (d95c0 <system_ctrl_set_app_request_handler+0x10>)
   d95b4:	681b      	ldr	r3, [r3, #0]
   d95b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d95ba:	9301      	str	r3, [sp, #4]
   d95bc:	bd08      	pop	{r3, pc}
   d95be:	0000      	.short	0x0000
   d95c0:	00030220 	.word	0x00030220

000d95c4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d95c4:	b508      	push	{r3, lr}
   d95c6:	4b03      	ldr	r3, [pc, #12]	; (d95d4 <system_ctrl_set_result+0x10>)
   d95c8:	681b      	ldr	r3, [r3, #0]
   d95ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d95ce:	9301      	str	r3, [sp, #4]
   d95d0:	bd08      	pop	{r3, pc}
   d95d2:	0000      	.short	0x0000
   d95d4:	00030220 	.word	0x00030220

000d95d8 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int32_t(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d95d8:	b508      	push	{r3, lr}
   d95da:	4b03      	ldr	r3, [pc, #12]	; (d95e8 <system_invoke_event_handler+0x10>)
   d95dc:	681b      	ldr	r3, [r3, #0]
   d95de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d95e2:	9301      	str	r3, [sp, #4]
   d95e4:	bd08      	pop	{r3, pc}
   d95e6:	0000      	.short	0x0000
   d95e8:	00030220 	.word	0x00030220

000d95ec <system_task_loop>:
DYNALIB_FN(BASE_IDX + 17, system, system_task_loop, int(system_task_fn fn, void*))
   d95ec:	b508      	push	{r3, lr}
   d95ee:	4b03      	ldr	r3, [pc, #12]	; (d95fc <system_task_loop+0x10>)
   d95f0:	681b      	ldr	r3, [r3, #0]
   d95f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d95f6:	9301      	str	r3, [sp, #4]
   d95f8:	bd08      	pop	{r3, pc}
   d95fa:	0000      	.short	0x0000
   d95fc:	00030220 	.word	0x00030220

000d9600 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d9600:	b508      	push	{r3, lr}
   d9602:	4b02      	ldr	r3, [pc, #8]	; (d960c <spark_variable+0xc>)
   d9604:	681b      	ldr	r3, [r3, #0]
   d9606:	681b      	ldr	r3, [r3, #0]
   d9608:	9301      	str	r3, [sp, #4]
   d960a:	bd08      	pop	{r3, pc}
   d960c:	00030244 	.word	0x00030244

000d9610 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d9610:	b508      	push	{r3, lr}
   d9612:	4b02      	ldr	r3, [pc, #8]	; (d961c <spark_function+0xc>)
   d9614:	681b      	ldr	r3, [r3, #0]
   d9616:	685b      	ldr	r3, [r3, #4]
   d9618:	9301      	str	r3, [sp, #4]
   d961a:	bd08      	pop	{r3, pc}
   d961c:	00030244 	.word	0x00030244

000d9620 <spark_cloud_flag_connect>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d9620:	b508      	push	{r3, lr}
   d9622:	4b02      	ldr	r3, [pc, #8]	; (d962c <spark_cloud_flag_connect+0xc>)
   d9624:	681b      	ldr	r3, [r3, #0]
   d9626:	68db      	ldr	r3, [r3, #12]
   d9628:	9301      	str	r3, [sp, #4]
   d962a:	bd08      	pop	{r3, pc}
   d962c:	00030244 	.word	0x00030244

000d9630 <spark_deviceID>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d9630:	b508      	push	{r3, lr}
   d9632:	4b02      	ldr	r3, [pc, #8]	; (d963c <spark_deviceID+0xc>)
   d9634:	681b      	ldr	r3, [r3, #0]
   d9636:	69db      	ldr	r3, [r3, #28]
   d9638:	9301      	str	r3, [sp, #4]
   d963a:	bd08      	pop	{r3, pc}
   d963c:	00030244 	.word	0x00030244

000d9640 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d9640:	b508      	push	{r3, lr}
   d9642:	4b02      	ldr	r3, [pc, #8]	; (d964c <spark_send_event+0xc>)
   d9644:	681b      	ldr	r3, [r3, #0]
   d9646:	6a1b      	ldr	r3, [r3, #32]
   d9648:	9301      	str	r3, [sp, #4]
   d964a:	bd08      	pop	{r3, pc}
   d964c:	00030244 	.word	0x00030244

000d9650 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d9650:	b508      	push	{r3, lr}
   d9652:	4b02      	ldr	r3, [pc, #8]	; (d965c <spark_subscribe+0xc>)
   d9654:	681b      	ldr	r3, [r3, #0]
   d9656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d9658:	9301      	str	r3, [sp, #4]
   d965a:	bd08      	pop	{r3, pc}
   d965c:	00030244 	.word	0x00030244

000d9660 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d9660:	b508      	push	{r3, lr}
   d9662:	4b02      	ldr	r3, [pc, #8]	; (d966c <spark_set_random_seed_from_cloud_handler+0xc>)
   d9664:	681b      	ldr	r3, [r3, #0]
   d9666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d9668:	9301      	str	r3, [sp, #4]
   d966a:	bd08      	pop	{r3, pc}
   d966c:	00030244 	.word	0x00030244

000d9670 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d9670:	b508      	push	{r3, lr}
   d9672:	4b02      	ldr	r3, [pc, #8]	; (d967c <network_connect+0xc>)
   d9674:	681b      	ldr	r3, [r3, #0]
   d9676:	685b      	ldr	r3, [r3, #4]
   d9678:	9301      	str	r3, [sp, #4]
   d967a:	bd08      	pop	{r3, pc}
   d967c:	00030240 	.word	0x00030240

000d9680 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d9680:	b508      	push	{r3, lr}
   d9682:	4b02      	ldr	r3, [pc, #8]	; (d968c <network_connecting+0xc>)
   d9684:	681b      	ldr	r3, [r3, #0]
   d9686:	689b      	ldr	r3, [r3, #8]
   d9688:	9301      	str	r3, [sp, #4]
   d968a:	bd08      	pop	{r3, pc}
   d968c:	00030240 	.word	0x00030240

000d9690 <network_ready>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d9690:	b508      	push	{r3, lr}
   d9692:	4b02      	ldr	r3, [pc, #8]	; (d969c <network_ready+0xc>)
   d9694:	681b      	ldr	r3, [r3, #0]
   d9696:	691b      	ldr	r3, [r3, #16]
   d9698:	9301      	str	r3, [sp, #4]
   d969a:	bd08      	pop	{r3, pc}
   d969c:	00030240 	.word	0x00030240

000d96a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d96a0:	b508      	push	{r3, lr}
   d96a2:	4b02      	ldr	r3, [pc, #8]	; (d96ac <network_on+0xc>)
   d96a4:	681b      	ldr	r3, [r3, #0]
   d96a6:	695b      	ldr	r3, [r3, #20]
   d96a8:	9301      	str	r3, [sp, #4]
   d96aa:	bd08      	pop	{r3, pc}
   d96ac:	00030240 	.word	0x00030240

000d96b0 <network_listening>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d96b0:	b508      	push	{r3, lr}
   d96b2:	4b02      	ldr	r3, [pc, #8]	; (d96bc <network_listening+0xc>)
   d96b4:	681b      	ldr	r3, [r3, #0]
   d96b6:	6a1b      	ldr	r3, [r3, #32]
   d96b8:	9301      	str	r3, [sp, #4]
   d96ba:	bd08      	pop	{r3, pc}
   d96bc:	00030240 	.word	0x00030240

000d96c0 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d96c0:	b508      	push	{r3, lr}
   d96c2:	4b02      	ldr	r3, [pc, #8]	; (d96cc <malloc+0xc>)
   d96c4:	681b      	ldr	r3, [r3, #0]
   d96c6:	681b      	ldr	r3, [r3, #0]
   d96c8:	9301      	str	r3, [sp, #4]
   d96ca:	bd08      	pop	{r3, pc}
   d96cc:	0003021c 	.word	0x0003021c

000d96d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d96d0:	b508      	push	{r3, lr}
   d96d2:	4b02      	ldr	r3, [pc, #8]	; (d96dc <free+0xc>)
   d96d4:	681b      	ldr	r3, [r3, #0]
   d96d6:	685b      	ldr	r3, [r3, #4]
   d96d8:	9301      	str	r3, [sp, #4]
   d96da:	bd08      	pop	{r3, pc}
   d96dc:	0003021c 	.word	0x0003021c

000d96e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d96e0:	b508      	push	{r3, lr}
   d96e2:	4b02      	ldr	r3, [pc, #8]	; (d96ec <realloc+0xc>)
   d96e4:	681b      	ldr	r3, [r3, #0]
   d96e6:	689b      	ldr	r3, [r3, #8]
   d96e8:	9301      	str	r3, [sp, #4]
   d96ea:	bd08      	pop	{r3, pc}
   d96ec:	0003021c 	.word	0x0003021c

000d96f0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d96f0:	b508      	push	{r3, lr}
   d96f2:	4b02      	ldr	r3, [pc, #8]	; (d96fc <vsnprintf+0xc>)
   d96f4:	681b      	ldr	r3, [r3, #0]
   d96f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d96f8:	9301      	str	r3, [sp, #4]
   d96fa:	bd08      	pop	{r3, pc}
   d96fc:	0003021c 	.word	0x0003021c

000d9700 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d9700:	b508      	push	{r3, lr}
   d9702:	4b02      	ldr	r3, [pc, #8]	; (d970c <abort+0xc>)
   d9704:	681b      	ldr	r3, [r3, #0]
   d9706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d9708:	9301      	str	r3, [sp, #4]
   d970a:	bd08      	pop	{r3, pc}
   d970c:	0003021c 	.word	0x0003021c

000d9710 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d9710:	b508      	push	{r3, lr}
   d9712:	4b02      	ldr	r3, [pc, #8]	; (d971c <_malloc_r+0xc>)
   d9714:	681b      	ldr	r3, [r3, #0]
   d9716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d9718:	9301      	str	r3, [sp, #4]
   d971a:	bd08      	pop	{r3, pc}
   d971c:	0003021c 	.word	0x0003021c

000d9720 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d9720:	2100      	movs	r1, #0
   d9722:	f7ff bf25 	b.w	d9570 <system_delay_ms>

000d9726 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9726:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9728:	6883      	ldr	r3, [r0, #8]
   d972a:	4604      	mov	r4, r0
   d972c:	b90b      	cbnz	r3, d9732 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d972e:	f001 ff62 	bl	db5f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9732:	68c3      	ldr	r3, [r0, #12]
   d9734:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d9736:	68a3      	ldr	r3, [r4, #8]
   d9738:	b11b      	cbz	r3, d9742 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d973a:	2203      	movs	r2, #3
   d973c:	4621      	mov	r1, r4
   d973e:	4620      	mov	r0, r4
   d9740:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9742:	4620      	mov	r0, r4
}
   d9744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9748:	f7fa bca9 	b.w	d409e <_ZdlPv>

000d974c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d974c:	4770      	bx	lr

000d974e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d974e:	2000      	movs	r0, #0
   d9750:	4770      	bx	lr

000d9752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9752:	b510      	push	{r4, lr}
   d9754:	4604      	mov	r4, r0
   d9756:	f7fa fca2 	bl	d409e <_ZdlPv>
   d975a:	4620      	mov	r0, r4
   d975c:	bd10      	pop	{r4, pc}

000d975e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d975e:	b508      	push	{r3, lr}
      { delete this; }
   d9760:	b108      	cbz	r0, d9766 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d9762:	f7ff fff6 	bl	d9752 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d9766:	bd08      	pop	{r3, pc}

000d9768 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d9768:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d976a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d976c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d976e:	b113      	cbz	r3, d9776 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9770:	2203      	movs	r2, #3
   d9772:	4601      	mov	r1, r0
   d9774:	4798      	blx	r3
    }
   d9776:	4620      	mov	r0, r4
   d9778:	bd10      	pop	{r4, pc}

000d977a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d977a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d977c:	68c4      	ldr	r4, [r0, #12]
   d977e:	b1d4      	cbz	r4, d97b6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d9780:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d9782:	2b02      	cmp	r3, #2
   d9784:	d102      	bne.n	d978c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d9786:	68e0      	ldr	r0, [r4, #12]
   d9788:	f7ff ffa2 	bl	d96d0 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d978c:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d978e:	b12d      	cbz	r5, d979c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9790:	4628      	mov	r0, r5
   d9792:	f7ff ffe9 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
   d9796:	4628      	mov	r0, r5
   d9798:	f7fa fc81 	bl	d409e <_ZdlPv>
   d979c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d979e:	b12d      	cbz	r5, d97ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d97a0:	4628      	mov	r0, r5
   d97a2:	f7ff ffe1 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
   d97a6:	4628      	mov	r0, r5
   d97a8:	f7fa fc79 	bl	d409e <_ZdlPv>
   d97ac:	4620      	mov	r0, r4
   d97ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d97b2:	f7fa bc74 	b.w	d409e <_ZdlPv>
   d97b6:	bd38      	pop	{r3, r4, r5, pc}

000d97b8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d97b8:	b510      	push	{r4, lr}
   d97ba:	b088      	sub	sp, #32
   d97bc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d97be:	4668      	mov	r0, sp
   d97c0:	f000 ff67 	bl	da692 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d97c4:	4669      	mov	r1, sp
   d97c6:	a804      	add	r0, sp, #16
   d97c8:	f000 ffa2 	bl	da710 <_ZN6StringC1ERKS_>
   d97cc:	a804      	add	r0, sp, #16
   d97ce:	47a0      	blx	r4
   d97d0:	4604      	mov	r4, r0
   d97d2:	a804      	add	r0, sp, #16
   d97d4:	f000 ff16 	bl	da604 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d97d8:	4668      	mov	r0, sp
   d97da:	f000 ff13 	bl	da604 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d97de:	4620      	mov	r0, r4
   d97e0:	b008      	add	sp, #32
   d97e2:	bd10      	pop	{r4, pc}

000d97e4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d97e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d97e6:	2410      	movs	r4, #16
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d97e8:	b085      	sub	sp, #20
   d97ea:	4607      	mov	r7, r0
   d97ec:	460e      	mov	r6, r1
   d97ee:	4615      	mov	r5, r2
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
   d97f0:	2100      	movs	r1, #0
   d97f2:	4622      	mov	r2, r4
   d97f4:	4668      	mov	r0, sp
   d97f6:	f002 fd6f 	bl	dc2d8 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d97fa:	2200      	movs	r2, #0
   d97fc:	4669      	mov	r1, sp
   d97fe:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
   d9800:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
   d9804:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d9806:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d9808:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d980a:	f7ff ff01 	bl	d9610 <spark_function>
}
   d980e:	b005      	add	sp, #20
   d9810:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d9812:	b513      	push	{r0, r1, r4, lr}
   d9814:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9816:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d981a:	2300      	movs	r3, #0
   d981c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d981e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d9820:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d9822:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9824:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d9826:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d9828:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d982a:	f7fc f9b5 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d982e:	4620      	mov	r0, r4
   d9830:	b002      	add	sp, #8
   d9832:	bd10      	pop	{r4, pc}

000d9834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d9834:	680b      	ldr	r3, [r1, #0]
   d9836:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d9838:	b113      	cbz	r3, d9840 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d983a:	685a      	ldr	r2, [r3, #4]
   d983c:	3201      	adds	r2, #1
   d983e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d9840:	4770      	bx	lr

000d9842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d9842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9844:	460c      	mov	r4, r1
   d9846:	ad02      	add	r5, sp, #8
   d9848:	f854 3b04 	ldr.w	r3, [r4], #4
   d984c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d9850:	4606      	mov	r6, r0
   d9852:	460f      	mov	r7, r1
   d9854:	a801      	add	r0, sp, #4
   d9856:	4621      	mov	r1, r4
   d9858:	f7ff ffec 	bl	d9834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d985c:	4629      	mov	r1, r5
   d985e:	4630      	mov	r0, r6
   d9860:	f7ff ffd7 	bl	d9812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9864:	a801      	add	r0, sp, #4
   d9866:	f7fc f997 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d986a:	4620      	mov	r0, r4
   d986c:	f7fc f994 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d9870:	4638      	mov	r0, r7
   d9872:	f7fa fc14 	bl	d409e <_ZdlPv>
        return p;
    }
   d9876:	4630      	mov	r0, r6
   d9878:	b003      	add	sp, #12
   d987a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d987c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d987c:	b513      	push	{r0, r1, r4, lr}
   d987e:	460b      	mov	r3, r1
   d9880:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9882:	c803      	ldmia	r0, {r0, r1}
   d9884:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9888:	e893 0003 	ldmia.w	r3, {r0, r1}
   d988c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d9890:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d9894:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d9898:	b002      	add	sp, #8
   d989a:	bd10      	pop	{r4, pc}

000d989c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d989c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d989e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d98a0:	b90a      	cbnz	r2, d98a6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d98a2:	f001 fea8 	bl	db5f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d98a6:	68c3      	ldr	r3, [r0, #12]
    }
   d98a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d98ac:	4718      	bx	r3

000d98ae <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d98ae:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d98b0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d98b2:	f100 0110 	add.w	r1, r0, #16
   d98b6:	f7ff fff1 	bl	d989c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d98ba:	bd08      	pop	{r3, pc}

000d98bc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d98bc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d98be:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d98c0:	b90a      	cbnz	r2, d98c6 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d98c2:	f001 fe98 	bl	db5f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d98c6:	68c3      	ldr	r3, [r0, #12]
    }
   d98c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d98cc:	4718      	bx	r3

000d98ce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d98ce:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d98d0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d98d2:	f100 0110 	add.w	r1, r0, #16
   d98d6:	f7ff fff1 	bl	d98bc <_ZNKSt8functionIFvRKbEEclES1_>
   d98da:	bd08      	pop	{r3, pc}

000d98dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d98dc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d98de:	2300      	movs	r3, #0
   d98e0:	6083      	str	r3, [r0, #8]
   d98e2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d98e4:	4604      	mov	r4, r0
   d98e6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d98e8:	b12b      	cbz	r3, d98f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d98ea:	2202      	movs	r2, #2
   d98ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d98ee:	68eb      	ldr	r3, [r5, #12]
   d98f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d98f2:	68ab      	ldr	r3, [r5, #8]
   d98f4:	60a3      	str	r3, [r4, #8]
	}
    }
   d98f6:	4620      	mov	r0, r4
   d98f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d98fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d98fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d9900:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d9904:	b086      	sub	sp, #24
   d9906:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9908:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d990c:	808b      	strh	r3, [r1, #4]
   d990e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9910:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9912:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d9916:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d9918:	f04f 0002 	mov.w	r0, #2
   d991c:	e8d4 1f4f 	ldrexb	r1, [r4]
   d9920:	4299      	cmp	r1, r3
   d9922:	d103      	bne.n	d992c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d9924:	e8c4 0f45 	strexb	r5, r0, [r4]
   d9928:	2d00      	cmp	r5, #0
   d992a:	d1f7      	bne.n	d991c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d992c:	d002      	beq.n	d9934 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d992e:	f88d 1000 	strb.w	r1, [sp]
   d9932:	e06a      	b.n	d9a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d9934:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9938:	bf1e      	ittt	ne
   d993a:	60e7      	strne	r7, [r4, #12]
   d993c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d993e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9940:	2301      	movs	r3, #1
   d9942:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9946:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9948:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d994a:	f104 0308 	add.w	r3, r4, #8
   d994e:	f3bf 8f5f 	dmb	sy
   d9952:	e853 6f00 	ldrex	r6, [r3]
   d9956:	e843 0200 	strex	r2, r0, [r3]
   d995a:	2a00      	cmp	r2, #0
   d995c:	d1f9      	bne.n	d9952 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d995e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9962:	2e00      	cmp	r6, #0
   d9964:	d051      	beq.n	d9a0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9966:	f7ff fe13 	bl	d9590 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d996a:	b120      	cbz	r0, d9976 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d996c:	4629      	mov	r1, r5
   d996e:	4630      	mov	r0, r6
   d9970:	f7ff ff94 	bl	d989c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d9974:	e043      	b.n	d99fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9976:	4631      	mov	r1, r6
   d9978:	4668      	mov	r0, sp
   d997a:	f7ff ffaf 	bl	d98dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d997e:	68e0      	ldr	r0, [r4, #12]
   d9980:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9984:	b108      	cbz	r0, d998a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d9986:	f002 fd19 	bl	dc3bc <strdup>
   d998a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d998c:	2010      	movs	r0, #16
   d998e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d9992:	f7fa fb80 	bl	d4096 <_Znwj>
   d9996:	4605      	mov	r5, r0
   d9998:	b330      	cbz	r0, d99e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d999a:	f04f 0800 	mov.w	r8, #0
   d999e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d99a2:	2018      	movs	r0, #24
   d99a4:	f7fa fb77 	bl	d4096 <_Znwj>
   d99a8:	4604      	mov	r4, r0
   d99aa:	b1c0      	cbz	r0, d99de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d99ac:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d99b0:	4601      	mov	r1, r0
   d99b2:	4668      	mov	r0, sp
   d99b4:	f7ff ff62 	bl	d987c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99b8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d99ba:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d99bc:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d99be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d99c0:	9202      	str	r2, [sp, #8]
   d99c2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d99c4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d99c6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d99ca:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d99cc:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d99d0:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d99d4:	9b04      	ldr	r3, [sp, #16]
   d99d6:	9203      	str	r2, [sp, #12]
   d99d8:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d99da:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d99de:	4b0e      	ldr	r3, [pc, #56]	; (d9a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d99e0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d99e2:	4b0e      	ldr	r3, [pc, #56]	; (d9a1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d99e4:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d99e6:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d99e8:	9804      	ldr	r0, [sp, #16]
   d99ea:	f7ff fe71 	bl	d96d0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d99ee:	4668      	mov	r0, sp
   d99f0:	f7ff feba 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d99f4:	2200      	movs	r2, #0
   d99f6:	4629      	mov	r1, r5
   d99f8:	4809      	ldr	r0, [pc, #36]	; (d9a20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d99fa:	f7ff fdd1 	bl	d95a0 <application_thread_invoke>
   d99fe:	4630      	mov	r0, r6
   d9a00:	f7ff feb2 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9a04:	4630      	mov	r0, r6
   d9a06:	f7fa fb4a 	bl	d409e <_ZdlPv>
   d9a0a:	4638      	mov	r0, r7
   d9a0c:	f7ff fe60 	bl	d96d0 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d9a10:	b006      	add	sp, #24
   d9a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9a16:	bf00      	nop
   d9a18:	000d98af 	.word	0x000d98af
   d9a1c:	000d9b0d 	.word	0x000d9b0d
   d9a20:	000d9727 	.word	0x000d9727

000d9a24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a28:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9a2a:	ad07      	add	r5, sp, #28
   d9a2c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9a30:	4606      	mov	r6, r0
   d9a32:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d9a34:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9a36:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9a38:	460f      	mov	r7, r1
   d9a3a:	4690      	mov	r8, r2
   d9a3c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9a40:	f8c5 b004 	str.w	fp, [r5, #4]
   d9a44:	f8c5 b008 	str.w	fp, [r5, #8]
   d9a48:	9307      	str	r3, [sp, #28]
   d9a4a:	f7fa fb24 	bl	d4096 <_Znwj>
   d9a4e:	4604      	mov	r4, r0
   d9a50:	b138      	cbz	r0, d9a62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9a52:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9a56:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9a5a:	f8c0 b004 	str.w	fp, [r0, #4]
   d9a5e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d9a62:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a64:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d9a66:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d9a68:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a6a:	f7fa fb14 	bl	d4096 <_Znwj>
   d9a6e:	b128      	cbz	r0, d9a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9a70:	2301      	movs	r3, #1
   d9a72:	6043      	str	r3, [r0, #4]
   d9a74:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d9a76:	4b23      	ldr	r3, [pc, #140]	; (d9b04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d9a78:	6003      	str	r3, [r0, #0]
   d9a7a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9a7c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d9a7e:	4b22      	ldr	r3, [pc, #136]	; (d9b08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d9a80:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9a82:	2008      	movs	r0, #8
   d9a84:	f7fa fb07 	bl	d4096 <_Znwj>
   d9a88:	4604      	mov	r4, r0
   d9a8a:	b128      	cbz	r0, d9a98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a8c:	9b03      	ldr	r3, [sp, #12]
   d9a8e:	f840 3b04 	str.w	r3, [r0], #4
   d9a92:	a904      	add	r1, sp, #16
   d9a94:	f7ff fece 	bl	d9834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9a98:	9500      	str	r5, [sp, #0]
   d9a9a:	fa5f f38a 	uxtb.w	r3, sl
   d9a9e:	464a      	mov	r2, r9
   d9aa0:	4641      	mov	r1, r8
   d9aa2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d9aa4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9aa6:	f7ff fdcb 	bl	d9640 <spark_send_event>
   d9aaa:	b9b8      	cbnz	r0, d9adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d9aac:	9b03      	ldr	r3, [sp, #12]
   d9aae:	785b      	ldrb	r3, [r3, #1]
   d9ab0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d9ab4:	b993      	cbnz	r3, d9adc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9ab6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d9aba:	a905      	add	r1, sp, #20
   d9abc:	a803      	add	r0, sp, #12
   d9abe:	9205      	str	r2, [sp, #20]
   d9ac0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9ac4:	f7ff ff1a 	bl	d98fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d9ac8:	9805      	ldr	r0, [sp, #20]
   d9aca:	f7ff fe01 	bl	d96d0 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d9ace:	a805      	add	r0, sp, #20
   d9ad0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9ad2:	f7ff feb6 	bl	d9842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9ad6:	a806      	add	r0, sp, #24
   d9ad8:	f7fc f85e 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9adc:	9b03      	ldr	r3, [sp, #12]
   d9ade:	9305      	str	r3, [sp, #20]
   d9ae0:	a904      	add	r1, sp, #16
   d9ae2:	a806      	add	r0, sp, #24
   d9ae4:	f7ff fea6 	bl	d9834 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d9ae8:	a905      	add	r1, sp, #20
   d9aea:	4630      	mov	r0, r6
   d9aec:	f7ff fe91 	bl	d9812 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9af0:	a806      	add	r0, sp, #24
   d9af2:	f7fc f851 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9af6:	a804      	add	r0, sp, #16
   d9af8:	f7fc f84e 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d9afc:	4630      	mov	r0, r6
   d9afe:	b00b      	add	sp, #44	; 0x2c
   d9b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9b04:	000de564 	.word	0x000de564
   d9b08:	000d9c75 	.word	0x000d9c75

000d9b0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b0c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9b10:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b12:	d006      	beq.n	d9b22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d9b14:	2a03      	cmp	r2, #3
   d9b16:	d017      	beq.n	d9b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9b18:	2a01      	cmp	r2, #1
   d9b1a:	d120      	bne.n	d9b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9b1c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9b1e:	6003      	str	r3, [r0, #0]
	      break;
   d9b20:	e01d      	b.n	d9b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9b22:	2018      	movs	r0, #24
   d9b24:	680e      	ldr	r6, [r1, #0]
   d9b26:	f7fa fab6 	bl	d4096 <_Znwj>
   d9b2a:	4605      	mov	r5, r0
   d9b2c:	b150      	cbz	r0, d9b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9b2e:	4631      	mov	r1, r6
   d9b30:	f7ff fed4 	bl	d98dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9b34:	6930      	ldr	r0, [r6, #16]
   d9b36:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9b3a:	b108      	cbz	r0, d9b40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d9b3c:	f002 fc3e 	bl	dc3bc <strdup>
   d9b40:	6128      	str	r0, [r5, #16]
   d9b42:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9b44:	6025      	str	r5, [r4, #0]
   d9b46:	e00a      	b.n	d9b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9b48:	6804      	ldr	r4, [r0, #0]
   d9b4a:	b144      	cbz	r4, d9b5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d9b4c:	6920      	ldr	r0, [r4, #16]
   d9b4e:	f7ff fdbf 	bl	d96d0 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9b52:	4620      	mov	r0, r4
   d9b54:	f7ff fe08 	bl	d9768 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9b58:	4620      	mov	r0, r4
   d9b5a:	f7fa faa0 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9b5e:	2000      	movs	r0, #0
   d9b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9b62:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9b64:	2300      	movs	r3, #0
   d9b66:	6083      	str	r3, [r0, #8]
   d9b68:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9b6a:	4604      	mov	r4, r0
   d9b6c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9b6e:	b12b      	cbz	r3, d9b7c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9b70:	2202      	movs	r2, #2
   d9b72:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9b74:	68eb      	ldr	r3, [r5, #12]
   d9b76:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9b78:	68ab      	ldr	r3, [r5, #8]
   d9b7a:	60a3      	str	r3, [r4, #8]
	}
    }
   d9b7c:	4620      	mov	r0, r4
   d9b7e:	bd38      	pop	{r3, r4, r5, pc}

000d9b80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b80:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9b82:	b570      	push	{r4, r5, r6, lr}
   d9b84:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b86:	d006      	beq.n	d9b96 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d9b88:	2a03      	cmp	r2, #3
   d9b8a:	d011      	beq.n	d9bb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d9b8c:	2a01      	cmp	r2, #1
   d9b8e:	d117      	bne.n	d9bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9b90:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9b92:	6003      	str	r3, [r0, #0]
	      break;
   d9b94:	e014      	b.n	d9bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9b96:	2014      	movs	r0, #20
   d9b98:	680e      	ldr	r6, [r1, #0]
   d9b9a:	f7fa fa7c 	bl	d4096 <_Znwj>
   d9b9e:	4605      	mov	r5, r0
   d9ba0:	b120      	cbz	r0, d9bac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9ba2:	4631      	mov	r1, r6
   d9ba4:	f7ff ffdd 	bl	d9b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9ba8:	7c33      	ldrb	r3, [r6, #16]
   d9baa:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9bac:	6025      	str	r5, [r4, #0]
   d9bae:	e007      	b.n	d9bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9bb0:	6804      	ldr	r4, [r0, #0]
   d9bb2:	b12c      	cbz	r4, d9bc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9bb4:	4620      	mov	r0, r4
   d9bb6:	f7ff fdd7 	bl	d9768 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9bba:	4620      	mov	r0, r4
   d9bbc:	f7fa fa6f 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9bc0:	2000      	movs	r0, #0
   d9bc2:	bd70      	pop	{r4, r5, r6, pc}

000d9bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d9bc4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9bc6:	2300      	movs	r3, #0
   d9bc8:	b087      	sub	sp, #28
   d9bca:	460c      	mov	r4, r1
   d9bcc:	f3bf 8f5f 	dmb	sy
   d9bd0:	e850 6f00 	ldrex	r6, [r0]
   d9bd4:	e840 3200 	strex	r2, r3, [r0]
   d9bd8:	2a00      	cmp	r2, #0
   d9bda:	d1f9      	bne.n	d9bd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d9bdc:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9be0:	2e00      	cmp	r6, #0
   d9be2:	d03e      	beq.n	d9c62 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9be4:	4618      	mov	r0, r3
   d9be6:	f7ff fcd3 	bl	d9590 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9bea:	4607      	mov	r7, r0
   d9bec:	b120      	cbz	r0, d9bf8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9bee:	4621      	mov	r1, r4
   d9bf0:	4630      	mov	r0, r6
   d9bf2:	f7ff fe63 	bl	d98bc <_ZNKSt8functionIFvRKbEEclES1_>
   d9bf6:	e02e      	b.n	d9c56 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9bf8:	4631      	mov	r1, r6
   d9bfa:	a801      	add	r0, sp, #4
   d9bfc:	f7ff ffb1 	bl	d9b62 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9c00:	7823      	ldrb	r3, [r4, #0]
   d9c02:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9c06:	2010      	movs	r0, #16
   d9c08:	f7fa fa45 	bl	d4096 <_Znwj>
   d9c0c:	4605      	mov	r5, r0
   d9c0e:	b1d0      	cbz	r0, d9c46 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9c10:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9c12:	2014      	movs	r0, #20
   d9c14:	f7fa fa3f 	bl	d4096 <_Znwj>
   d9c18:	4604      	mov	r4, r0
   d9c1a:	b178      	cbz	r0, d9c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9c1c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9c1e:	4601      	mov	r1, r0
   d9c20:	a801      	add	r0, sp, #4
   d9c22:	f7ff fe2b 	bl	d987c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c26:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9c28:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c2a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9c2c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9c2e:	9203      	str	r2, [sp, #12]
   d9c30:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9c32:	60e3      	str	r3, [r4, #12]
   d9c34:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9c38:	9204      	str	r2, [sp, #16]
   d9c3a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9c3c:	4b0a      	ldr	r3, [pc, #40]	; (d9c68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d9c3e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9c40:	4b0a      	ldr	r3, [pc, #40]	; (d9c6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9c42:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9c44:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9c46:	a801      	add	r0, sp, #4
   d9c48:	f7ff fd8e 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9c4c:	2200      	movs	r2, #0
   d9c4e:	4629      	mov	r1, r5
   d9c50:	4807      	ldr	r0, [pc, #28]	; (d9c70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d9c52:	f7ff fca5 	bl	d95a0 <application_thread_invoke>
   d9c56:	4630      	mov	r0, r6
   d9c58:	f7ff fd86 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9c5c:	4630      	mov	r0, r6
   d9c5e:	f7fa fa1e 	bl	d409e <_ZdlPv>
        }
    }
   d9c62:	b007      	add	sp, #28
   d9c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c66:	bf00      	nop
   d9c68:	000d98cf 	.word	0x000d98cf
   d9c6c:	000d9b81 	.word	0x000d9b81
   d9c70:	000d9727 	.word	0x000d9727

000d9c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9c74:	b530      	push	{r4, r5, lr}
   d9c76:	b085      	sub	sp, #20
   d9c78:	4604      	mov	r4, r0
   d9c7a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9c7c:	4668      	mov	r0, sp
   d9c7e:	4611      	mov	r1, r2
   d9c80:	f7ff fddf 	bl	d9842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9c84:	b17c      	cbz	r4, d9ca6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9c86:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9c88:	4628      	mov	r0, r5
   d9c8a:	b10d      	cbz	r5, d9c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d9c8c:	f002 fb96 	bl	dc3bc <strdup>
   d9c90:	9002      	str	r0, [sp, #8]
   d9c92:	a902      	add	r1, sp, #8
   d9c94:	4668      	mov	r0, sp
   d9c96:	f8ad 400c 	strh.w	r4, [sp, #12]
   d9c9a:	f7ff fe2f 	bl	d98fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d9c9e:	9802      	ldr	r0, [sp, #8]
   d9ca0:	f7ff fd16 	bl	d96d0 <free>
   d9ca4:	e01d      	b.n	d9ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d9ca6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9ca8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d9cac:	f04f 0201 	mov.w	r2, #1
   d9cb0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d9cb4:	42a3      	cmp	r3, r4
   d9cb6:	d103      	bne.n	d9cc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d9cb8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d9cbc:	2900      	cmp	r1, #0
   d9cbe:	d1f7      	bne.n	d9cb0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d9cc0:	d002      	beq.n	d9cc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d9cc2:	f88d 3008 	strb.w	r3, [sp, #8]
   d9cc6:	e00c      	b.n	d9ce2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d9cc8:	f110 010c 	adds.w	r1, r0, #12
   d9ccc:	f04f 0301 	mov.w	r3, #1
   d9cd0:	bf18      	it	ne
   d9cd2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9cd4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d9cd8:	3004      	adds	r0, #4
   d9cda:	f800 3c03 	strb.w	r3, [r0, #-3]
   d9cde:	f7ff ff71 	bl	d9bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d9ce2:	a801      	add	r0, sp, #4
   d9ce4:	f7fb ff58 	bl	d5b98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9ce8:	b005      	add	sp, #20
   d9cea:	bd30      	pop	{r4, r5, pc}

000d9cec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d9cec:	4770      	bx	lr

000d9cee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d9cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9cf0:	4606      	mov	r6, r0
   d9cf2:	4615      	mov	r5, r2
   d9cf4:	460c      	mov	r4, r1
   d9cf6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9cf8:	42bc      	cmp	r4, r7
   d9cfa:	d006      	beq.n	d9d0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d9cfc:	6833      	ldr	r3, [r6, #0]
   d9cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d9d02:	689b      	ldr	r3, [r3, #8]
   d9d04:	4630      	mov	r0, r6
   d9d06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d9d08:	e7f6      	b.n	d9cf8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d9d0a:	4628      	mov	r0, r5
   d9d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9d0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d9d0e:	2200      	movs	r2, #0
   d9d10:	7c00      	ldrb	r0, [r0, #16]
   d9d12:	f7ff ba8d 	b.w	d9230 <HAL_I2C_Write_Data>

000d9d16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d9d16:	2100      	movs	r1, #0
   d9d18:	7c00      	ldrb	r0, [r0, #16]
   d9d1a:	f7ff ba91 	b.w	d9240 <HAL_I2C_Available_Data>

000d9d1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d9d1e:	2100      	movs	r1, #0
   d9d20:	7c00      	ldrb	r0, [r0, #16]
   d9d22:	f7ff ba95 	b.w	d9250 <HAL_I2C_Read_Data>

000d9d26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d9d26:	2100      	movs	r1, #0
   d9d28:	7c00      	ldrb	r0, [r0, #16]
   d9d2a:	f7ff ba99 	b.w	d9260 <HAL_I2C_Peek_Data>

000d9d2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d9d2e:	2100      	movs	r1, #0
   d9d30:	7c00      	ldrb	r0, [r0, #16]
   d9d32:	f7ff ba9d 	b.w	d9270 <HAL_I2C_Flush_Data>

000d9d36 <_ZN7TwoWireD0Ev>:
   d9d36:	b510      	push	{r4, lr}
   d9d38:	4604      	mov	r4, r0
   d9d3a:	f7fa f9b0 	bl	d409e <_ZdlPv>
   d9d3e:	4620      	mov	r0, r4
   d9d40:	bd10      	pop	{r4, pc}
	...

000d9d44 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d9d44:	b510      	push	{r4, lr}
   d9d46:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d4c:	4608      	mov	r0, r1
   d9d4e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d50:	2100      	movs	r1, #0
   d9d52:	4b04      	ldr	r3, [pc, #16]	; (d9d64 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d9d54:	7420      	strb	r0, [r4, #16]
   d9d56:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d9d58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d9d5a:	f7ff fa99 	bl	d9290 <HAL_I2C_Init>

}
   d9d5e:	4620      	mov	r0, r4
   d9d60:	bd10      	pop	{r4, pc}
   d9d62:	bf00      	nop
   d9d64:	000de580 	.word	0x000de580

000d9d68 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d9d68:	2300      	movs	r3, #0
   d9d6a:	461a      	mov	r2, r3
   d9d6c:	4619      	mov	r1, r3
   d9d6e:	7c00      	ldrb	r0, [r0, #16]
   d9d70:	f7ff ba3e 	b.w	d91f0 <HAL_I2C_Begin>

000d9d74 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d9d74:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d9d76:	2400      	movs	r4, #0
   d9d78:	7c00      	ldrb	r0, [r0, #16]
   d9d7a:	9400      	str	r4, [sp, #0]
   d9d7c:	f7ff fa40 	bl	d9200 <HAL_I2C_Request_Data>
  return result;
}
   d9d80:	b2c0      	uxtb	r0, r0
   d9d82:	b002      	add	sp, #8
   d9d84:	bd10      	pop	{r4, pc}

000d9d86 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d9d86:	2301      	movs	r3, #1
   d9d88:	b2d2      	uxtb	r2, r2
   d9d8a:	b2c9      	uxtb	r1, r1
   d9d8c:	f7ff bff2 	b.w	d9d74 <_ZN7TwoWire11requestFromEhhh>

000d9d90 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d9d90:	2200      	movs	r2, #0
   d9d92:	7c00      	ldrb	r0, [r0, #16]
   d9d94:	f7ff ba3c 	b.w	d9210 <HAL_I2C_Begin_Transmission>

000d9d98 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d9d98:	b2c9      	uxtb	r1, r1
   d9d9a:	f7ff bff9 	b.w	d9d90 <_ZN7TwoWire17beginTransmissionEh>

000d9d9e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d9d9e:	2200      	movs	r2, #0
   d9da0:	7c00      	ldrb	r0, [r0, #16]
   d9da2:	f7ff ba3d 	b.w	d9220 <HAL_I2C_End_Transmission>

000d9da6 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d9da6:	2101      	movs	r1, #1
   d9da8:	f7ff bff9 	b.w	d9d9e <_ZN7TwoWire15endTransmissionEh>

000d9dac <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d9dac:	2100      	movs	r1, #0
   d9dae:	7c00      	ldrb	r0, [r0, #16]
   d9db0:	f7ff ba66 	b.w	d9280 <HAL_I2C_Is_Enabled>

000d9db4 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d9db4:	4700      	bx	r0
	...

000d9db8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d9db8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9dba:	b085      	sub	sp, #20
   d9dbc:	461c      	mov	r4, r3
   d9dbe:	4605      	mov	r5, r0
   d9dc0:	460e      	mov	r6, r1
   d9dc2:	4617      	mov	r7, r2
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
   d9dc4:	f7ff f9f4 	bl	d91b0 <HAL_Interrupts_Detach>
    HAL_InterruptExtraConfiguration extra = {0};
   d9dc8:	2000      	movs	r0, #0
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
   d9dca:	4284      	cmp	r4, r0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9dcc:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d9dd0:	9003      	str	r0, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d9dd2:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
   d9dd6:	bfa5      	ittet	ge
   d9dd8:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d9ddc:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
  }
  return nullptr;
   d9de0:	4603      	movlt	r3, r0
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
   d9de2:	ab03      	addge	r3, sp, #12
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d9de4:	9300      	str	r3, [sp, #0]
   d9de6:	4628      	mov	r0, r5
   d9de8:	463b      	mov	r3, r7
   d9dea:	4632      	mov	r2, r6
   d9dec:	4904      	ldr	r1, [pc, #16]	; (d9e00 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d9dee:	bfa8      	it	ge
   d9df0:	f88d 400d 	strbge.w	r4, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
   d9df4:	f7ff f9d4 	bl	d91a0 <HAL_Interrupts_Attach>
    return true;
}
   d9df8:	2001      	movs	r0, #1
   d9dfa:	b005      	add	sp, #20
   d9dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9dfe:	bf00      	nop
   d9e00:	000d9db5 	.word	0x000d9db5

000d9e04 <_Z15detachInterruptt>:
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
   d9e04:	b570      	push	{r4, r5, r6, lr}
   d9e06:	4606      	mov	r6, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
#endif
    HAL_Interrupts_Detach(pin);
   d9e08:	f7ff f9d2 	bl	d91b0 <HAL_Interrupts_Detach>
    delete handlers[pin];
   d9e0c:	4b07      	ldr	r3, [pc, #28]	; (d9e2c <_Z15detachInterruptt+0x28>)
   d9e0e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
   d9e12:	461c      	mov	r4, r3
   d9e14:	b12d      	cbz	r5, d9e22 <_Z15detachInterruptt+0x1e>
   d9e16:	4628      	mov	r0, r5
   d9e18:	f7ff fca6 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
   d9e1c:	4628      	mov	r0, r5
   d9e1e:	f7fa f93e 	bl	d409e <_ZdlPv>
    handlers[pin] = NULL;
   d9e22:	2300      	movs	r3, #0
   d9e24:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   d9e28:	bd70      	pop	{r4, r5, r6, pc}
   d9e2a:	bf00      	nop
   d9e2c:	2003e384 	.word	0x2003e384

000d9e30 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9e30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d9e32:	7d03      	ldrb	r3, [r0, #20]
   d9e34:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9e36:	b08d      	sub	sp, #52	; 0x34
   d9e38:	460e      	mov	r6, r1
   d9e3a:	f100 0704 	add.w	r7, r0, #4
   d9e3e:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d9e42:	d002      	beq.n	d9e4a <_ZNK9IPAddress7printToER5Print+0x1a>
   d9e44:	f100 0508 	add.w	r5, r0, #8
   d9e48:	e018      	b.n	d9e7c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9e4a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9e4c:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9e4e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9e52:	232f      	movs	r3, #47	; 0x2f
   d9e54:	462a      	mov	r2, r5
   d9e56:	200a      	movs	r0, #10
   d9e58:	f7ff fa4a 	bl	d92f0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9e5c:	4628      	mov	r0, r5
   d9e5e:	f002 fac8 	bl	dc3f2 <strlen>
   d9e62:	6833      	ldr	r3, [r6, #0]
   d9e64:	4602      	mov	r2, r0
   d9e66:	68db      	ldr	r3, [r3, #12]
   d9e68:	4629      	mov	r1, r5
   d9e6a:	4630      	mov	r0, r6
   d9e6c:	4798      	blx	r3
   d9e6e:	e00f      	b.n	d9e90 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9e70:	b124      	cbz	r4, d9e7c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9e72:	212e      	movs	r1, #46	; 0x2e
   d9e74:	4630      	mov	r0, r6
   d9e76:	f000 fa57 	bl	da328 <_ZN5Print5printEc>
   d9e7a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d9e7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9e80:	220a      	movs	r2, #10
   d9e82:	4630      	mov	r0, r6
   d9e84:	f000 fa96 	bl	da3b4 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9e88:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9e8a:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9e8c:	d1f0      	bne.n	d9e70 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9e8e:	4620      	mov	r0, r4
    }
    return n;
}
   d9e90:	b00d      	add	sp, #52	; 0x34
   d9e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9e94 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"
#include "ifapi.h"
#include <arpa/inet.h>

IPAddress::IPAddress()
   d9e94:	b510      	push	{r4, lr}
   d9e96:	4b05      	ldr	r3, [pc, #20]	; (d9eac <_ZN9IPAddressC1Ev+0x18>)
   d9e98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9e9a:	2211      	movs	r2, #17
   d9e9c:	f840 3b04 	str.w	r3, [r0], #4
   d9ea0:	2100      	movs	r1, #0
   d9ea2:	f002 fa19 	bl	dc2d8 <memset>
{
    clear();
}
   d9ea6:	4620      	mov	r0, r4
   d9ea8:	bd10      	pop	{r4, pc}
   d9eaa:	bf00      	nop
   d9eac:	000de5a8 	.word	0x000de5a8

000d9eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9eb0:	4603      	mov	r3, r0
   d9eb2:	4a07      	ldr	r2, [pc, #28]	; (d9ed0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9eb4:	b510      	push	{r4, lr}
   d9eb6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9eba:	f101 0210 	add.w	r2, r1, #16
   d9ebe:	f851 4b04 	ldr.w	r4, [r1], #4
   d9ec2:	f843 4b04 	str.w	r4, [r3], #4
   d9ec6:	4291      	cmp	r1, r2
   d9ec8:	d1f9      	bne.n	d9ebe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9eca:	780a      	ldrb	r2, [r1, #0]
   d9ecc:	701a      	strb	r2, [r3, #0]
}
   d9ece:	bd10      	pop	{r4, pc}
   d9ed0:	000de5a8 	.word	0x000de5a8

000d9ed4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9ed4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9ed6:	2b04      	cmp	r3, #4
   d9ed8:	d101      	bne.n	d9ede <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9eda:	6840      	ldr	r0, [r0, #4]
   d9edc:	e008      	b.n	d9ef0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9ede:	2b06      	cmp	r3, #6
   d9ee0:	d10a      	bne.n	d9ef8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d9ee2:	6843      	ldr	r3, [r0, #4]
   d9ee4:	b153      	cbz	r3, d9efc <_ZNK9IPAddresscvbEv+0x28>
   d9ee6:	6883      	ldr	r3, [r0, #8]
   d9ee8:	b143      	cbz	r3, d9efc <_ZNK9IPAddresscvbEv+0x28>
   d9eea:	68c3      	ldr	r3, [r0, #12]
   d9eec:	b133      	cbz	r3, d9efc <_ZNK9IPAddresscvbEv+0x28>
   d9eee:	6900      	ldr	r0, [r0, #16]
   d9ef0:	3000      	adds	r0, #0
   d9ef2:	bf18      	it	ne
   d9ef4:	2001      	movne	r0, #1
   d9ef6:	4770      	bx	lr
   d9ef8:	2000      	movs	r0, #0
   d9efa:	4770      	bx	lr
   d9efc:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9efe:	4770      	bx	lr

000d9f00 <_ZN9IPAddressaSEm>:
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9f00:	2204      	movs	r2, #4
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
   d9f02:	6041      	str	r1, [r0, #4]
   d9f04:	7502      	strb	r2, [r0, #20]
    setVersion(4);
    return *this;
}
   d9f06:	4770      	bx	lr

000d9f08 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9f08:	4b01      	ldr	r3, [pc, #4]	; (d9f10 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9f0a:	4a02      	ldr	r2, [pc, #8]	; (d9f14 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9f0c:	601a      	str	r2, [r3, #0]
   d9f0e:	4770      	bx	lr
   d9f10:	2003e400 	.word	0x2003e400
   d9f14:	000de667 	.word	0x000de667

000d9f18 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9f18:	2200      	movs	r2, #0
   d9f1a:	4611      	mov	r1, r2
   d9f1c:	4610      	mov	r0, r2
   d9f1e:	f7ff bbb7 	b.w	d9690 <network_ready>

000d9f22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.6.constprop.9>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9f22:	b110      	cbz	r0, d9f2a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.6.constprop.9+0x8>
   d9f24:	6803      	ldr	r3, [r0, #0]
   d9f26:	685b      	ldr	r3, [r3, #4]
   d9f28:	4718      	bx	r3
   d9f2a:	4770      	bx	lr

000d9f2c <_ZN5spark9MeshClassD1Ev>:
	 * Pull data from the socket and handle as required.
	 */
	int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d9f2c:	b510      	push	{r4, lr}
   d9f2e:	4b04      	ldr	r3, [pc, #16]	; (d9f40 <_ZN5spark9MeshClassD1Ev+0x14>)
   d9f30:	6003      	str	r3, [r0, #0]
   d9f32:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9f34:	6840      	ldr	r0, [r0, #4]
   d9f36:	b108      	cbz	r0, d9f3c <_ZN5spark9MeshClassD1Ev+0x10>
	  get_deleter()(__ptr);
   d9f38:	f7ff fff3 	bl	d9f22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.6.constprop.9>
   d9f3c:	4620      	mov	r0, r4
   d9f3e:	bd10      	pop	{r4, pc}
   d9f40:	000de6a4 	.word	0x000de6a4

000d9f44 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
	return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
		void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d9f44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9f48:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d9f4a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d9f4e:	4606      	mov	r6, r0
   d9f50:	4688      	mov	r8, r1
   d9f52:	4691      	mov	r9, r2
   d9f54:	469a      	mov	sl, r3
   d9f56:	4604      	mov	r4, r0
	const int NUM_HANDLERS = sizeof(event_handlers)
			/ sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
   d9f58:	2500      	movs	r5, #0
	{
		if (event_handlers[i].handler == handler
   d9f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d9f5c:	454b      	cmp	r3, r9
   d9f5e:	d129      	bne.n	d9fb4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
				&& event_handlers[i].handler_data == handler_data
   d9f60:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d9f62:	4553      	cmp	r3, sl
   d9f64:	d126      	bne.n	d9fb4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
				&& event_handlers[i].scope == scope)
   d9f66:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d9f6a:	455b      	cmp	r3, fp
   d9f6c:	d122      	bne.n	d9fb4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
		{
			const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
			const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d9f6e:	2140      	movs	r1, #64	; 0x40
   d9f70:	4640      	mov	r0, r8
   d9f72:	f002 fa6e 	bl	dc452 <strnlen>
			if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d9f76:	4641      	mov	r1, r8
   d9f78:	4602      	mov	r2, r0
   d9f7a:	4620      	mov	r0, r4
   d9f7c:	f002 fa41 	bl	dc402 <strncmp>
   d9f80:	b9c0      	cbnz	r0, d9fb4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
			{
				const size_t MAX_ID_LEN =
						sizeof(event_handlers[i].device_id) - 1;
				const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d9f82:	b16f      	cbz	r7, d9fa0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d9f84:	210c      	movs	r1, #12
   d9f86:	4638      	mov	r0, r7
   d9f88:	f002 fa63 	bl	dc452 <strnlen>
				if (id_len)
   d9f8c:	4602      	mov	r2, r0
   d9f8e:	b138      	cbz	r0, d9fa0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
					return !strncmp(event_handlers[i].device_id, id, id_len);
   d9f90:	2358      	movs	r3, #88	; 0x58
   d9f92:	fb03 6005 	mla	r0, r3, r5, r6
   d9f96:	4639      	mov	r1, r7
   d9f98:	3049      	adds	r0, #73	; 0x49
   d9f9a:	f002 fa32 	bl	dc402 <strncmp>
   d9f9e:	e004      	b.n	d9faa <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
				else
					return !event_handlers[i].device_id[0];
   d9fa0:	2058      	movs	r0, #88	; 0x58
   d9fa2:	fb00 6505 	mla	r5, r0, r5, r6
   d9fa6:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d9faa:	fab0 f080 	clz	r0, r0
   d9fae:	0940      	lsrs	r0, r0, #5
   d9fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
		void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
	const int NUM_HANDLERS = sizeof(event_handlers)
			/ sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
   d9fb4:	3501      	adds	r5, #1
   d9fb6:	2d05      	cmp	r5, #5
   d9fb8:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d9fbc:	d1cd      	bne.n	d9f5a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
				else
					return !event_handlers[i].device_id[0];
			}
		}
	}
	return false;
   d9fbe:	2000      	movs	r0, #0
}
   d9fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9fc4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
		void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d9fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9fc8:	b085      	sub	sp, #20
   d9fca:	4607      	mov	r7, r0
   d9fcc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d9fd0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d9fd2:	9601      	str	r6, [sp, #4]
   d9fd4:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
		void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d9fd8:	4689      	mov	r9, r1
   d9fda:	9202      	str	r2, [sp, #8]
   d9fdc:	9303      	str	r3, [sp, #12]
	if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d9fde:	f7ff ffb1 	bl	d9f44 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d9fe2:	2800      	cmp	r0, #0
   d9fe4:	d13c      	bne.n	da060 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d9fe6:	4604      	mov	r4, r0
		return SYSTEM_ERROR_NONE;

	const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
	{
		if (NULL == event_handlers[i].handler)
   d9fe8:	2358      	movs	r3, #88	; 0x58
   d9fea:	fb03 7504 	mla	r5, r3, r4, r7
   d9fee:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d9ff2:	f1b8 0f00 	cmp.w	r8, #0
   d9ff6:	d12e      	bne.n	da056 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
		{
			const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
			const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d9ff8:	2140      	movs	r1, #64	; 0x40
   d9ffa:	4648      	mov	r0, r9
   d9ffc:	f002 fa29 	bl	dc452 <strnlen>
			memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   da000:	4649      	mov	r1, r9
	for (int i = 0; i < NUM_HANDLERS; i++)
	{
		if (NULL == event_handlers[i].handler)
		{
			const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
			const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   da002:	4683      	mov	fp, r0
			memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   da004:	4602      	mov	r2, r0
   da006:	4628      	mov	r0, r5
   da008:	f002 f95b 	bl	dc2c2 <memcpy>
			memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   da00c:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   da010:	4641      	mov	r1, r8
   da012:	eb05 000b 	add.w	r0, r5, fp
   da016:	f002 f95f 	bl	dc2d8 <memset>
			event_handlers[i].handler = handler;
   da01a:	9b02      	ldr	r3, [sp, #8]
   da01c:	642b      	str	r3, [r5, #64]	; 0x40
			event_handlers[i].handler_data = handler_data;
   da01e:	9b03      	ldr	r3, [sp, #12]
   da020:	646b      	str	r3, [r5, #68]	; 0x44
			event_handlers[i].device_id[0] = 0;
   da022:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
			const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
			const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   da026:	b12e      	cbz	r6, da034 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   da028:	210c      	movs	r1, #12
   da02a:	4630      	mov	r0, r6
   da02c:	f002 fa11 	bl	dc452 <strnlen>
   da030:	4605      	mov	r5, r0
   da032:	e000      	b.n	da036 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   da034:	4635      	mov	r5, r6
			memcpy(event_handlers[i].device_id, id, id_len);
   da036:	2058      	movs	r0, #88	; 0x58
   da038:	4344      	muls	r4, r0
   da03a:	1938      	adds	r0, r7, r4
			event_handlers[i].device_id[id_len] = 0;
   da03c:	443c      	add	r4, r7
			event_handlers[i].handler = handler;
			event_handlers[i].handler_data = handler_data;
			event_handlers[i].device_id[0] = 0;
			const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
			const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
			memcpy(event_handlers[i].device_id, id, id_len);
   da03e:	462a      	mov	r2, r5
   da040:	4631      	mov	r1, r6
   da042:	3049      	adds	r0, #73	; 0x49
			event_handlers[i].device_id[id_len] = 0;
   da044:	4425      	add	r5, r4
			event_handlers[i].handler = handler;
			event_handlers[i].handler_data = handler_data;
			event_handlers[i].device_id[0] = 0;
			const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
			const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
			memcpy(event_handlers[i].device_id, id, id_len);
   da046:	f002 f93c 	bl	dc2c2 <memcpy>
			event_handlers[i].device_id[id_len] = 0;
   da04a:	2000      	movs	r0, #0
   da04c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
			event_handlers[i].scope = scope;
   da050:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   da054:	e005      	b.n	da062 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
	if (event_handler_exists(event_name, handler, handler_data, scope, id))
		return SYSTEM_ERROR_NONE;

	const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
   da056:	3401      	adds	r4, #1
   da058:	2c05      	cmp	r4, #5
   da05a:	d1c6      	bne.n	d9fea <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
			event_handlers[i].device_id[id_len] = 0;
			event_handlers[i].scope = scope;
			return SYSTEM_ERROR_NONE;
		}
	}
	return SYSTEM_ERROR_NO_MEMORY;
   da05c:	4802      	ldr	r0, [pc, #8]	; (da068 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   da05e:	e000      	b.n	da062 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
		void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
	if (event_handler_exists(event_name, handler, handler_data, scope, id))
		return SYSTEM_ERROR_NONE;
   da060:	2000      	movs	r0, #0
			event_handlers[i].scope = scope;
			return SYSTEM_ERROR_NONE;
		}
	}
	return SYSTEM_ERROR_NO_MEMORY;
}
   da062:	b005      	add	sp, #20
   da064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da068:	fffffefc 	.word	0xfffffefc

000da06c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   da06c:	b507      	push	{r0, r1, r2, lr}
	return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   da06e:	2300      	movs	r3, #0
   da070:	9301      	str	r3, [sp, #4]
   da072:	9300      	str	r3, [sp, #0]
   da074:	f7ff ffa6 	bl	d9fc4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   da078:	b003      	add	sp, #12
   da07a:	f85d fb04 	ldr.w	pc, [sp], #4

000da07e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   da07e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   da082:	4604      	mov	r4, r0
	const size_t event_name_length = strlen(event_name);
   da084:	4608      	mov	r0, r1
{
	return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   da086:	460d      	mov	r5, r1
   da088:	4690      	mov	r8, r2
	const size_t event_name_length = strlen(event_name);
   da08a:	f002 f9b2 	bl	dc3f2 <strlen>
   da08e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   da092:	4607      	mov	r7, r0
	const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
	{
		if (NULL == event_handlers[i].handler)
   da094:	6c23      	ldr	r3, [r4, #64]	; 0x40
   da096:	b1ab      	cbz	r3, da0c4 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
		{
			break;
		}
		const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
		const size_t filter_length = strnlen(event_handlers[i].filter,
				MAX_FILTER_LENGTH);
   da098:	2140      	movs	r1, #64	; 0x40
   da09a:	4620      	mov	r0, r4
   da09c:	f002 f9d9 	bl	dc452 <strnlen>

		if (event_name_length < filter_length)
   da0a0:	4287      	cmp	r7, r0
		{
			break;
		}
		const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
		const size_t filter_length = strnlen(event_handlers[i].filter,
				MAX_FILTER_LENGTH);
   da0a2:	4602      	mov	r2, r0

		if (event_name_length < filter_length)
   da0a4:	d30b      	bcc.n	da0be <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
			// does not match this filter, try the next event handler
			continue;
		}

		const int cmp = memcmp(event_handlers[i].filter, event_name,
				filter_length);
   da0a6:	4629      	mov	r1, r5
   da0a8:	4620      	mov	r0, r4
   da0aa:	f002 f8fb 	bl	dc2a4 <memcmp>
		if (0 == cmp)
   da0ae:	b930      	cbnz	r0, da0be <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
		{
			system_invoke_event_handler(sizeof(FilteringEventHandler),
											&event_handlers[i], (const char*) event_name,
											(const char*) data, nullptr);
   da0b0:	9000      	str	r0, [sp, #0]
   da0b2:	4643      	mov	r3, r8
   da0b4:	462a      	mov	r2, r5
   da0b6:	4621      	mov	r1, r4
   da0b8:	2058      	movs	r0, #88	; 0x58
   da0ba:	f7ff fa8d 	bl	d95d8 <system_invoke_event_handler>
   da0be:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
	const size_t event_name_length = strlen(event_name);
	const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
	for (int i = 0; i < NUM_HANDLERS; i++)
   da0c0:	42b4      	cmp	r4, r6
   da0c2:	d1e7      	bne.n	da094 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
											&event_handlers[i], (const char*) event_name,
											(const char*) data, nullptr);
		}
		// else continue the for loop to try the next handler
	}
}
   da0c4:	b002      	add	sp, #8
   da0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000da0cc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   da0cc:	b530      	push	{r4, r5, lr}
   da0ce:	b08d      	sub	sp, #52	; 0x34
   da0d0:	4604      	mov	r4, r0
	HAL_IPAddress addr = {};
   da0d2:	2211      	movs	r2, #17
   da0d4:	2100      	movs	r1, #0
   da0d6:	a801      	add	r0, sp, #4
   da0d8:	f002 f8fe 	bl	dc2d8 <memset>
	addr.v = 6;
   da0dc:	2306      	movs	r3, #6
	inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   da0de:	aa01      	add	r2, sp, #4
   da0e0:	4909      	ldr	r1, [pc, #36]	; (da108 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
	}
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
	HAL_IPAddress addr = {};
	addr.v = 6;
   da0e2:	f88d 3014 	strb.w	r3, [sp, #20]
	inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   da0e6:	200a      	movs	r0, #10
   da0e8:	f7ff f90a 	bl	d9300 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da0ec:	ad07      	add	r5, sp, #28
	mcastAddr = addr;
   da0ee:	a901      	add	r1, sp, #4
   da0f0:	a806      	add	r0, sp, #24
   da0f2:	f7ff fedd 	bl	d9eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da0f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da0f8:	3404      	adds	r4, #4
   da0fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da0fc:	682b      	ldr	r3, [r5, #0]
   da0fe:	7023      	strb	r3, [r4, #0]
	return 0;
}
   da100:	2000      	movs	r0, #0
   da102:	b00d      	add	sp, #52	; 0x34
   da104:	bd30      	pop	{r4, r5, pc}
   da106:	bf00      	nop
   da108:	000de6a8 	.word	0x000de6a8

000da10c <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   da10c:	b530      	push	{r4, r5, lr}
	if (udp) {
   da10e:	6803      	ldr	r3, [r0, #0]
	inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
	mcastAddr = addr;
	return 0;
}

int MeshPublish::initialize_udp() {
   da110:	b089      	sub	sp, #36	; 0x24
   da112:	4604      	mov	r4, r0
	if (udp) {
   da114:	2b00      	cmp	r3, #0
   da116:	d131      	bne.n	da17c <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
		return SYSTEM_ERROR_NONE;
	}
	udp.reset(new UDP());
   da118:	204c      	movs	r0, #76	; 0x4c
   da11a:	f7f9 ffbc 	bl	d4096 <_Znwj>
   da11e:	4605      	mov	r5, r0
   da120:	b108      	cbz	r0, da126 <_ZN5spark11MeshPublish14initialize_udpEv+0x1a>
   da122:	f000 fedd 	bl	daee0 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da126:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da128:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da12a:	b108      	cbz	r0, da130 <_ZN5spark11MeshPublish14initialize_udpEv+0x24>
	  get_deleter()(__p);
   da12c:	f7ff fef9 	bl	d9f22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.6.constprop.9>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da130:	6820      	ldr	r0, [r4, #0]
	if (!udp) {
   da132:	b308      	cbz	r0, da178 <_ZN5spark11MeshPublish14initialize_udpEv+0x6c>
		return SYSTEM_ERROR_NO_MEMORY;
	}
	udp->setBuffer(MAX_PACKET_LEN);
   da134:	2200      	movs	r2, #0
   da136:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   da13a:	f000 ff00 	bl	daf3e <_ZN3UDP9setBufferEjPh>
	// Get OpenThread interface index (	 interface is named "th1" on all Mesh devices)
	uint8_t idx = 0;
   da13e:	a908      	add	r1, sp, #32
   da140:	2500      	movs	r5, #0
   da142:	f801 5d19 	strb.w	r5, [r1, #-25]!
	if_name_to_index("th1", &idx);
   da146:	480f      	ldr	r0, [pc, #60]	; (da184 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>)
   da148:	f7ff f8aa 	bl	d92a0 <if_name_to_index>
   da14c:	6820      	ldr	r0, [r4, #0]
	 // Create UDP socket and bind to OpenThread interface
	CHECK(udp->begin(PORT, idx));
   da14e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   da152:	6803      	ldr	r3, [r0, #0]
   da154:	f249 0169 	movw	r1, #36969	; 0x9069
   da158:	6a1b      	ldr	r3, [r3, #32]
   da15a:	4798      	blx	r3
	// subscribe to multicast

	IPAddress mcastAddr;
   da15c:	a802      	add	r0, sp, #8
   da15e:	f7ff fe99 	bl	d9e94 <_ZN9IPAddressC1Ev>
	CHECK(fetchMulticastAddress(mcastAddr));
   da162:	a802      	add	r0, sp, #8
   da164:	f7ff ffb2 	bl	da0cc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   da168:	2800      	cmp	r0, #0
   da16a:	db08      	blt.n	da17e <_ZN5spark11MeshPublish14initialize_udpEv+0x72>
	udp->joinMulticast(mcastAddr);
   da16c:	a902      	add	r1, sp, #8
   da16e:	6820      	ldr	r0, [r4, #0]
   da170:	f000 ff50 	bl	db014 <_ZN3UDP13joinMulticastERK9IPAddress>
	return SYSTEM_ERROR_NONE;
   da174:	4628      	mov	r0, r5
   da176:	e002      	b.n	da17e <_ZN5spark11MeshPublish14initialize_udpEv+0x72>
	if (udp) {
		return SYSTEM_ERROR_NONE;
	}
	udp.reset(new UDP());
	if (!udp) {
		return SYSTEM_ERROR_NO_MEMORY;
   da178:	4803      	ldr	r0, [pc, #12]	; (da188 <_ZN5spark11MeshPublish14initialize_udpEv+0x7c>)
   da17a:	e000      	b.n	da17e <_ZN5spark11MeshPublish14initialize_udpEv+0x72>
	return 0;
}

int MeshPublish::initialize_udp() {
	if (udp) {
		return SYSTEM_ERROR_NONE;
   da17c:	2000      	movs	r0, #0

	IPAddress mcastAddr;
	CHECK(fetchMulticastAddress(mcastAddr));
	udp->joinMulticast(mcastAddr);
	return SYSTEM_ERROR_NONE;
}
   da17e:	b009      	add	sp, #36	; 0x24
   da180:	bd30      	pop	{r4, r5, pc}
   da182:	bf00      	nop
   da184:	000de6b5 	.word	0x000de6b5
   da188:	fffffefc 	.word	0xfffffefc

000da18c <_ZN5spark11MeshPublish7publishEPKcS2_>:
		udp.reset();
	}
	return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   da18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da190:	b08d      	sub	sp, #52	; 0x34
   da192:	4606      	mov	r6, r0
   da194:	4688      	mov	r8, r1
   da196:	4617      	mov	r7, r2
	CHECK(initialize_udp());
   da198:	f7ff ffb8 	bl	da10c <_ZN5spark11MeshPublish14initialize_udpEv>
   da19c:	2800      	cmp	r0, #0
   da19e:	db36      	blt.n	da20e <_ZN5spark11MeshPublish7publishEPKcS2_+0x82>
	IPAddress mcastAddr;
   da1a0:	4668      	mov	r0, sp
   da1a2:	f7ff fe77 	bl	d9e94 <_ZN9IPAddressC1Ev>
	CHECK(fetchMulticastAddress(mcastAddr));
   da1a6:	4668      	mov	r0, sp
   da1a8:	f7ff ff90 	bl	da0cc <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   da1ac:	2800      	cmp	r0, #0
   da1ae:	db2e      	blt.n	da20e <_ZN5spark11MeshPublish7publishEPKcS2_+0x82>
   da1b0:	f8d6 e000 	ldr.w	lr, [r6]

	CHECK(udp->beginPacket(mcastAddr, PORT));
   da1b4:	f8de 3000 	ldr.w	r3, [lr]
   da1b8:	ad01      	add	r5, sp, #4
   da1ba:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   da1be:	4b15      	ldr	r3, [pc, #84]	; (da214 <_ZN5spark11MeshPublish7publishEPKcS2_+0x88>)
   da1c0:	9306      	str	r3, [sp, #24]
   da1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da1c4:	ac07      	add	r4, sp, #28
   da1c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da1c8:	682b      	ldr	r3, [r5, #0]
   da1ca:	7023      	strb	r3, [r4, #0]
   da1cc:	f249 0269 	movw	r2, #36969	; 0x9069
   da1d0:	a906      	add	r1, sp, #24
   da1d2:	4670      	mov	r0, lr
   da1d4:	47c8      	blx	r9
   da1d6:	2800      	cmp	r0, #0
   da1d8:	db19      	blt.n	da20e <_ZN5spark11MeshPublish7publishEPKcS2_+0x82>
   da1da:	6834      	ldr	r4, [r6, #0]
	udp->write((const uint8_t*)topic, strlen(topic)+1);
   da1dc:	4640      	mov	r0, r8
   da1de:	f002 f908 	bl	dc3f2 <strlen>
   da1e2:	6823      	ldr	r3, [r4, #0]
   da1e4:	1c42      	adds	r2, r0, #1
   da1e6:	68db      	ldr	r3, [r3, #12]
   da1e8:	4641      	mov	r1, r8
   da1ea:	4620      	mov	r0, r4
   da1ec:	4798      	blx	r3
   da1ee:	6834      	ldr	r4, [r6, #0]
	udp->write((const uint8_t*)data, strlen(data)+1);
   da1f0:	4638      	mov	r0, r7
   da1f2:	f002 f8fe 	bl	dc3f2 <strlen>
   da1f6:	6823      	ldr	r3, [r4, #0]
   da1f8:	1c42      	adds	r2, r0, #1
   da1fa:	68db      	ldr	r3, [r3, #12]
   da1fc:	4639      	mov	r1, r7
   da1fe:	4620      	mov	r0, r4
   da200:	4798      	blx	r3
   da202:	6830      	ldr	r0, [r6, #0]
	CHECK(udp->endPacket());
   da204:	6803      	ldr	r3, [r0, #0]
   da206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   da208:	4798      	blx	r3
   da20a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	return SYSTEM_ERROR_NONE;
}
   da20e:	b00d      	add	sp, #52	; 0x34
   da210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da214:	000de5a8 	.word	0x000de5a8

000da218 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   da218:	b570      	push	{r4, r5, r6, lr}
   da21a:	4604      	mov	r4, r0
   da21c:	460d      	mov	r5, r1
   da21e:	4616      	mov	r6, r2
	CHECK(initialize_udp());
   da220:	f7ff ff74 	bl	da10c <_ZN5spark11MeshPublish14initialize_udpEv>
   da224:	2800      	cmp	r0, #0
   da226:	db06      	blt.n	da236 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x1e>
	CHECK(subscriptions.add(prefix, handler));
   da228:	4632      	mov	r2, r6
   da22a:	4629      	mov	r1, r5
   da22c:	1d20      	adds	r0, r4, #4
   da22e:	f7ff ff1d 	bl	da06c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   da232:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	return SYSTEM_ERROR_NONE;
}
   da236:	bd70      	pop	{r4, r5, r6, pc}

000da238 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   da238:	b570      	push	{r4, r5, r6, lr}
   da23a:	4604      	mov	r4, r0
   da23c:	6800      	ldr	r0, [r0, #0]
   da23e:	b08a      	sub	sp, #40	; 0x28
	int result = 0;
	if (udp) {
   da240:	b1f0      	cbz	r0, da280 <_ZN5spark11MeshPublish4pollEv+0x48>
		int len = udp->parsePacket();
   da242:	6803      	ldr	r3, [r0, #0]
   da244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   da246:	4798      	blx	r3
		if (len>0) {
   da248:	2800      	cmp	r0, #0
   da24a:	dd19      	ble.n	da280 <_ZN5spark11MeshPublish4pollEv+0x48>
			LOG(TRACE, "parse packet %d", len);
   da24c:	2320      	movs	r3, #32
   da24e:	2500      	movs	r5, #0
   da250:	9302      	str	r3, [sp, #8]
   da252:	4b0c      	ldr	r3, [pc, #48]	; (da284 <_ZN5spark11MeshPublish4pollEv+0x4c>)
   da254:	490c      	ldr	r1, [pc, #48]	; (da288 <_ZN5spark11MeshPublish4pollEv+0x50>)
   da256:	9001      	str	r0, [sp, #4]
   da258:	aa02      	add	r2, sp, #8
   da25a:	9300      	str	r3, [sp, #0]
   da25c:	2001      	movs	r0, #1
   da25e:	462b      	mov	r3, r5
   da260:	9503      	str	r5, [sp, #12]
   da262:	f7ff f975 	bl	d9550 <log_message>
   da266:	f854 3b04 	ldr.w	r3, [r4], #4
   da26a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
			const char* buffer = (const char*)udp->buffer();
			int namelen = strlen(buffer);
   da26c:	4630      	mov	r0, r6
   da26e:	f002 f8c0 	bl	dc3f2 <strlen>
			subscriptions.send(buffer, buffer+namelen+1);
   da272:	1c42      	adds	r2, r0, #1
   da274:	4432      	add	r2, r6
   da276:	4620      	mov	r0, r4
   da278:	4631      	mov	r1, r6
   da27a:	f7ff ff00 	bl	da07e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
	int result = 0;
   da27e:	4628      	mov	r0, r5
		} else {
			result = len;
		}
	}
	return result;
}
   da280:	b00a      	add	sp, #40	; 0x28
   da282:	bd70      	pop	{r4, r5, r6, pc}
   da284:	000de6c0 	.word	0x000de6c0
   da288:	000de6b9 	.word	0x000de6b9

000da28c <_ZN5spark9mesh_loopEv>:
#if Wiring_Mesh

namespace spark {

int mesh_loop() {
	return spark::Mesh.poll();
   da28c:	4801      	ldr	r0, [pc, #4]	; (da294 <_ZN5spark9mesh_loopEv+0x8>)
   da28e:	f7ff bfd3 	b.w	da238 <_ZN5spark11MeshPublish4pollEv>
   da292:	bf00      	nop
   da294:	2003e408 	.word	0x2003e408

000da298 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:
}



MeshClass Mesh;
} // namespace spark
   da298:	b510      	push	{r4, lr}
// Defined as the primary network
extern NetworkClass& Network;


//Retained for compatibility and to flag compiler warnings as build errors
class NetworkClass
   da29a:	4c08      	ldr	r4, [pc, #32]	; (da2bc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x24>)
   da29c:	4b08      	ldr	r3, [pc, #32]	; (da2c0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x28>)
	int uninitialize_udp();

public:

	MeshPublish() : udp(nullptr) {
		system_task_loop(mesh_loop, nullptr);
   da29e:	4809      	ldr	r0, [pc, #36]	; (da2c4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x2c>)
   da2a0:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da2a2:	2100      	movs	r1, #0
   da2a4:	6061      	str	r1, [r4, #4]
   da2a6:	f7ff f9a1 	bl	d95ec <system_task_loop>
	 * Pull data from the socket and handle as required.
	 */
	int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   da2aa:	4b07      	ldr	r3, [pc, #28]	; (da2c8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x30>)
   da2ac:	6023      	str	r3, [r4, #0]
	return result;
}



MeshClass Mesh;
   da2ae:	4620      	mov	r0, r4
   da2b0:	4a06      	ldr	r2, [pc, #24]	; (da2cc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x34>)
   da2b2:	4907      	ldr	r1, [pc, #28]	; (da2d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
} // namespace spark
   da2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return result;
}



MeshClass Mesh;
   da2b8:	f001 b998 	b.w	db5ec <__aeabi_atexit>
   da2bc:	2003e404 	.word	0x2003e404
   da2c0:	000de698 	.word	0x000de698
   da2c4:	000da28d 	.word	0x000da28d
   da2c8:	000de6a4 	.word	0x000de6a4
   da2cc:	2003e108 	.word	0x2003e108
   da2d0:	000d9f2d 	.word	0x000d9f2d

000da2d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   da2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da2d6:	4606      	mov	r6, r0
   da2d8:	460d      	mov	r5, r1
   da2da:	188f      	adds	r7, r1, r2
  size_t n = 0;
   da2dc:	2400      	movs	r4, #0
  while (size--) {
   da2de:	42bd      	cmp	r5, r7
   da2e0:	d00c      	beq.n	da2fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   da2e2:	6833      	ldr	r3, [r6, #0]
   da2e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   da2e8:	689b      	ldr	r3, [r3, #8]
   da2ea:	4630      	mov	r0, r6
   da2ec:	4798      	blx	r3
     if (chunk>=0)
   da2ee:	2800      	cmp	r0, #0
   da2f0:	db01      	blt.n	da2f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   da2f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   da2f4:	e7f3      	b.n	da2de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   da2f6:	2c00      	cmp	r4, #0
   da2f8:	bf08      	it	eq
   da2fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   da2fc:	4620      	mov	r0, r4
   da2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da300 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   da300:	b570      	push	{r4, r5, r6, lr}
   da302:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   da304:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   da306:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   da308:	b149      	cbz	r1, da31e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   da30a:	f002 f872 	bl	dc3f2 <strlen>
   da30e:	682b      	ldr	r3, [r5, #0]
   da310:	4602      	mov	r2, r0
   da312:	4621      	mov	r1, r4
   da314:	4628      	mov	r0, r5
   da316:	68db      	ldr	r3, [r3, #12]
    }
   da318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   da31c:	4718      	bx	r3
    }
   da31e:	bd70      	pop	{r4, r5, r6, pc}

000da320 <_ZN5Print5printEPKc>:
   da320:	b508      	push	{r3, lr}
   da322:	f7ff ffed 	bl	da300 <_ZN5Print5writeEPKc>
   da326:	bd08      	pop	{r3, pc}

000da328 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   da328:	6803      	ldr	r3, [r0, #0]
   da32a:	689b      	ldr	r3, [r3, #8]
   da32c:	4718      	bx	r3

000da32e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da32e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   da330:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   da332:	4605      	mov	r5, r0
  size_t n = print('\r');
   da334:	f7ff fff8 	bl	da328 <_ZN5Print5printEc>
  n += print('\n');
   da338:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   da33a:	4604      	mov	r4, r0
  n += print('\n');
   da33c:	4628      	mov	r0, r5
   da33e:	f7ff fff3 	bl	da328 <_ZN5Print5printEc>
  return n;
}
   da342:	4420      	add	r0, r4
   da344:	bd38      	pop	{r3, r4, r5, pc}

000da346 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   da346:	b538      	push	{r3, r4, r5, lr}
   da348:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da34a:	f7ff ffd9 	bl	da300 <_ZN5Print5writeEPKc>
   da34e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   da350:	4628      	mov	r0, r5
   da352:	f7ff ffec 	bl	da32e <_ZN5Print7printlnEv>
  return n;
}
   da356:	4420      	add	r0, r4
   da358:	bd38      	pop	{r3, r4, r5, pc}

000da35a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   da35a:	b530      	push	{r4, r5, lr}
   da35c:	b08b      	sub	sp, #44	; 0x2c
   da35e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   da360:	2100      	movs	r1, #0
   da362:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   da366:	2a01      	cmp	r2, #1
   da368:	bf98      	it	ls
   da36a:	220a      	movls	r2, #10
   da36c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   da370:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   da374:	fb05 3312 	mls	r3, r5, r2, r3
   da378:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   da37c:	2b09      	cmp	r3, #9
   da37e:	bf94      	ite	ls
   da380:	3330      	addls	r3, #48	; 0x30
   da382:	3337      	addhi	r3, #55	; 0x37
   da384:	b2db      	uxtb	r3, r3
   da386:	4621      	mov	r1, r4
   da388:	f804 3901 	strb.w	r3, [r4], #-1
   da38c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   da38e:	2d00      	cmp	r5, #0
   da390:	d1ee      	bne.n	da370 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   da392:	f7ff ffb5 	bl	da300 <_ZN5Print5writeEPKc>
}
   da396:	b00b      	add	sp, #44	; 0x2c
   da398:	bd30      	pop	{r4, r5, pc}

000da39a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   da39a:	b410      	push	{r4}
  if (base == 0) return write(n);
   da39c:	b92a      	cbnz	r2, da3aa <_ZN5Print5printEmi+0x10>
   da39e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   da3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   da3a4:	689b      	ldr	r3, [r3, #8]
   da3a6:	b2c9      	uxtb	r1, r1
   da3a8:	4718      	bx	r3
  else return printNumber(n, base);
   da3aa:	b2d2      	uxtb	r2, r2
}
   da3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   da3b0:	f7ff bfd3 	b.w	da35a <_ZN5Print11printNumberEmh>

000da3b4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   da3b4:	f7ff bff1 	b.w	da39a <_ZN5Print5printEmi>

000da3b8 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   da3b8:	b538      	push	{r3, r4, r5, lr}
   da3ba:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   da3bc:	f7ff ffed 	bl	da39a <_ZN5Print5printEmi>
   da3c0:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   da3c2:	4628      	mov	r0, r5
   da3c4:	f7ff ffb3 	bl	da32e <_ZN5Print7printlnEv>
  return n;
}
   da3c8:	4420      	add	r0, r4
   da3ca:	bd38      	pop	{r3, r4, r5, pc}

000da3cc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   da3cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3d0:	4607      	mov	r7, r0
   da3d2:	460e      	mov	r6, r1
  if (base == 0) {
   da3d4:	4615      	mov	r5, r2
   da3d6:	b92a      	cbnz	r2, da3e4 <_ZN5Print5printEli+0x18>
    return write(n);
   da3d8:	6803      	ldr	r3, [r0, #0]
   da3da:	b2c9      	uxtb	r1, r1
   da3dc:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   da3e2:	4718      	bx	r3
  } else if (base == 10) {
   da3e4:	2a0a      	cmp	r2, #10
   da3e6:	d102      	bne.n	da3ee <_ZN5Print5printEli+0x22>
    if (n < 0) {
   da3e8:	2900      	cmp	r1, #0
   da3ea:	da01      	bge.n	da3f0 <_ZN5Print5printEli+0x24>
   da3ec:	e004      	b.n	da3f8 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da3ee:	b2d2      	uxtb	r2, r2
  }
}
   da3f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   da3f4:	f7ff bfb1 	b.w	da35a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da3f8:	212d      	movs	r1, #45	; 0x2d
   da3fa:	f7ff ff95 	bl	da328 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   da3fe:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   da400:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   da402:	4271      	negs	r1, r6
   da404:	4638      	mov	r0, r7
   da406:	f7ff ffa8 	bl	da35a <_ZN5Print11printNumberEmh>
   da40a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   da40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da410 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   da410:	f7ff bfdc 	b.w	da3cc <_ZN5Print5printEli>

000da414 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da414:	b40c      	push	{r2, r3}
   da416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da41a:	b087      	sub	sp, #28
   da41c:	af00      	add	r7, sp, #0
   da41e:	f107 0438 	add.w	r4, r7, #56	; 0x38
   da422:	4605      	mov	r5, r0
   da424:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   da428:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   da42a:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   da42c:	4623      	mov	r3, r4
   da42e:	464a      	mov	r2, r9
   da430:	2114      	movs	r1, #20
   da432:	1d38      	adds	r0, r7, #4
   da434:	f7ff f95c 	bl	d96f0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   da438:	2813      	cmp	r0, #19
   da43a:	d805      	bhi.n	da448 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da43c:	1d39      	adds	r1, r7, #4
   da43e:	4628      	mov	r0, r5
   da440:	f7ff ff5e 	bl	da300 <_ZN5Print5writeEPKc>
   da444:	4604      	mov	r4, r0
   da446:	e013      	b.n	da470 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da448:	f100 0308 	add.w	r3, r0, #8
   da44c:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   da450:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   da452:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   da456:	1c41      	adds	r1, r0, #1
   da458:	4623      	mov	r3, r4
   da45a:	464a      	mov	r2, r9
   da45c:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   da45e:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   da460:	f7ff f946 	bl	d96f0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   da464:	4669      	mov	r1, sp
   da466:	4628      	mov	r0, r5
   da468:	f7ff ff4a 	bl	da300 <_ZN5Print5writeEPKc>
   da46c:	4604      	mov	r4, r0
   da46e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   da470:	b11e      	cbz	r6, da47a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   da472:	4628      	mov	r0, r5
   da474:	f7ff ff5b 	bl	da32e <_ZN5Print7printlnEv>
   da478:	4404      	add	r4, r0
    return n;
}
   da47a:	4620      	mov	r0, r4
   da47c:	371c      	adds	r7, #28
   da47e:	46bd      	mov	sp, r7
   da480:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da484:	b002      	add	sp, #8
   da486:	4770      	bx	lr

000da488 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   da488:	b510      	push	{r4, lr}
  if (0 == max) {
   da48a:	4604      	mov	r4, r0
   da48c:	b130      	cbz	r0, da49c <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   da48e:	f001 ff53 	bl	dc338 <rand>
   da492:	fb90 f3f4 	sdiv	r3, r0, r4
   da496:	fb03 0014 	mls	r0, r3, r4, r0
   da49a:	bd10      	pop	{r4, pc}
}
   da49c:	bd10      	pop	{r4, pc}

000da49e <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   da49e:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   da4a0:	b510      	push	{r4, lr}
   da4a2:	4604      	mov	r4, r0
  if (min >= max) {
   da4a4:	da04      	bge.n	da4b0 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   da4a6:	1a08      	subs	r0, r1, r0
   da4a8:	f7ff ffee 	bl	da488 <_Z6randomi>
   da4ac:	4420      	add	r0, r4
   da4ae:	bd10      	pop	{r4, pc}
}
   da4b0:	bd10      	pop	{r4, pc}

000da4b2 <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   da4b2:	f001 bf19 	b.w	dc2e8 <srand>

000da4b6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   da4b6:	b510      	push	{r4, lr}
   da4b8:	4604      	mov	r4, r0
   da4ba:	f7ff f955 	bl	d9768 <_ZNSt14_Function_baseD1Ev>
   da4be:	4620      	mov	r0, r4
   da4c0:	bd10      	pop	{r4, pc}
	...

000da4c4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   da4c4:	4803      	ldr	r0, [pc, #12]	; (da4d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   da4c6:	4a04      	ldr	r2, [pc, #16]	; (da4d8 <_GLOBAL__sub_I_RGB+0x14>)
   da4c8:	4904      	ldr	r1, [pc, #16]	; (da4dc <_GLOBAL__sub_I_RGB+0x18>)
   da4ca:	2300      	movs	r3, #0
   da4cc:	6083      	str	r3, [r0, #8]
   da4ce:	f001 b88d 	b.w	db5ec <__aeabi_atexit>
   da4d2:	bf00      	nop
   da4d4:	2003e5c4 	.word	0x2003e5c4
   da4d8:	2003e108 	.word	0x2003e108
   da4dc:	000da4b7 	.word	0x000da4b7

000da4e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   da4e0:	4770      	bx	lr

000da4e2 <_ZN8SPIClassD0Ev>:
   da4e2:	b510      	push	{r4, lr}
   da4e4:	4604      	mov	r4, r0
   da4e6:	f7f9 fdda 	bl	d409e <_ZdlPv>
   da4ea:	4620      	mov	r0, r4
   da4ec:	bd10      	pop	{r4, pc}
	...

000da4f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   da4f0:	b570      	push	{r4, r5, r6, lr}
   da4f2:	4b08      	ldr	r3, [pc, #32]	; (da514 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   da4f4:	6003      	str	r3, [r0, #0]
   da4f6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   da4f8:	2500      	movs	r5, #0
   da4fa:	460e      	mov	r6, r1
   da4fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   da500:	f7fe fde6 	bl	d90d0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   da504:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   da506:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   da508:	f7fe ff8a 	bl	d9420 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   da50c:	60a5      	str	r5, [r4, #8]
}
   da50e:	4620      	mov	r0, r4
   da510:	bd70      	pop	{r4, r5, r6, pc}
   da512:	bf00      	nop
   da514:	000de6d8 	.word	0x000de6d8

000da518 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   da518:	f64f 71ff 	movw	r1, #65535	; 0xffff
   da51c:	7900      	ldrb	r0, [r0, #4]
   da51e:	f7fe bf57 	b.w	d93d0 <HAL_SPI_Begin>

000da522 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   da522:	7900      	ldrb	r0, [r0, #4]
   da524:	f7fe bf5c 	b.w	d93e0 <HAL_SPI_Set_Bit_Order>

000da528 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   da528:	7900      	ldrb	r0, [r0, #4]
   da52a:	f7fe bf61 	b.w	d93f0 <HAL_SPI_Set_Data_Mode>
	...

000da530 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   da530:	4a05      	ldr	r2, [pc, #20]	; (da548 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   da532:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   da534:	5c99      	ldrb	r1, [r3, r2]
   da536:	4281      	cmp	r1, r0
   da538:	d002      	beq.n	da540 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   da53a:	3301      	adds	r3, #1
   da53c:	2b08      	cmp	r3, #8
   da53e:	d1f9      	bne.n	da534 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   da540:	1c58      	adds	r0, r3, #1
}
   da542:	b2c0      	uxtb	r0, r0
   da544:	4770      	bx	lr
   da546:	bf00      	nop
   da548:	000de6e0 	.word	0x000de6e0

000da54c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   da54c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   da54e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   da550:	6018      	str	r0, [r3, #0]
   da552:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   da554:	6818      	ldr	r0, [r3, #0]
   da556:	4288      	cmp	r0, r1
   da558:	b2e5      	uxtb	r5, r4
   da55a:	d906      	bls.n	da56a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   da55c:	3401      	adds	r4, #1
   da55e:	2c08      	cmp	r4, #8
   da560:	d002      	beq.n	da568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   da562:	0840      	lsrs	r0, r0, #1
   da564:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   da566:	e7f5      	b.n	da554 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   da568:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   da56a:	4b02      	ldr	r3, [pc, #8]	; (da574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   da56c:	5d5b      	ldrb	r3, [r3, r5]
   da56e:	7013      	strb	r3, [r2, #0]
   da570:	bd30      	pop	{r4, r5, pc}
   da572:	bf00      	nop
   da574:	000de6e0 	.word	0x000de6e0

000da578 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   da578:	b570      	push	{r4, r5, r6, lr}
   da57a:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   da57c:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   da57e:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   da582:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   da584:	2214      	movs	r2, #20
   da586:	2100      	movs	r1, #0
   da588:	a803      	add	r0, sp, #12
   da58a:	f001 fea5 	bl	dc2d8 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   da58e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   da590:	a903      	add	r1, sp, #12
   da592:	4630      	mov	r0, r6
   da594:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   da596:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   da59a:	f7fe ff51 	bl	d9440 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   da59e:	ab02      	add	r3, sp, #8
   da5a0:	f10d 0207 	add.w	r2, sp, #7
   da5a4:	4629      	mov	r1, r5
   da5a6:	9804      	ldr	r0, [sp, #16]
   da5a8:	f7ff ffd0 	bl	da54c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   da5ac:	7920      	ldrb	r0, [r4, #4]
   da5ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
   da5b2:	f7fe ff25 	bl	d9400 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   da5b6:	9802      	ldr	r0, [sp, #8]
   da5b8:	b008      	add	sp, #32
   da5ba:	bd70      	pop	{r4, r5, r6, pc}

000da5bc <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   da5bc:	b538      	push	{r3, r4, r5, lr}
   da5be:	4604      	mov	r4, r0
   da5c0:	4608      	mov	r0, r1
    if (dividerReference)
   da5c2:	68a5      	ldr	r5, [r4, #8]
   da5c4:	b14d      	cbz	r5, da5da <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   da5c6:	f7ff ffb3 	bl	da530 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   da5ca:	2201      	movs	r2, #1
   da5cc:	fa25 f100 	lsr.w	r1, r5, r0
   da5d0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   da5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   da5d6:	f7ff bfcf 	b.w	da578 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   da5da:	7920      	ldrb	r0, [r4, #4]
    }
}
   da5dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   da5e0:	f7fe bf0e 	b.w	d9400 <HAL_SPI_Set_Clock_Divider>

000da5e4 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   da5e4:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   da5e6:	7900      	ldrb	r0, [r0, #4]
   da5e8:	f7fe ff12 	bl	d9410 <HAL_SPI_Send_Receive_Data>
}
   da5ec:	b2c0      	uxtb	r0, r0
   da5ee:	bd08      	pop	{r3, pc}

000da5f0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   da5f0:	7900      	ldrb	r0, [r0, #4]
   da5f2:	f7fe bf1d 	b.w	d9430 <HAL_SPI_Is_Enabled>

000da5f6 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   da5f6:	4770      	bx	lr

000da5f8 <_ZN21StringPrintableHelperD0Ev>:
   da5f8:	b510      	push	{r4, lr}
   da5fa:	4604      	mov	r4, r0
   da5fc:	f7f9 fd4f 	bl	d409e <_ZdlPv>
   da600:	4620      	mov	r0, r4
   da602:	bd10      	pop	{r4, pc}

000da604 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   da604:	b510      	push	{r4, lr}
   da606:	4604      	mov	r4, r0
{
	free(buffer);
   da608:	6800      	ldr	r0, [r0, #0]
   da60a:	f7ff f861 	bl	d96d0 <free>
}
   da60e:	4620      	mov	r0, r4
   da610:	bd10      	pop	{r4, pc}

000da612 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   da612:	b510      	push	{r4, lr}
   da614:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   da616:	6800      	ldr	r0, [r0, #0]
   da618:	b108      	cbz	r0, da61e <_ZN6String10invalidateEv+0xc>
   da61a:	f7ff f859 	bl	d96d0 <free>
	buffer = NULL;
   da61e:	2300      	movs	r3, #0
   da620:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   da622:	60a3      	str	r3, [r4, #8]
   da624:	6063      	str	r3, [r4, #4]
   da626:	bd10      	pop	{r4, pc}

000da628 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   da628:	b538      	push	{r3, r4, r5, lr}
   da62a:	4604      	mov	r4, r0
   da62c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   da62e:	6800      	ldr	r0, [r0, #0]
   da630:	3101      	adds	r1, #1
   da632:	f7ff f855 	bl	d96e0 <realloc>
	if (newbuffer) {
   da636:	b110      	cbz	r0, da63e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   da638:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   da63c:	2001      	movs	r0, #1
	}
	return 0;
}
   da63e:	bd38      	pop	{r3, r4, r5, pc}

000da640 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   da640:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   da642:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   da644:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   da646:	b113      	cbz	r3, da64e <_ZN6String7reserveEj+0xe>
   da648:	6843      	ldr	r3, [r0, #4]
   da64a:	428b      	cmp	r3, r1
   da64c:	d207      	bcs.n	da65e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   da64e:	4620      	mov	r0, r4
   da650:	f7ff ffea 	bl	da628 <_ZN6String12changeBufferEj>
   da654:	b120      	cbz	r0, da660 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   da656:	68a3      	ldr	r3, [r4, #8]
   da658:	b90b      	cbnz	r3, da65e <_ZN6String7reserveEj+0x1e>
   da65a:	6822      	ldr	r2, [r4, #0]
   da65c:	7013      	strb	r3, [r2, #0]
   da65e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   da660:	bd10      	pop	{r4, pc}

000da662 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da662:	b570      	push	{r4, r5, r6, lr}
   da664:	460e      	mov	r6, r1
	if (!reserve(length)) {
   da666:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   da668:	4604      	mov	r4, r0
   da66a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   da66c:	f7ff ffe8 	bl	da640 <_ZN6String7reserveEj>
   da670:	b918      	cbnz	r0, da67a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   da672:	4620      	mov	r0, r4
   da674:	f7ff ffcd 	bl	da612 <_ZN6String10invalidateEv>
		return *this;
   da678:	e009      	b.n	da68e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   da67a:	462a      	mov	r2, r5
   da67c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   da67e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   da680:	6820      	ldr	r0, [r4, #0]
   da682:	f001 fe1e 	bl	dc2c2 <memcpy>
	buffer[len] = 0;
   da686:	6822      	ldr	r2, [r4, #0]
   da688:	68a3      	ldr	r3, [r4, #8]
   da68a:	2100      	movs	r1, #0
   da68c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   da68e:	4620      	mov	r0, r4
   da690:	bd70      	pop	{r4, r5, r6, pc}

000da692 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   da692:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da694:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   da696:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da698:	6003      	str	r3, [r0, #0]
	capacity = 0;
   da69a:	6043      	str	r3, [r0, #4]
	len = 0;
   da69c:	6083      	str	r3, [r0, #8]
	flags = 0;
   da69e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   da6a0:	460d      	mov	r5, r1
   da6a2:	b139      	cbz	r1, da6b4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   da6a4:	4608      	mov	r0, r1
   da6a6:	f001 fea4 	bl	dc3f2 <strlen>
   da6aa:	4629      	mov	r1, r5
   da6ac:	4602      	mov	r2, r0
   da6ae:	4620      	mov	r0, r4
   da6b0:	f7ff ffd7 	bl	da662 <_ZN6String4copyEPKcj>
}
   da6b4:	4620      	mov	r0, r4
   da6b6:	bd38      	pop	{r3, r4, r5, pc}

000da6b8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da6b8:	b538      	push	{r3, r4, r5, lr}
   da6ba:	4605      	mov	r5, r0
	if (buffer) {
   da6bc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   da6be:	460c      	mov	r4, r1
	if (buffer) {
   da6c0:	b160      	cbz	r0, da6dc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   da6c2:	686a      	ldr	r2, [r5, #4]
   da6c4:	688b      	ldr	r3, [r1, #8]
   da6c6:	429a      	cmp	r2, r3
   da6c8:	d306      	bcc.n	da6d8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   da6ca:	6809      	ldr	r1, [r1, #0]
   da6cc:	f001 fe6e 	bl	dc3ac <strcpy>
			len = rhs.len;
   da6d0:	68a3      	ldr	r3, [r4, #8]
   da6d2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   da6d4:	2300      	movs	r3, #0
   da6d6:	e00a      	b.n	da6ee <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   da6d8:	f7fe fffa 	bl	d96d0 <free>
		}
	}
	buffer = rhs.buffer;
   da6dc:	6823      	ldr	r3, [r4, #0]
   da6de:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   da6e0:	6863      	ldr	r3, [r4, #4]
   da6e2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   da6e4:	68a3      	ldr	r3, [r4, #8]
   da6e6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   da6e8:	2300      	movs	r3, #0
   da6ea:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   da6ec:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   da6ee:	60a3      	str	r3, [r4, #8]
   da6f0:	bd38      	pop	{r3, r4, r5, pc}

000da6f2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   da6f2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   da6f4:	b510      	push	{r4, lr}
   da6f6:	460b      	mov	r3, r1
   da6f8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   da6fa:	d007      	beq.n	da70c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   da6fc:	6809      	ldr	r1, [r1, #0]
   da6fe:	b119      	cbz	r1, da708 <_ZN6StringaSERKS_+0x16>
   da700:	689a      	ldr	r2, [r3, #8]
   da702:	f7ff ffae 	bl	da662 <_ZN6String4copyEPKcj>
   da706:	e001      	b.n	da70c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   da708:	f7ff ff83 	bl	da612 <_ZN6String10invalidateEv>

	return *this;
}
   da70c:	4620      	mov	r0, r4
   da70e:	bd10      	pop	{r4, pc}

000da710 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   da710:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da712:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   da714:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da716:	6003      	str	r3, [r0, #0]
	capacity = 0;
   da718:	6043      	str	r3, [r0, #4]
	len = 0;
   da71a:	6083      	str	r3, [r0, #8]
	flags = 0;
   da71c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   da71e:	f7ff ffe8 	bl	da6f2 <_ZN6StringaSERKS_>
}
   da722:	4620      	mov	r0, r4
   da724:	bd10      	pop	{r4, pc}

000da726 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   da726:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   da728:	b510      	push	{r4, lr}
   da72a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   da72c:	d001      	beq.n	da732 <_ZN6StringaSEOS_+0xc>
   da72e:	f7ff ffc3 	bl	da6b8 <_ZN6String4moveERS_>
	return *this;
}
   da732:	4620      	mov	r0, r4
   da734:	bd10      	pop	{r4, pc}

000da736 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   da736:	b538      	push	{r3, r4, r5, lr}
   da738:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   da73a:	460c      	mov	r4, r1
   da73c:	b141      	cbz	r1, da750 <_ZN6StringaSEPKc+0x1a>
   da73e:	4608      	mov	r0, r1
   da740:	f001 fe57 	bl	dc3f2 <strlen>
   da744:	4621      	mov	r1, r4
   da746:	4602      	mov	r2, r0
   da748:	4628      	mov	r0, r5
   da74a:	f7ff ff8a 	bl	da662 <_ZN6String4copyEPKcj>
   da74e:	e001      	b.n	da754 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   da750:	f7ff ff5f 	bl	da612 <_ZN6String10invalidateEv>

	return *this;
}
   da754:	4628      	mov	r0, r5
   da756:	bd38      	pop	{r3, r4, r5, pc}

000da758 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   da758:	b510      	push	{r4, lr}
   da75a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da75c:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   da75e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da760:	6023      	str	r3, [r4, #0]
	capacity = 0;
   da762:	6063      	str	r3, [r4, #4]
	len = 0;
   da764:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da766:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   da768:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
   da76a:	a901      	add	r1, sp, #4
   da76c:	f000 fdb0 	bl	db2d0 <itoa>
	*this = buf;
   da770:	a901      	add	r1, sp, #4
   da772:	4620      	mov	r0, r4
   da774:	f7ff ffdf 	bl	da736 <_ZN6StringaSEPKc>
}
   da778:	4620      	mov	r0, r4
   da77a:	b00a      	add	sp, #40	; 0x28
   da77c:	bd10      	pop	{r4, pc}

000da77e <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   da77e:	b510      	push	{r4, lr}
   da780:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da782:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   da784:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da786:	6023      	str	r3, [r4, #0]
	capacity = 0;
   da788:	6063      	str	r3, [r4, #4]
	len = 0;
   da78a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   da78c:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   da78e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
   da790:	a901      	add	r1, sp, #4
   da792:	f000 fd36 	bl	db202 <ltoa>
	*this = buf;
   da796:	a901      	add	r1, sp, #4
   da798:	4620      	mov	r0, r4
   da79a:	f7ff ffcc 	bl	da736 <_ZN6StringaSEPKc>
}
   da79e:	4620      	mov	r0, r4
   da7a0:	b00a      	add	sp, #40	; 0x28
   da7a2:	bd10      	pop	{r4, pc}

000da7a4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   da7a4:	b570      	push	{r4, r5, r6, lr}
   da7a6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   da7a8:	460e      	mov	r6, r1
   da7aa:	b909      	cbnz	r1, da7b0 <_ZN6String6concatEPKcj+0xc>
   da7ac:	2000      	movs	r0, #0
   da7ae:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   da7b0:	b16a      	cbz	r2, da7ce <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   da7b2:	6883      	ldr	r3, [r0, #8]
   da7b4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   da7b6:	4629      	mov	r1, r5
   da7b8:	f7ff ff42 	bl	da640 <_ZN6String7reserveEj>
   da7bc:	2800      	cmp	r0, #0
   da7be:	d0f5      	beq.n	da7ac <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   da7c0:	6820      	ldr	r0, [r4, #0]
   da7c2:	68a3      	ldr	r3, [r4, #8]
   da7c4:	4631      	mov	r1, r6
   da7c6:	4418      	add	r0, r3
   da7c8:	f001 fdf0 	bl	dc3ac <strcpy>
	len = newlen;
   da7cc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   da7ce:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   da7d0:	bd70      	pop	{r4, r5, r6, pc}

000da7d2 <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   da7d2:	b538      	push	{r3, r4, r5, lr}
   da7d4:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   da7d6:	6880      	ldr	r0, [r0, #8]
   da7d8:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   da7da:	f7ff ffe3 	bl	da7a4 <_ZN6String6concatEPKcj>
   da7de:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   da7e0:	6898      	ldr	r0, [r3, #8]
    }
   da7e2:	1b40      	subs	r0, r0, r5
   da7e4:	bd38      	pop	{r3, r4, r5, pc}

000da7e6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   da7e6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   da7e8:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   da7ea:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   da7ee:	2201      	movs	r2, #1
   da7f0:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   da7f2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   da7f6:	f7ff ffd5 	bl	da7a4 <_ZN6String6concatEPKcj>
}
   da7fa:	b003      	add	sp, #12
   da7fc:	f85d fb04 	ldr.w	pc, [sp], #4

000da800 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   da800:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   da802:	6880      	ldr	r0, [r0, #8]
   da804:	f7ff ffef 	bl	da7e6 <_ZN6String6concatEc>
    }
   da808:	bd08      	pop	{r3, pc}

000da80a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da80a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da80c:	688a      	ldr	r2, [r1, #8]
   da80e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   da810:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   da812:	f7ff ffc7 	bl	da7a4 <_ZN6String6concatEPKcj>
   da816:	b910      	cbnz	r0, da81e <_ZplRK15StringSumHelperRK6String+0x14>
   da818:	4620      	mov	r0, r4
   da81a:	f7ff fefa 	bl	da612 <_ZN6String10invalidateEv>
	return a;
}
   da81e:	4620      	mov	r0, r4
   da820:	bd10      	pop	{r4, pc}

000da822 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   da822:	b538      	push	{r3, r4, r5, lr}
   da824:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   da826:	460d      	mov	r5, r1
   da828:	b141      	cbz	r1, da83c <_ZplRK15StringSumHelperPKc+0x1a>
   da82a:	4608      	mov	r0, r1
   da82c:	f001 fde1 	bl	dc3f2 <strlen>
   da830:	4629      	mov	r1, r5
   da832:	4602      	mov	r2, r0
   da834:	4620      	mov	r0, r4
   da836:	f7ff ffb5 	bl	da7a4 <_ZN6String6concatEPKcj>
   da83a:	b910      	cbnz	r0, da842 <_ZplRK15StringSumHelperPKc+0x20>
   da83c:	4620      	mov	r0, r4
   da83e:	f7ff fee8 	bl	da612 <_ZN6String10invalidateEv>
	return a;
}
   da842:	4620      	mov	r0, r4
   da844:	bd38      	pop	{r3, r4, r5, pc}

000da846 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   da846:	b570      	push	{r4, r5, r6, lr}
   da848:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   da84a:	b19a      	cbz	r2, da874 <_ZNK6String8getBytesEPhjj+0x2e>
   da84c:	b191      	cbz	r1, da874 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   da84e:	6885      	ldr	r5, [r0, #8]
   da850:	429d      	cmp	r5, r3
   da852:	d802      	bhi.n	da85a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   da854:	2300      	movs	r3, #0
   da856:	700b      	strb	r3, [r1, #0]
		return;
   da858:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   da85a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   da85c:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   da85e:	6801      	ldr	r1, [r0, #0]
   da860:	42ac      	cmp	r4, r5
   da862:	bf28      	it	cs
   da864:	462c      	movcs	r4, r5
   da866:	4419      	add	r1, r3
   da868:	4622      	mov	r2, r4
   da86a:	4630      	mov	r0, r6
   da86c:	f001 fdde 	bl	dc42c <strncpy>
	buf[n] = 0;
   da870:	2300      	movs	r3, #0
   da872:	5533      	strb	r3, [r6, r4]
   da874:	bd70      	pop	{r4, r5, r6, pc}
	...

000da878 <_ZN6StringC1ERK9Printable>:
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   da878:	b530      	push	{r4, r5, lr}
   da87a:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da87c:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   da87e:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da880:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   da882:	6003      	str	r3, [r0, #0]
	capacity = 0;
   da884:	6043      	str	r3, [r0, #4]
	len = 0;
   da886:	6083      	str	r3, [r0, #8]
	flags = 0;
   da888:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   da88a:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   da88c:	4b06      	ldr	r3, [pc, #24]	; (da8a8 <_ZN6StringC1ERK9Printable+0x30>)
   da88e:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   da890:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   da892:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   da894:	f7ff fed4 	bl	da640 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   da898:	682b      	ldr	r3, [r5, #0]
   da89a:	a901      	add	r1, sp, #4
   da89c:	681b      	ldr	r3, [r3, #0]
   da89e:	4628      	mov	r0, r5
   da8a0:	4798      	blx	r3
}
   da8a2:	4620      	mov	r0, r4
   da8a4:	b005      	add	sp, #20
   da8a6:	bd30      	pop	{r4, r5, pc}
   da8a8:	000de6f0 	.word	0x000de6f0

000da8ac <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   da8ac:	4b05      	ldr	r3, [pc, #20]	; (da8c4 <_GLOBAL__sub_I_System+0x18>)
   da8ae:	f64f 729c 	movw	r2, #65436	; 0xff9c
   da8b2:	2000      	movs	r0, #0
   da8b4:	805a      	strh	r2, [r3, #2]
   da8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   da8ba:	7018      	strb	r0, [r3, #0]
   da8bc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   da8be:	f7fe be4f 	b.w	d9560 <set_system_mode>
   da8c2:	bf00      	nop
   da8c4:	2003e5d4 	.word	0x2003e5d4

000da8c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   da8c8:	4b02      	ldr	r3, [pc, #8]	; (da8d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   da8ca:	681a      	ldr	r2, [r3, #0]
   da8cc:	4b02      	ldr	r3, [pc, #8]	; (da8d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   da8ce:	601a      	str	r2, [r3, #0]
   da8d0:	4770      	bx	lr
   da8d2:	bf00      	nop
   da8d4:	2003e0a0 	.word	0x2003e0a0
   da8d8:	2003e5dc 	.word	0x2003e5dc

000da8dc <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   da8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   da8de:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   da8e0:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   da8e2:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   da8e4:	460e      	mov	r6, r1
   da8e6:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   da8e8:	f000 fd68 	bl	db3bc <pinAvailable>
   da8ec:	b160      	cbz	r0, da908 <tone+0x2c>
   da8ee:	2102      	movs	r1, #2
   da8f0:	4628      	mov	r0, r5
   da8f2:	f7fe fc2d 	bl	d9150 <HAL_Validate_Pin_Function>
   da8f6:	2802      	cmp	r0, #2
   da8f8:	d106      	bne.n	da908 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   da8fa:	463a      	mov	r2, r7
   da8fc:	4631      	mov	r1, r6
   da8fe:	4620      	mov	r0, r4
    }
}
   da900:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   da904:	f7fe bd24 	b.w	d9350 <HAL_Tone_Start>
   da908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da90a <noTone>:
    }
}

void noTone(uint8_t pin)
{
   da90a:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   da90c:	b285      	uxth	r5, r0
        HAL_Tone_Start(pin, frequency, duration);
    }
}

void noTone(uint8_t pin)
{
   da90e:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   da910:	4628      	mov	r0, r5
   da912:	f000 fd53 	bl	db3bc <pinAvailable>
   da916:	b150      	cbz	r0, da92e <noTone+0x24>
   da918:	2102      	movs	r1, #2
   da91a:	4628      	mov	r0, r5
   da91c:	f7fe fc18 	bl	d9150 <HAL_Validate_Pin_Function>
   da920:	2802      	cmp	r0, #2
   da922:	d104      	bne.n	da92e <noTone+0x24>
        HAL_Tone_Stop(pin);
   da924:	4620      	mov	r0, r4
    }
}
   da926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void noTone(uint8_t pin)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Stop(pin);
   da92a:	f7fe bd19 	b.w	d9360 <HAL_Tone_Stop>
   da92e:	bd38      	pop	{r3, r4, r5, pc}

000da930 <_ZN3UDP13receivePacketEPcj>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size);
    virtual int receivePacket(char* buffer, size_t buf_size) { return receivePacket((uint8_t*)buffer, buf_size); }
   da930:	6803      	ldr	r3, [r0, #0]
   da932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   da934:	4718      	bx	r3

000da936 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   da936:	6803      	ldr	r3, [r0, #0]
   da938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   da93a:	4718      	bx	r3

000da93c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   da93c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   da93e:	4770      	bx	lr

000da940 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   da940:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   da942:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   da944:	1a10      	subs	r0, r2, r0
   da946:	4770      	bx	lr

000da948 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   da948:	b513      	push	{r0, r1, r4, lr}
   da94a:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   da94c:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   da94e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   da952:	68d4      	ldr	r4, [r2, #12]
   da954:	4619      	mov	r1, r3
   da956:	2201      	movs	r2, #1
   da958:	47a0      	blx	r4
}
   da95a:	b002      	add	sp, #8
   da95c:	bd10      	pop	{r4, pc}

000da95e <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   da95e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   da960:	6803      	ldr	r3, [r0, #0]
   da962:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   da964:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   da966:	4798      	blx	r3
   da968:	b128      	cbz	r0, da976 <_ZN3UDP4readEv+0x18>
   da96a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da96c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   da96e:	1c59      	adds	r1, r3, #1
   da970:	86e1      	strh	r1, [r4, #54]	; 0x36
   da972:	5cd0      	ldrb	r0, [r2, r3]
   da974:	bd10      	pop	{r4, pc}
   da976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   da97a:	bd10      	pop	{r4, pc}

000da97c <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   da97c:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   da97e:	6803      	ldr	r3, [r0, #0]
   da980:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   da982:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   da984:	4798      	blx	r3
   da986:	b118      	cbz	r0, da990 <_ZN3UDP4peekEv+0x14>
   da988:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   da98a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   da98c:	5cd0      	ldrb	r0, [r2, r3]
   da98e:	bd10      	pop	{r4, pc}
   da990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   da994:	bd10      	pop	{r4, pc}

000da996 <_ZN3UDP5flushEv>:

void UDP::flush() {
   da996:	4770      	bx	lr

000da998 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   da998:	b410      	push	{r4}
   da99a:	4603      	mov	r3, r0
   da99c:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   da99e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   da9a0:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   da9a2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   da9a4:	6803      	ldr	r3, [r0, #0]
   da9a6:	1a52      	subs	r2, r2, r1
   da9a8:	68db      	ldr	r3, [r3, #12]
   da9aa:	4421      	add	r1, r4
}
   da9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   da9b0:	4718      	bx	r3

000da9b2 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   da9b2:	f1a0 0010 	sub.w	r0, r0, #16
   da9b6:	f7ff bfef 	b.w	da998 <_ZNK3UDP7printToER5Print>

000da9ba <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    stop();
   da9be:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da9c0:	b08c      	sub	sp, #48	; 0x30
    stop();
   da9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   da9c4:	261c      	movs	r6, #28
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   da9c6:	4604      	mov	r4, r0
   da9c8:	4688      	mov	r8, r1
   da9ca:	4615      	mov	r5, r2
    stop();
   da9cc:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   da9ce:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   da9d0:	4632      	mov	r2, r6
   da9d2:	2100      	movs	r1, #0
   da9d4:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   da9d6:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   da9d8:	270a      	movs	r7, #10

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   da9da:	f001 fc7d 	bl	dc2d8 <memset>
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   da9de:	4640      	mov	r0, r8
    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
   da9e0:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
   da9e4:	f88d 7015 	strb.w	r7, [sp, #21]
    saddr.sin6_port = htons(port);
   da9e8:	f7fe fc9a 	bl	d9320 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da9ec:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   da9ee:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da9f2:	2102      	movs	r1, #2
   da9f4:	4638      	mov	r0, r7
   da9f6:	f7fe fce3 	bl	d93c0 <sock_socket>

    if (_sock < 0) {
   da9fa:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   da9fc:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   da9fe:	db24      	blt.n	daa4a <_ZN3UDP5beginEtm+0x90>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   daa00:	2204      	movs	r2, #4
   daa02:	9200      	str	r2, [sp, #0]
   daa04:	ab02      	add	r3, sp, #8
   daa06:	f640 71ff 	movw	r1, #4095	; 0xfff
   daa0a:	f7fe fcb9 	bl	d9380 <sock_setsockopt>
   daa0e:	b9e0      	cbnz	r0, daa4a <_ZN3UDP5beginEtm+0x90>
        goto done;
    }

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   daa10:	4632      	mov	r2, r6
   daa12:	a905      	add	r1, sp, #20
   daa14:	6960      	ldr	r0, [r4, #20]
   daa16:	f7fe fcab 	bl	d9370 <sock_bind>
   daa1a:	b9b0      	cbnz	r0, daa4a <_ZN3UDP5beginEtm+0x90>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   daa1c:	b195      	cbz	r5, daa44 <_ZN3UDP5beginEtm+0x8a>
        struct ifreq ifr = {};
   daa1e:	9003      	str	r0, [sp, #12]
   daa20:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   daa24:	a903      	add	r1, sp, #12
   daa26:	b2e8      	uxtb	r0, r5
   daa28:	f7fe fc42 	bl	d92b0 <if_index_to_name>
   daa2c:	b968      	cbnz	r0, daa4a <_ZN3UDP5beginEtm+0x90>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   daa2e:	2306      	movs	r3, #6
   daa30:	9300      	str	r3, [sp, #0]
   daa32:	f241 020b 	movw	r2, #4107	; 0x100b
   daa36:	ab03      	add	r3, sp, #12
   daa38:	f640 71ff 	movw	r1, #4095	; 0xfff
   daa3c:	6960      	ldr	r0, [r4, #20]
   daa3e:	f7fe fc9f 	bl	d9380 <sock_setsockopt>
   daa42:	b910      	cbnz	r0, daa4a <_ZN3UDP5beginEtm+0x90>
            goto done;
        }
    }
#endif // HAL_PLATFORM_IFAPI

    _nif = nif;
   daa44:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   daa46:	2001      	movs	r0, #1
   daa48:	e004      	b.n	daa54 <_ZN3UDP5beginEtm+0x9a>

done:
    if (!bound) {
        stop();
   daa4a:	6823      	ldr	r3, [r4, #0]
   daa4c:	4620      	mov	r0, r4
   daa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   daa50:	4798      	blx	r3
   daa52:	2000      	movs	r0, #0
    }
    return bound;
}
   daa54:	b00c      	add	sp, #48	; 0x30
   daa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daa5a <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   daa5a:	b510      	push	{r4, lr}
   daa5c:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   daa5e:	6940      	ldr	r0, [r0, #20]
   daa60:	2800      	cmp	r0, #0
   daa62:	db01      	blt.n	daa68 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   daa64:	f7fe fc94 	bl	d9390 <sock_close>
    }

    _sock = -1;
   daa68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   daa6c:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   daa6e:	2300      	movs	r3, #0
   daa70:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   daa72:	8723      	strh	r3, [r4, #56]	; 0x38
   daa74:	bd10      	pop	{r4, pc}

000daa76 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   daa76:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   daa78:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   daa7a:	4605      	mov	r5, r0
   daa7c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   daa7e:	b113      	cbz	r3, daa86 <_ZN3UDP5writeEPKhj+0x10>
   daa80:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   daa82:	1a24      	subs	r4, r4, r0
   daa84:	e000      	b.n	daa88 <_ZN3UDP5writeEPKhj+0x12>
   daa86:	461c      	mov	r4, r3
   daa88:	4294      	cmp	r4, r2
   daa8a:	bf28      	it	cs
   daa8c:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   daa8e:	4622      	mov	r2, r4
   daa90:	4418      	add	r0, r3
   daa92:	f001 fc16 	bl	dc2c2 <memcpy>
    _offset += size;
   daa96:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   daa98:	4423      	add	r3, r4
   daa9a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   daa9c:	4620      	mov	r0, r4
   daa9e:	bd38      	pop	{r3, r4, r5, pc}

000daaa0 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   daaa0:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   daaa2:	6803      	ldr	r3, [r0, #0]
   daaa4:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   daaa6:	4604      	mov	r4, r0
   daaa8:	460e      	mov	r6, r1
   daaaa:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   daaac:	4798      	blx	r3
   daaae:	b188      	cbz	r0, daad4 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   daab0:	6823      	ldr	r3, [r4, #0]
   daab2:	4620      	mov	r0, r4
   daab4:	691b      	ldr	r3, [r3, #16]
   daab6:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   daab8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   daaba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   daabc:	4285      	cmp	r5, r0
   daabe:	bfa8      	it	ge
   daac0:	4605      	movge	r5, r0
   daac2:	4419      	add	r1, r3
   daac4:	462a      	mov	r2, r5
   daac6:	4630      	mov	r0, r6
   daac8:	f001 fbfb 	bl	dc2c2 <memcpy>
        _offset += read;
   daacc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   daace:	442b      	add	r3, r5
   daad0:	86e3      	strh	r3, [r4, #54]	; 0x36
   daad2:	e001      	b.n	daad8 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   daad4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   daad8:	4628      	mov	r0, r5
   daada:	bd70      	pop	{r4, r5, r6, pc}

000daadc <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   daadc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   daade:	7843      	ldrb	r3, [r0, #1]
   daae0:	2b02      	cmp	r3, #2

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   daae2:	b08d      	sub	sp, #52	; 0x34
   daae4:	4606      	mov	r6, r0
   daae6:	460c      	mov	r4, r1
   daae8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   daaea:	d104      	bne.n	daaf6 <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = inaddr->sin_addr.s_addr;
   daaec:	6841      	ldr	r1, [r0, #4]
   daaee:	4620      	mov	r0, r4
   daaf0:	f7ff fa06 	bl	d9f00 <_ZN9IPAddressaSEm>
   daaf4:	e020      	b.n	dab38 <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x5c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   daaf6:	2b0a      	cmp	r3, #10
   daaf8:	d123      	bne.n	dab42 <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x66>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   daafa:	2211      	movs	r2, #17
   daafc:	2100      	movs	r1, #0
   daafe:	a801      	add	r0, sp, #4
   dab00:	f001 fbea 	bl	dc2d8 <memset>
        memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   dab04:	ad01      	add	r5, sp, #4
   dab06:	f106 0308 	add.w	r3, r6, #8
   dab0a:	f106 0e18 	add.w	lr, r6, #24
   dab0e:	6818      	ldr	r0, [r3, #0]
   dab10:	6859      	ldr	r1, [r3, #4]
   dab12:	462a      	mov	r2, r5
   dab14:	c203      	stmia	r2!, {r0, r1}
   dab16:	3308      	adds	r3, #8
   dab18:	4573      	cmp	r3, lr
   dab1a:	4615      	mov	r5, r2
   dab1c:	d1f7      	bne.n	dab0e <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x32>
        a.v = 6;
   dab1e:	2306      	movs	r3, #6
        addr = IPAddress(a);
   dab20:	a901      	add	r1, sp, #4
   dab22:	a806      	add	r0, sp, #24
   dab24:	ad07      	add	r5, sp, #28
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
        a.v = 6;
   dab26:	f88d 3014 	strb.w	r3, [sp, #20]
        addr = IPAddress(a);
   dab2a:	f7ff f9c1 	bl	d9eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   dab2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dab30:	3404      	adds	r4, #4
   dab32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dab34:	682b      	ldr	r3, [r5, #0]
   dab36:	7023      	strb	r3, [r4, #0]
        if (port) {
   dab38:	b11f      	cbz	r7, dab42 <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x66>
            *port = ntohs(in6addr->sin6_port);
   dab3a:	8870      	ldrh	r0, [r6, #2]
   dab3c:	f7fe fbe8 	bl	d9310 <inet_ntohs>
   dab40:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   dab42:	b00d      	add	sp, #52	; 0x34
   dab44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dab48 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dab4c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   dab4e:	ab0e      	add	r3, sp, #56	; 0x38
   dab50:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   dab52:	4606      	mov	r6, r0
   dab54:	4617      	mov	r7, r2
   dab56:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   dab58:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   dab5c:	462a      	mov	r2, r5
   dab5e:	4629      	mov	r1, r5
   dab60:	f7fe fbee 	bl	d9340 <netdb_getaddrinfo>
   dab64:	2800      	cmp	r0, #0
   dab66:	db1f      	blt.n	daba8 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   dab68:	9b01      	ldr	r3, [sp, #4]
   dab6a:	b1fb      	cbz	r3, dabac <_ZN3UDP11beginPacketEPKct+0x64>
   dab6c:	695b      	ldr	r3, [r3, #20]
   dab6e:	b1eb      	cbz	r3, dabac <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   dab70:	a802      	add	r0, sp, #8
   dab72:	f7ff f98f 	bl	d9e94 <_ZN9IPAddressC1Ev>
        sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   dab76:	9b01      	ldr	r3, [sp, #4]
   dab78:	462a      	mov	r2, r5
   dab7a:	6958      	ldr	r0, [r3, #20]
   dab7c:	a902      	add	r1, sp, #8
   dab7e:	f7ff ffad 	bl	daadc <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   dab82:	a802      	add	r0, sp, #8
   dab84:	f7ff f9a6 	bl	d9ed4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   dab88:	b180      	cbz	r0, dabac <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   dab8a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dab8c:	ad03      	add	r5, sp, #12
   dab8e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   dab92:	4b0b      	ldr	r3, [pc, #44]	; (dabc0 <_ZN3UDP11beginPacketEPKct+0x78>)
   dab94:	9308      	str	r3, [sp, #32]
   dab96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dab98:	ac09      	add	r4, sp, #36	; 0x24
   dab9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dab9c:	682b      	ldr	r3, [r5, #0]
   dab9e:	7023      	strb	r3, [r4, #0]
   daba0:	463a      	mov	r2, r7
   daba2:	a908      	add	r1, sp, #32
   daba4:	4630      	mov	r0, r6
   daba6:	47c0      	blx	r8
   daba8:	4604      	mov	r4, r0
   dabaa:	e001      	b.n	dabb0 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   dabac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   dabb0:	9801      	ldr	r0, [sp, #4]
   dabb2:	f7fe fbbd 	bl	d9330 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   dabb6:	4620      	mov	r0, r4
   dabb8:	b00e      	add	sp, #56	; 0x38
   dabba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dabbe:	bf00      	nop
   dabc0:	000de5a8 	.word	0x000de5a8

000dabc4 <_ZN3UDP13receivePacketEPhj>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size) {
   dabc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dabc8:	6944      	ldr	r4, [r0, #20]
   dabca:	2c00      	cmp	r4, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size) {
   dabcc:	b099      	sub	sp, #100	; 0x64
   dabce:	4605      	mov	r5, r0
   dabd0:	460f      	mov	r7, r1
   dabd2:	4691      	mov	r9, r2
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   dabd4:	db00      	blt.n	dabd8 <_ZN3UDP13receivePacketEPhj+0x14>
   dabd6:	b911      	cbnz	r1, dabde <_ZN3UDP13receivePacketEPhj+0x1a>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size) {
    int ret = -1;
   dabd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   dabdc:	e034      	b.n	dac48 <_ZN3UDP13receivePacketEPhj+0x84>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   dabde:	ae09      	add	r6, sp, #36	; 0x24
   dabe0:	f04f 081c 	mov.w	r8, #28
   dabe4:	4642      	mov	r2, r8
   dabe6:	2100      	movs	r1, #0
   dabe8:	4630      	mov	r0, r6
   dabea:	f001 fb75 	bl	dc2d8 <memset>
        socklen_t slen = sizeof(saddr);
   dabee:	ab18      	add	r3, sp, #96	; 0x60
        ret = sock_recvfrom(_sock, buffer, size, MSG_DONTWAIT, (struct sockaddr*)&saddr, &slen);
   dabf0:	4620      	mov	r0, r4

int UDP::receivePacket(uint8_t* buffer, size_t size) {
    int ret = -1;
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
   dabf2:	f843 8d50 	str.w	r8, [r3, #-80]!
        ret = sock_recvfrom(_sock, buffer, size, MSG_DONTWAIT, (struct sockaddr*)&saddr, &slen);
   dabf6:	464a      	mov	r2, r9
   dabf8:	9301      	str	r3, [sp, #4]
   dabfa:	9600      	str	r6, [sp, #0]
   dabfc:	2308      	movs	r3, #8
   dabfe:	4639      	mov	r1, r7
   dac00:	f7fe fbce 	bl	d93a0 <sock_recvfrom>
        if (ret >= 0) {
   dac04:	1e04      	subs	r4, r0, #0
   dac06:	db1f      	blt.n	dac48 <_ZN3UDP13receivePacketEPhj+0x84>
            sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   dac08:	f105 071c 	add.w	r7, r5, #28
   dac0c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   dac10:	4630      	mov	r0, r6
   dac12:	4639      	mov	r1, r7
   dac14:	f7ff ff62 	bl	daadc <_ZN12_GLOBAL__N_123sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   dac18:	2600      	movs	r6, #0
   dac1a:	2320      	movs	r3, #32

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   dac1c:	4639      	mov	r1, r7
   dac1e:	a805      	add	r0, sp, #20
   dac20:	9310      	str	r3, [sp, #64]	; 0x40
   dac22:	9611      	str	r6, [sp, #68]	; 0x44
   dac24:	f7ff fe28 	bl	da878 <_ZN6StringC1ERK9Printable>
   dac28:	8eab      	ldrh	r3, [r5, #52]	; 0x34
   dac2a:	9303      	str	r3, [sp, #12]
   dac2c:	9b05      	ldr	r3, [sp, #20]
   dac2e:	9302      	str	r3, [sp, #8]
   dac30:	4b07      	ldr	r3, [pc, #28]	; (dac50 <_ZN3UDP13receivePacketEPhj+0x8c>)
   dac32:	9300      	str	r3, [sp, #0]
   dac34:	2001      	movs	r0, #1
   dac36:	9401      	str	r4, [sp, #4]
   dac38:	4633      	mov	r3, r6
   dac3a:	aa10      	add	r2, sp, #64	; 0x40
   dac3c:	4905      	ldr	r1, [pc, #20]	; (dac54 <_ZN3UDP13receivePacketEPhj+0x90>)
   dac3e:	f7fe fc87 	bl	d9550 <log_message>
   dac42:	a805      	add	r0, sp, #20
   dac44:	f7ff fcde 	bl	da604 <_ZN6StringD1Ev>
        }
    }
    return ret;
}
   dac48:	4620      	mov	r0, r4
   dac4a:	b019      	add	sp, #100	; 0x64
   dac4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dac50:	000de729 	.word	0x000de729
   dac54:	000de6b9 	.word	0x000de6b9

000dac58 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>:
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
    }
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   dac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dac5c:	460c      	mov	r4, r1
   dac5e:	b090      	sub	sp, #64	; 0x40
    sockaddr_storage s = {};
   dac60:	f04f 081c 	mov.w	r8, #28
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
    }
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   dac64:	4605      	mov	r5, r0
   dac66:	4617      	mov	r7, r2
    sockaddr_storage s = {};
   dac68:	2100      	movs	r1, #0
   dac6a:	4642      	mov	r2, r8
   dac6c:	a809      	add	r0, sp, #36	; 0x24
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
    }
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   dac6e:	461e      	mov	r6, r3
    sockaddr_storage s = {};
   dac70:	f001 fb32 	bl	dc2d8 <memset>
   dac74:	7d23      	ldrb	r3, [r4, #20]
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
   dac76:	2b06      	cmp	r3, #6
   dac78:	d116      	bne.n	daca8 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x50>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
   dac7a:	230a      	movs	r3, #10
        in6addr->sin6_port = htons(port);
   dac7c:	2000      	movs	r0, #0

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
   dac7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dac82:	f88d 8024 	strb.w	r8, [sp, #36]	; 0x24
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dac86:	f7fe fb4b 	bl	d9320 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dac8a:	1d23      	adds	r3, r4, #4
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dac8c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dac90:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
   dac94:	3414      	adds	r4, #20
   dac96:	6818      	ldr	r0, [r3, #0]
   dac98:	6859      	ldr	r1, [r3, #4]
   dac9a:	4672      	mov	r2, lr
   dac9c:	c203      	stmia	r2!, {r0, r1}
   dac9e:	3308      	adds	r3, #8
   daca0:	42a3      	cmp	r3, r4
   daca2:	4696      	mov	lr, r2
   daca4:	d1f7      	bne.n	dac96 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x3e>
   daca6:	e00e      	b.n	dacc6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6e>
    } else if (addr.version() == 4) {
   daca8:	2b04      	cmp	r3, #4
   dacaa:	d10c      	bne.n	dacc6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x6e>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   dacac:	2310      	movs	r3, #16
   dacae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        inaddr->sin_family = AF_INET;
        inaddr->sin_port = htons(port);
   dacb2:	2000      	movs	r0, #0
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
    } else if (addr.version() == 4) {
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
        inaddr->sin_family = AF_INET;
   dacb4:	2302      	movs	r3, #2
   dacb6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
        inaddr->sin_port = htons(port);
   dacba:	f7fe fb31 	bl	d9320 <inet_htons>
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   dacbe:	6863      	ldr	r3, [r4, #4]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
    } else if (addr.version() == 4) {
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
        inaddr->sin_family = AF_INET;
        inaddr->sin_port = htons(port);
   dacc0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   dacc4:	930a      	str	r3, [sp, #40]	; 0x28
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
    sockaddr_storage s = {};
    ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
    if (s.ss_family == AF_INET) {
   dacc6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   dacca:	2b02      	cmp	r3, #2
   daccc:	d12e      	bne.n	dad2c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xd4>
        struct ip_mreq mreq = {};
   dacce:	2300      	movs	r3, #0
   dacd0:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   dacd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   dacd4:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   dacd6:	b1df      	cbz	r7, dad10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xb8>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   dacd8:	a902      	add	r1, sp, #8
   dacda:	4638      	mov	r0, r7
   dacdc:	f7fe faf0 	bl	d92c0 <if_get_by_index>
   dace0:	b9b0      	cbnz	r0, dad10 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xb8>
                struct if_addrs* addrs = nullptr;
   dace2:	a910      	add	r1, sp, #64	; 0x40
   dace4:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   dace8:	9802      	ldr	r0, [sp, #8]
   dacea:	f7fe faf1 	bl	d92d0 <if_get_addrs>
   dacee:	b960      	cbnz	r0, dad0a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xb2>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   dacf0:	9b03      	ldr	r3, [sp, #12]
   dacf2:	b153      	cbz	r3, dad0a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xb2>
                        auto ifaddr = a->if_addr->addr;
   dacf4:	68da      	ldr	r2, [r3, #12]
   dacf6:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   dacf8:	7851      	ldrb	r1, [r2, #1]
   dacfa:	2902      	cmp	r1, #2
   dacfc:	d103      	bne.n	dad06 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xae>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   dacfe:	6852      	ldr	r2, [r2, #4]
   dad00:	b10a      	cbz	r2, dad06 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xae>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   dad02:	9205      	str	r2, [sp, #20]
   dad04:	e001      	b.n	dad0a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0xb2>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   dad06:	681b      	ldr	r3, [r3, #0]
   dad08:	e7f3      	b.n	dacf2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x9a>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   dad0a:	9803      	ldr	r0, [sp, #12]
   dad0c:	f7fe fae8 	bl	d92e0 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   dad10:	2e00      	cmp	r6, #0
                    (void*)&mreq, sizeof(mreq));
   dad12:	f04f 0308 	mov.w	r3, #8
   dad16:	9300      	str	r3, [sp, #0]
   dad18:	bf18      	it	ne
   dad1a:	2203      	movne	r2, #3
   dad1c:	ab04      	add	r3, sp, #16
   dad1e:	bf08      	it	eq
   dad20:	2204      	moveq	r2, #4
   dad22:	2100      	movs	r1, #0
   dad24:	4628      	mov	r0, r5
   dad26:	f7fe fb2b 	bl	d9380 <sock_setsockopt>
   dad2a:	e01e      	b.n	dad6a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x112>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   dad2c:	2b0a      	cmp	r3, #10
   dad2e:	d11a      	bne.n	dad66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x10e>
        struct ipv6_mreq mreq = {};
   dad30:	ac04      	add	r4, sp, #16
   dad32:	2214      	movs	r2, #20
   dad34:	2100      	movs	r1, #0
   dad36:	4620      	mov	r0, r4
   dad38:	f001 face 	bl	dc2d8 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   dad3c:	ab0b      	add	r3, sp, #44	; 0x2c
   dad3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   dad40:	2e00      	cmp	r6, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   dad42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   dad46:	f04f 0314 	mov.w	r3, #20
   dad4a:	9300      	str	r3, [sp, #0]
   dad4c:	bf18      	it	ne
   dad4e:	220c      	movne	r2, #12
   dad50:	4623      	mov	r3, r4
   dad52:	bf08      	it	eq
   dad54:	220d      	moveq	r2, #13
   dad56:	2129      	movs	r1, #41	; 0x29
   dad58:	4628      	mov	r0, r5
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   dad5a:	9708      	str	r7, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   dad5c:	f7fe fb10 	bl	d9380 <sock_setsockopt>
   dad60:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   dad64:	e001      	b.n	dad6a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5+0x112>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   dad66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   dad6a:	b010      	add	sp, #64	; 0x40
   dad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dad70 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   dad70:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dad72:	4604      	mov	r4, r0
   dad74:	4b05      	ldr	r3, [pc, #20]	; (dad8c <_ZN3UDP8remoteIPEv+0x1c>)
   dad76:	f844 3b04 	str.w	r3, [r4], #4
   dad7a:	f101 0520 	add.w	r5, r1, #32
   dad7e:	4606      	mov	r6, r0
   dad80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dad82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dad84:	682b      	ldr	r3, [r5, #0]
   dad86:	7023      	strb	r3, [r4, #0]
   dad88:	4630      	mov	r0, r6
   dad8a:	bd70      	pop	{r4, r5, r6, pc}
   dad8c:	000de5a8 	.word	0x000de5a8

000dad90 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dad90:	b5f0      	push	{r4, r5, r6, r7, lr}
   dad92:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dad94:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dad96:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dad98:	6a97      	ldr	r7, [r2, #40]	; 0x28
   dad9a:	4a0a      	ldr	r2, [pc, #40]	; (dadc4 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   dad9c:	9202      	str	r2, [sp, #8]
   dad9e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dada0:	468e      	mov	lr, r1
   dada2:	4606      	mov	r6, r0
   dada4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dada6:	ac03      	add	r4, sp, #12
   dada8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dadaa:	682b      	ldr	r3, [r5, #0]
   dadac:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dadae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   dadb2:	9300      	str	r3, [sp, #0]
   dadb4:	4662      	mov	r2, ip
   dadb6:	ab02      	add	r3, sp, #8
   dadb8:	4671      	mov	r1, lr
   dadba:	4630      	mov	r0, r6
   dadbc:	47b8      	blx	r7
    }
   dadbe:	b009      	add	sp, #36	; 0x24
   dadc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dadc2:	bf00      	nop
   dadc4:	000de5a8 	.word	0x000de5a8

000dadc8 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   dadc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dadca:	6803      	ldr	r3, [r0, #0]
   dadcc:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   dadd0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   dadd2:	4b0d      	ldr	r3, [pc, #52]	; (dae08 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   dadd4:	b089      	sub	sp, #36	; 0x24
   dadd6:	f100 0620 	add.w	r6, r0, #32
   dadda:	4604      	mov	r4, r0
   daddc:	9302      	str	r3, [sp, #8]
   dadde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   dade0:	ad03      	add	r5, sp, #12
   dade2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dade4:	6833      	ldr	r3, [r6, #0]
   dade6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dade8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   dadea:	9300      	str	r3, [sp, #0]
   dadec:	4672      	mov	r2, lr
   dadee:	ab02      	add	r3, sp, #8
   dadf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dadf2:	4620      	mov	r0, r4
   dadf4:	47b8      	blx	r7
    flush(); // wait for send to complete
   dadf6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dadf8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   dadfa:	69db      	ldr	r3, [r3, #28]
   dadfc:	4620      	mov	r0, r4
   dadfe:	4798      	blx	r3
    return result;
}
   dae00:	4628      	mov	r0, r5
   dae02:	b009      	add	sp, #36	; 0x24
   dae04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dae06:	bf00      	nop
   dae08:	000de5a8 	.word	0x000de5a8

000dae0c <_ZN3UDP10sendPacketEPKhj9IPAddresst>:

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dae10:	461c      	mov	r4, r3
   dae12:	b091      	sub	sp, #68	; 0x44
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   dae14:	2320      	movs	r3, #32
   dae16:	f04f 0a00 	mov.w	sl, #0
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   dae1a:	4680      	mov	r8, r0
   dae1c:	4689      	mov	r9, r1

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   dae1e:	a804      	add	r0, sp, #16
   dae20:	4621      	mov	r1, r4
   dae22:	4617      	mov	r7, r2
   dae24:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   dae28:	9308      	str	r3, [sp, #32]
   dae2a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
   dae2e:	f7ff fd23 	bl	da878 <_ZN6StringC1ERK9Printable>
   dae32:	9b04      	ldr	r3, [sp, #16]
   dae34:	9302      	str	r3, [sp, #8]
   dae36:	ad08      	add	r5, sp, #32
   dae38:	4b27      	ldr	r3, [pc, #156]	; (daed8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xcc>)
   dae3a:	4928      	ldr	r1, [pc, #160]	; (daedc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xd0>)
   dae3c:	9300      	str	r3, [sp, #0]
   dae3e:	462a      	mov	r2, r5
   dae40:	4653      	mov	r3, sl
   dae42:	2001      	movs	r0, #1
   dae44:	9603      	str	r6, [sp, #12]
   dae46:	9701      	str	r7, [sp, #4]
   dae48:	f7fe fb82 	bl	d9550 <log_message>
	sockaddr_storage s = {};
   dae4c:	f04f 0b1c 	mov.w	fp, #28
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
   dae50:	a804      	add	r0, sp, #16
   dae52:	f7ff fbd7 	bl	da604 <_ZN6StringD1Ev>
	sockaddr_storage s = {};
   dae56:	465a      	mov	r2, fp
   dae58:	4651      	mov	r1, sl
   dae5a:	4628      	mov	r0, r5
   dae5c:	f001 fa3c 	bl	dc2d8 <memset>
   dae60:	7d23      	ldrb	r3, [r4, #20]
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
   dae62:	2b06      	cmp	r3, #6
   dae64:	d115      	bne.n	dae92 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x86>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
   dae66:	230a      	movs	r3, #10
        in6addr->sin6_port = htons(port);
   dae68:	4630      	mov	r0, r6

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
   dae6a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dae6e:	f88d b020 	strb.w	fp, [sp, #32]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dae72:	f7fe fa55 	bl	d9320 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dae76:	ae0a      	add	r6, sp, #40	; 0x28
   dae78:	1d23      	adds	r3, r4, #4
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dae7a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dae7e:	3414      	adds	r4, #20
   dae80:	6818      	ldr	r0, [r3, #0]
   dae82:	6859      	ldr	r1, [r3, #4]
   dae84:	4632      	mov	r2, r6
   dae86:	c203      	stmia	r2!, {r0, r1}
   dae88:	3308      	adds	r3, #8
   dae8a:	42a3      	cmp	r3, r4
   dae8c:	4616      	mov	r6, r2
   dae8e:	d1f7      	bne.n	dae80 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x74>
   dae90:	e00e      	b.n	daeb0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xa4>
    } else if (addr.version() == 4) {
   dae92:	2b04      	cmp	r3, #4
   dae94:	d10c      	bne.n	daeb0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xa4>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   dae96:	2310      	movs	r3, #16
   dae98:	f88d 3020 	strb.w	r3, [sp, #32]
        inaddr->sin_family = AF_INET;
        inaddr->sin_port = htons(port);
   dae9c:	4630      	mov	r0, r6
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
    } else if (addr.version() == 4) {
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
        inaddr->sin_family = AF_INET;
   dae9e:	2302      	movs	r3, #2
   daea0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
        inaddr->sin_port = htons(port);
   daea4:	f7fe fa3c 	bl	d9320 <inet_htons>
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   daea8:	6863      	ldr	r3, [r4, #4]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
    } else if (addr.version() == 4) {
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
        inaddr->sin_family = AF_INET;
        inaddr->sin_port = htons(port);
   daeaa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        const auto& a = addr.raw();
        inaddr->sin_addr.s_addr = a.ipv4;
   daeae:	9309      	str	r3, [sp, #36]	; 0x24

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
   daeb0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   daeb4:	b153      	cbz	r3, daecc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xc0>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   daeb6:	231c      	movs	r3, #28
   daeb8:	9301      	str	r3, [sp, #4]
   daeba:	9500      	str	r5, [sp, #0]
   daebc:	2300      	movs	r3, #0
   daebe:	463a      	mov	r2, r7
   daec0:	4649      	mov	r1, r9
   daec2:	f8d8 0014 	ldr.w	r0, [r8, #20]
   daec6:	f7fe fa73 	bl	d93b0 <sock_sendto>
   daeca:	e001      	b.n	daed0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0xc4>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   daecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   daed0:	b011      	add	sp, #68	; 0x44
   daed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daed6:	bf00      	nop
   daed8:	000de746 	.word	0x000de746
   daedc:	000de6b9 	.word	0x000de6b9

000daee0 <_ZN3UDPC1Ev>:
    return -1;
}

} // anonymous

UDP::UDP()
   daee0:	b538      	push	{r3, r4, r5, lr}
   daee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   daee6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   daee8:	4b0b      	ldr	r3, [pc, #44]	; (daf18 <_ZN3UDPC1Ev+0x38>)
   daeea:	f103 0208 	add.w	r2, r3, #8
   daeee:	336c      	adds	r3, #108	; 0x6c
   daef0:	2500      	movs	r5, #0
   daef2:	6103      	str	r3, [r0, #16]
   daef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   daef8:	4604      	mov	r4, r0
   daefa:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   daefc:	6002      	str	r2, [r0, #0]
   daefe:	6143      	str	r3, [r0, #20]
   daf00:	301c      	adds	r0, #28
   daf02:	f7fe ffc7 	bl	d9e94 <_ZN9IPAddressC1Ev>
   daf06:	f44f 7300 	mov.w	r3, #512	; 0x200
   daf0a:	86e5      	strh	r5, [r4, #54]	; 0x36
   daf0c:	8725      	strh	r5, [r4, #56]	; 0x38
   daf0e:	63e5      	str	r5, [r4, #60]	; 0x3c
   daf10:	6423      	str	r3, [r4, #64]	; 0x40
   daf12:	6465      	str	r5, [r4, #68]	; 0x44
}
   daf14:	4620      	mov	r0, r4
   daf16:	bd38      	pop	{r3, r4, r5, pc}
   daf18:	000de774 	.word	0x000de774

000daf1c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   daf1c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   daf1e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   daf22:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   daf24:	b11b      	cbz	r3, daf2e <_ZN3UDP13releaseBufferEv+0x12>
   daf26:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   daf28:	b108      	cbz	r0, daf2e <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   daf2a:	f7f9 f8b8 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   daf2e:	2300      	movs	r3, #0
   daf30:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   daf32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   daf36:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   daf38:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   daf3a:	8723      	strh	r3, [r4, #56]	; 0x38
   daf3c:	bd10      	pop	{r4, pc}

000daf3e <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   daf3e:	b570      	push	{r4, r5, r6, lr}
   daf40:	4604      	mov	r4, r0
   daf42:	4616      	mov	r6, r2
   daf44:	460d      	mov	r5, r1
    releaseBuffer();
   daf46:	f7ff ffe9 	bl	daf1c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   daf4a:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   daf4c:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   daf4e:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   daf50:	b93e      	cbnz	r6, daf62 <_ZN3UDP9setBufferEjPh+0x24>
   daf52:	b135      	cbz	r5, daf62 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   daf54:	4628      	mov	r0, r5
   daf56:	f7f9 f8a0 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   daf5a:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   daf5c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   daf5e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   daf62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   daf64:	b103      	cbz	r3, daf68 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   daf66:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   daf68:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   daf6a:	3000      	adds	r0, #0
   daf6c:	bf18      	it	ne
   daf6e:	2001      	movne	r0, #1
   daf70:	bd70      	pop	{r4, r5, r6, pc}

000daf72 <_ZN3UDP11parsePacketEv>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket() {
   daf72:	b510      	push	{r4, lr}
    if (!_buffer && _buffer_size) {
   daf74:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket() {
   daf76:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   daf78:	b91a      	cbnz	r2, daf82 <_ZN3UDP11parsePacketEv+0x10>
   daf7a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   daf7c:	b109      	cbz	r1, daf82 <_ZN3UDP11parsePacketEv+0x10>
        setBuffer(_buffer_size);
   daf7e:	f7ff ffde 	bl	daf3e <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   daf82:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   daf84:	2300      	movs	r3, #0
   daf86:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   daf88:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   daf8a:	b141      	cbz	r1, daf9e <_ZN3UDP11parsePacketEv+0x2c>
   daf8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   daf8e:	b132      	cbz	r2, daf9e <_ZN3UDP11parsePacketEv+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   daf90:	6823      	ldr	r3, [r4, #0]
   daf92:	4620      	mov	r0, r4
   daf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   daf96:	4798      	blx	r3
        if (result > 0) {
   daf98:	2800      	cmp	r0, #0
            _total = result;
   daf9a:	bfc8      	it	gt
   daf9c:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   daf9e:	6823      	ldr	r3, [r4, #0]
   dafa0:	4620      	mov	r0, r4
   dafa2:	691b      	ldr	r3, [r3, #16]
}
   dafa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   dafa8:	4718      	bx	r3
	...

000dafac <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dafac:	b5f0      	push	{r4, r5, r6, r7, lr}
   dafae:	b091      	sub	sp, #68	; 0x44
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   dafb0:	2320      	movs	r3, #32
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dafb2:	4605      	mov	r5, r0
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   dafb4:	2600      	movs	r6, #0
   dafb6:	a804      	add	r0, sp, #16
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dafb8:	4617      	mov	r7, r2
   dafba:	460c      	mov	r4, r1
	LOG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
   dafbc:	9308      	str	r3, [sp, #32]
   dafbe:	9609      	str	r6, [sp, #36]	; 0x24
   dafc0:	f7ff fc5a 	bl	da878 <_ZN6StringC1ERK9Printable>
   dafc4:	9b04      	ldr	r3, [sp, #16]
   dafc6:	9301      	str	r3, [sp, #4]
   dafc8:	4b10      	ldr	r3, [pc, #64]	; (db00c <_ZN3UDP11beginPacketE9IPAddresst+0x60>)
   dafca:	9300      	str	r3, [sp, #0]
   dafcc:	aa08      	add	r2, sp, #32
   dafce:	4633      	mov	r3, r6
   dafd0:	490f      	ldr	r1, [pc, #60]	; (db010 <_ZN3UDP11beginPacketE9IPAddresst+0x64>)
   dafd2:	9702      	str	r7, [sp, #8]
   dafd4:	2001      	movs	r0, #1
   dafd6:	f7fe fabb 	bl	d9550 <log_message>
   dafda:	a804      	add	r0, sp, #16
   dafdc:	f7ff fb12 	bl	da604 <_ZN6StringD1Ev>
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dafe0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   dafe2:	b922      	cbnz	r2, dafee <_ZN3UDP11beginPacketE9IPAddresst+0x42>
   dafe4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   dafe6:	b111      	cbz	r1, dafee <_ZN3UDP11beginPacketE9IPAddresst+0x42>
        setBuffer(_buffer_size);
   dafe8:	4628      	mov	r0, r5
   dafea:	f7ff ffa8 	bl	daf3e <_ZN3UDP9setBufferEjPh>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dafee:	3404      	adds	r4, #4
   daff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   daff2:	f105 0620 	add.w	r6, r5, #32
   daff6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   daff8:	6823      	ldr	r3, [r4, #0]
   daffa:	7033      	strb	r3, [r6, #0]

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   daffc:	6c28      	ldr	r0, [r5, #64]	; 0x40
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   daffe:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   db000:	2300      	movs	r3, #0
   db002:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   db004:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   db006:	b011      	add	sp, #68	; 0x44
   db008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   db00a:	bf00      	nop
   db00c:	000de760 	.word	0x000de760
   db010:	000de6b9 	.word	0x000de6b9

000db014 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   db014:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   db016:	6940      	ldr	r0, [r0, #20]
   db018:	2800      	cmp	r0, #0
   db01a:	db04      	blt.n	db026 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   db01c:	2301      	movs	r3, #1
   db01e:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   db022:	f7ff be19 	b.w	dac58 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.5>
}
   db026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   db02a:	4770      	bx	lr

000db02c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   db02c:	4770      	bx	lr

000db02e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db02e:	7441      	strb	r1, [r0, #17]
   db030:	4770      	bx	lr

000db032 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   db032:	7c00      	ldrb	r0, [r0, #16]
   db034:	f7fe ba44 	b.w	d94c0 <HAL_USART_Available_Data_For_Write>

000db038 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   db038:	7c00      	ldrb	r0, [r0, #16]
   db03a:	f7fe ba19 	b.w	d9470 <HAL_USART_Available_Data>

000db03e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   db03e:	7c00      	ldrb	r0, [r0, #16]
   db040:	f7fe ba26 	b.w	d9490 <HAL_USART_Peek_Data>

000db044 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   db044:	7c00      	ldrb	r0, [r0, #16]
   db046:	f7fe ba1b 	b.w	d9480 <HAL_USART_Read_Data>

000db04a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   db04a:	7c00      	ldrb	r0, [r0, #16]
   db04c:	f7fe ba28 	b.w	d94a0 <HAL_USART_Flush_Data>

000db050 <_ZN11USARTSerialD0Ev>:
   db050:	b510      	push	{r4, lr}
   db052:	4604      	mov	r4, r0
   db054:	f7f9 f823 	bl	d409e <_ZdlPv>
   db058:	4620      	mov	r0, r4
   db05a:	bd10      	pop	{r4, pc}

000db05c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   db05c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db05e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   db060:	4604      	mov	r4, r0
   db062:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   db064:	b925      	cbnz	r5, db070 <_ZN11USARTSerial5writeEh+0x14>
   db066:	7c00      	ldrb	r0, [r0, #16]
   db068:	f7fe fa2a 	bl	d94c0 <HAL_USART_Available_Data_For_Write>
   db06c:	2800      	cmp	r0, #0
   db06e:	dd05      	ble.n	db07c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db070:	4631      	mov	r1, r6
   db072:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   db074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   db078:	f7fe b9f2 	b.w	d9460 <HAL_USART_Write_Data>
  }
  return 0;
}
   db07c:	4628      	mov	r0, r5
   db07e:	bd70      	pop	{r4, r5, r6, pc}

000db080 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   db080:	b510      	push	{r4, lr}
   db082:	4604      	mov	r4, r0
   db084:	4608      	mov	r0, r1
   db086:	4611      	mov	r1, r2
   db088:	2200      	movs	r2, #0
   db08a:	6062      	str	r2, [r4, #4]
   db08c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   db090:	60a2      	str	r2, [r4, #8]
   db092:	4a05      	ldr	r2, [pc, #20]	; (db0a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   db094:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   db096:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   db098:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   db09a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   db09c:	461a      	mov	r2, r3
   db09e:	f7fe f9d7 	bl	d9450 <HAL_USART_Init>
}
   db0a2:	4620      	mov	r0, r4
   db0a4:	bd10      	pop	{r4, pc}
   db0a6:	bf00      	nop
   db0a8:	000de7ec 	.word	0x000de7ec

000db0ac <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   db0ac:	7c00      	ldrb	r0, [r0, #16]
   db0ae:	f7fe b9ff 	b.w	d94b0 <HAL_USART_Is_Enabled>
	...

000db0b4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   db0b4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   db0b6:	4d0c      	ldr	r5, [pc, #48]	; (db0e8 <_Z22__fetch_global_Serial1v+0x34>)
   db0b8:	6829      	ldr	r1, [r5, #0]
   db0ba:	f011 0401 	ands.w	r4, r1, #1
   db0be:	d111      	bne.n	db0e4 <_Z22__fetch_global_Serial1v+0x30>
   db0c0:	4628      	mov	r0, r5
   db0c2:	f7f8 fff9 	bl	d40b8 <__cxa_guard_acquire>
   db0c6:	b168      	cbz	r0, db0e4 <_Z22__fetch_global_Serial1v+0x30>
   db0c8:	4a08      	ldr	r2, [pc, #32]	; (db0ec <_Z22__fetch_global_Serial1v+0x38>)
   db0ca:	4b09      	ldr	r3, [pc, #36]	; (db0f0 <_Z22__fetch_global_Serial1v+0x3c>)
   db0cc:	4809      	ldr	r0, [pc, #36]	; (db0f4 <_Z22__fetch_global_Serial1v+0x40>)
   db0ce:	4621      	mov	r1, r4
   db0d0:	f7ff ffd6 	bl	db080 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   db0d4:	4628      	mov	r0, r5
   db0d6:	f7f8 fff4 	bl	d40c2 <__cxa_guard_release>
   db0da:	4a07      	ldr	r2, [pc, #28]	; (db0f8 <_Z22__fetch_global_Serial1v+0x44>)
   db0dc:	4907      	ldr	r1, [pc, #28]	; (db0fc <_Z22__fetch_global_Serial1v+0x48>)
   db0de:	4805      	ldr	r0, [pc, #20]	; (db0f4 <_Z22__fetch_global_Serial1v+0x40>)
   db0e0:	f000 fa84 	bl	db5ec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   db0e4:	4803      	ldr	r0, [pc, #12]	; (db0f4 <_Z22__fetch_global_Serial1v+0x40>)
   db0e6:	bd38      	pop	{r3, r4, r5, pc}
   db0e8:	2003e678 	.word	0x2003e678
   db0ec:	2003e67c 	.word	0x2003e67c
   db0f0:	2003e5f4 	.word	0x2003e5f4
   db0f4:	2003e5e0 	.word	0x2003e5e0
   db0f8:	2003e108 	.word	0x2003e108
   db0fc:	000db02d 	.word	0x000db02d

000db100 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   db100:	7441      	strb	r1, [r0, #17]
   db102:	4770      	bx	lr

000db104 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   db104:	4770      	bx	lr

000db106 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   db106:	2100      	movs	r1, #0
   db108:	7c00      	ldrb	r0, [r0, #16]
   db10a:	f7fe ba01 	b.w	d9510 <HAL_USB_USART_Receive_Data>

000db10e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   db10e:	2101      	movs	r1, #1
   db110:	7c00      	ldrb	r0, [r0, #16]
   db112:	f7fe b9fd 	b.w	d9510 <HAL_USB_USART_Receive_Data>

000db116 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   db116:	7c00      	ldrb	r0, [r0, #16]
   db118:	f7fe b9f2 	b.w	d9500 <HAL_USB_USART_Available_Data_For_Write>

000db11c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   db11c:	7c00      	ldrb	r0, [r0, #16]
   db11e:	f7fe b9e7 	b.w	d94f0 <HAL_USB_USART_Available_Data>

000db122 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   db122:	b538      	push	{r3, r4, r5, lr}
   db124:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db126:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   db128:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   db12a:	f7fe f9e9 	bl	d9500 <HAL_USB_USART_Available_Data_For_Write>
   db12e:	2800      	cmp	r0, #0
   db130:	dc01      	bgt.n	db136 <_ZN9USBSerial5writeEh+0x14>
   db132:	7c60      	ldrb	r0, [r4, #17]
   db134:	b120      	cbz	r0, db140 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   db136:	4629      	mov	r1, r5
   db138:	7c20      	ldrb	r0, [r4, #16]
   db13a:	f7fe f9f1 	bl	d9520 <HAL_USB_USART_Send_Data>
    return 1;
   db13e:	2001      	movs	r0, #1
  }
  return 0;
}
   db140:	bd38      	pop	{r3, r4, r5, pc}

000db142 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   db142:	7c00      	ldrb	r0, [r0, #16]
   db144:	f7fe b9f4 	b.w	d9530 <HAL_USB_USART_Flush_Data>

000db148 <_ZN9USBSerialD0Ev>:
   db148:	b510      	push	{r4, lr}
   db14a:	4604      	mov	r4, r0
   db14c:	f7f8 ffa7 	bl	d409e <_ZdlPv>
   db150:	4620      	mov	r0, r4
   db152:	bd10      	pop	{r4, pc}

000db154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db154:	b510      	push	{r4, lr}
   db156:	4604      	mov	r4, r0
   db158:	2300      	movs	r3, #0
   db15a:	6063      	str	r3, [r4, #4]
   db15c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   db160:	60a3      	str	r3, [r4, #8]
   db162:	4b05      	ldr	r3, [pc, #20]	; (db178 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   db164:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   db166:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   db168:	4608      	mov	r0, r1
{
  _serial = serial;
   db16a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   db16c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   db16e:	4611      	mov	r1, r2
   db170:	f7fe f9ae 	bl	d94d0 <HAL_USB_USART_Init>
}
   db174:	4620      	mov	r0, r4
   db176:	bd10      	pop	{r4, pc}
   db178:	000de81c 	.word	0x000de81c

000db17c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   db17c:	2200      	movs	r2, #0
   db17e:	7c00      	ldrb	r0, [r0, #16]
   db180:	f7fe b9ae 	b.w	d94e0 <HAL_USB_USART_Begin>

000db184 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db184:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   db186:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   db188:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   db18a:	2100      	movs	r1, #0
   db18c:	f001 f8a4 	bl	dc2d8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   db190:	4620      	mov	r0, r4
   db192:	bd10      	pop	{r4, pc}

000db194 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   db194:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db196:	4d0e      	ldr	r5, [pc, #56]	; (db1d0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   db198:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   db19a:	a801      	add	r0, sp, #4
   db19c:	f7ff fff2 	bl	db184 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   db1a0:	6829      	ldr	r1, [r5, #0]
   db1a2:	f011 0401 	ands.w	r4, r1, #1
   db1a6:	d110      	bne.n	db1ca <_Z16_fetch_usbserialv+0x36>
   db1a8:	4628      	mov	r0, r5
   db1aa:	f7f8 ff85 	bl	d40b8 <__cxa_guard_acquire>
   db1ae:	b160      	cbz	r0, db1ca <_Z16_fetch_usbserialv+0x36>
   db1b0:	aa01      	add	r2, sp, #4
   db1b2:	4621      	mov	r1, r4
   db1b4:	4807      	ldr	r0, [pc, #28]	; (db1d4 <_Z16_fetch_usbserialv+0x40>)
   db1b6:	f7ff ffcd 	bl	db154 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   db1ba:	4628      	mov	r0, r5
   db1bc:	f7f8 ff81 	bl	d40c2 <__cxa_guard_release>
   db1c0:	4a05      	ldr	r2, [pc, #20]	; (db1d8 <_Z16_fetch_usbserialv+0x44>)
   db1c2:	4906      	ldr	r1, [pc, #24]	; (db1dc <_Z16_fetch_usbserialv+0x48>)
   db1c4:	4803      	ldr	r0, [pc, #12]	; (db1d4 <_Z16_fetch_usbserialv+0x40>)
   db1c6:	f000 fa11 	bl	db5ec <__aeabi_atexit>
	return _usbserial;
}
   db1ca:	4802      	ldr	r0, [pc, #8]	; (db1d4 <_Z16_fetch_usbserialv+0x40>)
   db1cc:	b007      	add	sp, #28
   db1ce:	bd30      	pop	{r4, r5, pc}
   db1d0:	2003e700 	.word	0x2003e700
   db1d4:	2003e704 	.word	0x2003e704
   db1d8:	2003e108 	.word	0x2003e108
   db1dc:	000db105 	.word	0x000db105

000db1e0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   db1e0:	b510      	push	{r4, lr}
   db1e2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   db1e4:	f001 f905 	bl	dc3f2 <strlen>
   db1e8:	3801      	subs	r0, #1
   db1ea:	1823      	adds	r3, r4, r0
   db1ec:	4620      	mov	r0, r4
	while(i<j){
   db1ee:	4298      	cmp	r0, r3
   db1f0:	d206      	bcs.n	db200 <_Z11str_reversePc+0x20>
		c = *i;
   db1f2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   db1f4:	7819      	ldrb	r1, [r3, #0]
   db1f6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   db1fa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   db1fe:	e7f6      	b.n	db1ee <_Z11str_reversePc+0xe>
   db200:	bd10      	pop	{r4, pc}

000db202 <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   db202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   db206:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   db208:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   db20a:	4615      	mov	r5, r2
   db20c:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   db20e:	bf34      	ite	cc
   db210:	4615      	movcc	r5, r2
   db212:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   db214:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   db216:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   db218:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   db21a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   db21e:	d107      	bne.n	db230 <ltoa+0x2e>
   db220:	4298      	cmp	r0, r3
   db222:	da05      	bge.n	db230 <ltoa+0x2e>
      {
            *head++ = '-';
   db224:	232d      	movs	r3, #45	; 0x2d
   db226:	f101 0801 	add.w	r8, r1, #1
   db22a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   db22c:	4240      	negs	r0, r0
   db22e:	e001      	b.n	db234 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   db230:	b1b0      	cbz	r0, db260 <ltoa+0x5e>
   db232:	46a0      	mov	r8, r4
   db234:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   db238:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   db23a:	462a      	mov	r2, r5
   db23c:	4601      	mov	r1, r0
   db23e:	a801      	add	r0, sp, #4
   db240:	f001 f81c 	bl	dc27c <ldiv>
   db244:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   db246:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   db248:	2b09      	cmp	r3, #9
   db24a:	bfcc      	ite	gt
   db24c:	2237      	movgt	r2, #55	; 0x37
   db24e:	2230      	movle	r2, #48	; 0x30
   db250:	fa52 f383 	uxtab	r3, r2, r3
   db254:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   db258:	3701      	adds	r7, #1
   db25a:	2800      	cmp	r0, #0
   db25c:	d1ed      	bne.n	db23a <ltoa+0x38>
   db25e:	e006      	b.n	db26e <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   db260:	2330      	movs	r3, #48	; 0x30
   db262:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   db266:	46a0      	mov	r8, r4
   db268:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   db26c:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   db26e:	463a      	mov	r2, r7
   db270:	1c71      	adds	r1, r6, #1
   db272:	4640      	mov	r0, r8
   db274:	f001 f825 	bl	dc2c2 <memcpy>
      return str;
}
   db278:	4620      	mov	r0, r4
   db27a:	b00c      	add	sp, #48	; 0x30
   db27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000db280 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   db280:	b570      	push	{r4, r5, r6, lr}
   db282:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   db284:	1e91      	subs	r1, r2, #2
   db286:	2922      	cmp	r1, #34	; 0x22
   db288:	d820      	bhi.n	db2cc <ultoa+0x4c>
   db28a:	4625      	mov	r5, r4
   db28c:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   db28e:	b910      	cbnz	r0, db296 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db290:	4423      	add	r3, r4
            *ptr++ = '0';
   db292:	2230      	movs	r2, #48	; 0x30
   db294:	e00e      	b.n	db2b4 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   db296:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   db29a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   db29e:	b2c1      	uxtb	r1, r0
   db2a0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   db2a4:	2809      	cmp	r0, #9
                *ptr += '0';
   db2a6:	bf94      	ite	ls
   db2a8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   db2aa:	3157      	addhi	r1, #87	; 0x57
   db2ac:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   db2b0:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   db2b2:	e7eb      	b.n	db28c <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db2b4:	4299      	cmp	r1, r3
   db2b6:	d202      	bcs.n	db2be <ultoa+0x3e>
            *ptr++ = '0';
   db2b8:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   db2bc:	e7fa      	b.n	db2b4 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   db2be:	2300      	movs	r3, #0
	str_reverse(buffer);
   db2c0:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   db2c2:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   db2c4:	f7ff ff8c 	bl	db1e0 <_Z11str_reversePc>
	return buffer;
   db2c8:	4620      	mov	r0, r4
   db2ca:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   db2cc:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   db2ce:	bd70      	pop	{r4, r5, r6, pc}

000db2d0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   db2d0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   db2d2:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   db2d4:	460c      	mov	r4, r1
   db2d6:	4615      	mov	r5, r2
	if(a<0){
   db2d8:	da0b      	bge.n	db2f2 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   db2da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   db2de:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   db2e2:	bf14      	ite	ne
   db2e4:	4258      	negne	r0, r3
   db2e6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   db2e8:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   db2ea:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   db2ec:	462a      	mov	r2, r5
   db2ee:	4419      	add	r1, r3
   db2f0:	e000      	b.n	db2f4 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   db2f2:	2301      	movs	r3, #1
   db2f4:	f7ff ffc4 	bl	db280 <ultoa>
	}
	return buffer;
}
   db2f8:	4620      	mov	r0, r4
   db2fa:	bd38      	pop	{r3, r4, r5, pc}

000db2fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   db2fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   db2fe:	4b0c      	ldr	r3, [pc, #48]	; (db330 <serialEventRun+0x34>)
   db300:	b133      	cbz	r3, db310 <serialEventRun+0x14>
   db302:	f7ff ff47 	bl	db194 <_Z16_fetch_usbserialv>
   db306:	6803      	ldr	r3, [r0, #0]
   db308:	691b      	ldr	r3, [r3, #16]
   db30a:	4798      	blx	r3
   db30c:	2800      	cmp	r0, #0
   db30e:	dc09      	bgt.n	db324 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   db310:	4b08      	ldr	r3, [pc, #32]	; (db334 <serialEventRun+0x38>)
   db312:	b163      	cbz	r3, db32e <serialEventRun+0x32>
   db314:	f7ff fece 	bl	db0b4 <_Z22__fetch_global_Serial1v>
   db318:	6803      	ldr	r3, [r0, #0]
   db31a:	691b      	ldr	r3, [r3, #16]
   db31c:	4798      	blx	r3
   db31e:	2800      	cmp	r0, #0
   db320:	dc03      	bgt.n	db32a <serialEventRun+0x2e>
   db322:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   db324:	f3af 8000 	nop.w
   db328:	e7f2      	b.n	db310 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   db32a:	f3af 8000 	nop.w
   db32e:	bd08      	pop	{r3, pc}
	...

000db338 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   db338:	b508      	push	{r3, lr}
	serialEventRun();
   db33a:	f7ff ffdf 	bl	db2fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   db33e:	f7fd fee7 	bl	d9110 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   db342:	4b01      	ldr	r3, [pc, #4]	; (db348 <_post_loop+0x10>)
   db344:	6018      	str	r0, [r3, #0]
   db346:	bd08      	pop	{r3, pc}
   db348:	2003e71c 	.word	0x2003e71c

000db34c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   db34c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db34e:	2300      	movs	r3, #0
   db350:	9300      	str	r3, [sp, #0]
   db352:	461a      	mov	r2, r3
   db354:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db358:	f7fe f934 	bl	d95c4 <system_ctrl_set_result>
}
   db35c:	b003      	add	sp, #12
   db35e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000db364 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   db364:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   db366:	8843      	ldrh	r3, [r0, #2]
   db368:	2b0a      	cmp	r3, #10
   db36a:	d008      	beq.n	db37e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   db36c:	2b50      	cmp	r3, #80	; 0x50
   db36e:	d109      	bne.n	db384 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   db370:	4b09      	ldr	r3, [pc, #36]	; (db398 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   db372:	681b      	ldr	r3, [r3, #0]
   db374:	b13b      	cbz	r3, db386 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   db376:	b003      	add	sp, #12
   db378:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   db37c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   db37e:	f7ff ffe5 	bl	db34c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   db382:	e006      	b.n	db392 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   db384:	2300      	movs	r3, #0
   db386:	9300      	str	r3, [sp, #0]
   db388:	461a      	mov	r2, r3
   db38a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   db38e:	f7fe f919 	bl	d95c4 <system_ctrl_set_result>
        break;
    }
}
   db392:	b003      	add	sp, #12
   db394:	f85d fb04 	ldr.w	pc, [sp], #4
   db398:	2003e718 	.word	0x2003e718

000db39c <module_user_init_hook>:

void module_user_init_hook()
{
   db39c:	b508      	push	{r3, lr}
        uint32_t seed = HAL_RNG_GetRandomNumber();
        random_seed_from_cloud(seed);
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   db39e:	2100      	movs	r1, #0
   db3a0:	4804      	ldr	r0, [pc, #16]	; (db3b4 <module_user_init_hook+0x18>)
   db3a2:	f7fe f95d 	bl	d9660 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db3a6:	2100      	movs	r1, #0
   db3a8:	4803      	ldr	r0, [pc, #12]	; (db3b8 <module_user_init_hook+0x1c>)
}
   db3aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   db3ae:	f7fe b8ff 	b.w	d95b0 <system_ctrl_set_app_request_handler>
   db3b2:	bf00      	nop
   db3b4:	00000000 	.word	0x00000000
   db3b8:	000db365 	.word	0x000db365

000db3bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   db3bc:	b510      	push	{r4, lr}
   db3be:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   db3c0:	480f      	ldr	r0, [pc, #60]	; (db400 <pinAvailable+0x44>)
   db3c2:	f7ff f915 	bl	da5f0 <_ZN8SPIClass9isEnabledEv>
   db3c6:	b128      	cbz	r0, db3d4 <pinAvailable+0x18>
   db3c8:	f1a4 030b 	sub.w	r3, r4, #11
   db3cc:	2b02      	cmp	r3, #2
   db3ce:	d801      	bhi.n	db3d4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   db3d0:	2000      	movs	r0, #0
   db3d2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   db3d4:	f000 f8c8 	bl	db568 <_Z19__fetch_global_Wirev>
   db3d8:	f7fe fce8 	bl	d9dac <_ZN7TwoWire9isEnabledEv>
   db3dc:	b108      	cbz	r0, db3e2 <pinAvailable+0x26>
   db3de:	2c01      	cmp	r4, #1
   db3e0:	d9f6      	bls.n	db3d0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   db3e2:	f7ff fe67 	bl	db0b4 <_Z22__fetch_global_Serial1v>
   db3e6:	f7ff fe61 	bl	db0ac <_ZN11USARTSerial9isEnabledEv>
   db3ea:	b118      	cbz	r0, db3f4 <pinAvailable+0x38>
   db3ec:	f1a4 0309 	sub.w	r3, r4, #9
   db3f0:	2b01      	cmp	r3, #1
   db3f2:	d9ed      	bls.n	db3d0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   db3f4:	2c1e      	cmp	r4, #30
   db3f6:	bf8c      	ite	hi
   db3f8:	2000      	movhi	r0, #0
   db3fa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   db3fc:	bd10      	pop	{r4, pc}
   db3fe:	bf00      	nop
   db400:	2003e740 	.word	0x2003e740

000db404 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db404:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   db406:	b538      	push	{r3, r4, r5, lr}
   db408:	4604      	mov	r4, r0
   db40a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   db40c:	d80a      	bhi.n	db424 <pinMode+0x20>
   db40e:	29ff      	cmp	r1, #255	; 0xff
   db410:	d008      	beq.n	db424 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db412:	f7ff ffd3 	bl	db3bc <pinAvailable>
   db416:	b128      	cbz	r0, db424 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db418:	4629      	mov	r1, r5
   db41a:	4620      	mov	r0, r4
}
   db41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   db420:	f7fd be9e 	b.w	d9160 <HAL_Pin_Mode>
   db424:	bd38      	pop	{r3, r4, r5, pc}

000db426 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   db426:	b538      	push	{r3, r4, r5, lr}
   db428:	4604      	mov	r4, r0
   db42a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db42c:	f7fd fea0 	bl	d9170 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   db430:	28ff      	cmp	r0, #255	; 0xff
   db432:	d010      	beq.n	db456 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   db434:	2806      	cmp	r0, #6
   db436:	d804      	bhi.n	db442 <digitalWrite+0x1c>
   db438:	234d      	movs	r3, #77	; 0x4d
   db43a:	fa23 f000 	lsr.w	r0, r3, r0
   db43e:	07c3      	lsls	r3, r0, #31
   db440:	d409      	bmi.n	db456 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   db442:	4620      	mov	r0, r4
   db444:	f7ff ffba 	bl	db3bc <pinAvailable>
   db448:	b128      	cbz	r0, db456 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   db44a:	4629      	mov	r1, r5
   db44c:	4620      	mov	r0, r4
}
   db44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   db452:	f7fd be95 	b.w	d9180 <HAL_GPIO_Write>
   db456:	bd38      	pop	{r3, r4, r5, pc}

000db458 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   db458:	b510      	push	{r4, lr}
   db45a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   db45c:	f7fd fe88 	bl	d9170 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   db460:	3804      	subs	r0, #4
   db462:	b2c0      	uxtb	r0, r0
   db464:	2801      	cmp	r0, #1
   db466:	d908      	bls.n	db47a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   db468:	4620      	mov	r0, r4
   db46a:	f7ff ffa7 	bl	db3bc <pinAvailable>
   db46e:	b120      	cbz	r0, db47a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db470:	4620      	mov	r0, r4
}
   db472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   db476:	f7fd be8b 	b.w	d9190 <HAL_GPIO_Read>
}
   db47a:	2000      	movs	r0, #0
   db47c:	bd10      	pop	{r4, pc}

000db47e <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   db47e:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   db480:	b510      	push	{r4, lr}
   db482:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   db484:	bf9c      	itt	ls
   db486:	340e      	addls	r4, #14
   db488:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   db48a:	4620      	mov	r0, r4
   db48c:	f7ff ff96 	bl	db3bc <pinAvailable>
   db490:	b150      	cbz	r0, db4a8 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   db492:	2103      	movs	r1, #3
   db494:	4620      	mov	r0, r4
   db496:	f7fd fe5b 	bl	d9150 <HAL_Validate_Pin_Function>
   db49a:	2803      	cmp	r0, #3
   db49c:	d104      	bne.n	db4a8 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db49e:	4620      	mov	r0, r4
}
   db4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   db4a4:	f7fd be94 	b.w	d91d0 <HAL_ADC_Read>
}
   db4a8:	2000      	movs	r0, #0
   db4aa:	bd10      	pop	{r4, pc}

000db4ac <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   db4ac:	b538      	push	{r3, r4, r5, lr}
   db4ae:	4604      	mov	r4, r0
   db4b0:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   db4b2:	f7ff ff83 	bl	db3bc <pinAvailable>
   db4b6:	b1f0      	cbz	r0, db4f6 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   db4b8:	2104      	movs	r1, #4
   db4ba:	4620      	mov	r0, r4
   db4bc:	f7fd fe48 	bl	d9150 <HAL_Validate_Pin_Function>
   db4c0:	2804      	cmp	r0, #4
   db4c2:	d105      	bne.n	db4d0 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   db4c4:	b2a9      	uxth	r1, r5
   db4c6:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   db4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   db4cc:	f7fd be78 	b.w	d91c0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   db4d0:	2102      	movs	r1, #2
   db4d2:	4620      	mov	r0, r4
   db4d4:	f7fd fe3c 	bl	d9150 <HAL_Validate_Pin_Function>
   db4d8:	2802      	cmp	r0, #2
   db4da:	d10c      	bne.n	db4f6 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   db4dc:	4620      	mov	r0, r4
   db4de:	f7fd fe47 	bl	d9170 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   db4e2:	2801      	cmp	r0, #1
   db4e4:	d001      	beq.n	db4ea <_Z11analogWritetm+0x3e>
   db4e6:	2804      	cmp	r0, #4
   db4e8:	d105      	bne.n	db4f6 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   db4ea:	4629      	mov	r1, r5
   db4ec:	4620      	mov	r0, r4
    }
}
   db4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   db4f2:	f7fd be75 	b.w	d91e0 <HAL_PWM_Write_Ext>
   db4f6:	bd38      	pop	{r3, r4, r5, pc}

000db4f8 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   db4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   db4fc:	4690      	mov	r8, r2
   db4fe:	461e      	mov	r6, r3
   db500:	2407      	movs	r4, #7
   db502:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   db504:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   db506:	f1b8 0f00 	cmp.w	r8, #0
   db50a:	d104      	bne.n	db516 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   db50c:	f1c4 0107 	rsb	r1, r4, #7
   db510:	fa46 f101 	asr.w	r1, r6, r1
   db514:	e001      	b.n	db51a <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   db516:	fa46 f104 	asr.w	r1, r6, r4
   db51a:	f001 0101 	and.w	r1, r1, #1
   db51e:	4638      	mov	r0, r7
   db520:	f7ff ff81 	bl	db426 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   db524:	2101      	movs	r1, #1
   db526:	4628      	mov	r0, r5
   db528:	f7ff ff7d 	bl	db426 <digitalWrite>
    digitalWrite(clockPin, LOW);
   db52c:	2100      	movs	r1, #0
   db52e:	4628      	mov	r0, r5
   db530:	f7ff ff79 	bl	db426 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   db534:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   db538:	d2e5      	bcs.n	db506 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   db53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000db540 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   db540:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   db542:	4c07      	ldr	r4, [pc, #28]	; (db560 <_Z21__fetch_global_EEPROMv+0x20>)
   db544:	6823      	ldr	r3, [r4, #0]
   db546:	07db      	lsls	r3, r3, #31
   db548:	d408      	bmi.n	db55c <_Z21__fetch_global_EEPROMv+0x1c>
   db54a:	4620      	mov	r0, r4
   db54c:	f7f8 fdb4 	bl	d40b8 <__cxa_guard_acquire>
   db550:	b120      	cbz	r0, db55c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   db552:	f7fd fde5 	bl	d9120 <HAL_EEPROM_Init>
   db556:	4620      	mov	r0, r4
   db558:	f7f8 fdb3 	bl	d40c2 <__cxa_guard_release>
	return eeprom;
}
   db55c:	4801      	ldr	r0, [pc, #4]	; (db564 <_Z21__fetch_global_EEPROMv+0x24>)
   db55e:	bd10      	pop	{r4, pc}
   db560:	2003e720 	.word	0x2003e720
   db564:	2003e724 	.word	0x2003e724

000db568 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   db568:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   db56a:	4d0b      	ldr	r5, [pc, #44]	; (db598 <_Z19__fetch_global_Wirev+0x30>)
   db56c:	6829      	ldr	r1, [r5, #0]
   db56e:	f011 0401 	ands.w	r4, r1, #1
   db572:	d10f      	bne.n	db594 <_Z19__fetch_global_Wirev+0x2c>
   db574:	4628      	mov	r0, r5
   db576:	f7f8 fd9f 	bl	d40b8 <__cxa_guard_acquire>
   db57a:	b158      	cbz	r0, db594 <_Z19__fetch_global_Wirev+0x2c>
   db57c:	4621      	mov	r1, r4
   db57e:	4807      	ldr	r0, [pc, #28]	; (db59c <_Z19__fetch_global_Wirev+0x34>)
   db580:	f7fe fbe0 	bl	d9d44 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   db584:	4628      	mov	r0, r5
   db586:	f7f8 fd9c 	bl	d40c2 <__cxa_guard_release>
   db58a:	4a05      	ldr	r2, [pc, #20]	; (db5a0 <_Z19__fetch_global_Wirev+0x38>)
   db58c:	4905      	ldr	r1, [pc, #20]	; (db5a4 <_Z19__fetch_global_Wirev+0x3c>)
   db58e:	4803      	ldr	r0, [pc, #12]	; (db59c <_Z19__fetch_global_Wirev+0x34>)
   db590:	f000 f82c 	bl	db5ec <__aeabi_atexit>
	return wire;
}
   db594:	4801      	ldr	r0, [pc, #4]	; (db59c <_Z19__fetch_global_Wirev+0x34>)
   db596:	bd38      	pop	{r3, r4, r5, pc}
   db598:	2003e728 	.word	0x2003e728
   db59c:	2003e72c 	.word	0x2003e72c
   db5a0:	2003e108 	.word	0x2003e108
   db5a4:	000d9ced 	.word	0x000d9ced

000db5a8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   db5a8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   db5aa:	4c0c      	ldr	r4, [pc, #48]	; (db5dc <_GLOBAL__sub_I_SPI+0x34>)
   db5ac:	4e0c      	ldr	r6, [pc, #48]	; (db5e0 <_GLOBAL__sub_I_SPI+0x38>)
   db5ae:	4d0d      	ldr	r5, [pc, #52]	; (db5e4 <_GLOBAL__sub_I_SPI+0x3c>)
   db5b0:	2100      	movs	r1, #0
   db5b2:	4620      	mov	r0, r4
   db5b4:	f7fe ff9c 	bl	da4f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   db5b8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   db5ba:	4c0b      	ldr	r4, [pc, #44]	; (db5e8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   db5bc:	4632      	mov	r2, r6
   db5be:	4629      	mov	r1, r5
   db5c0:	f000 f814 	bl	db5ec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   db5c4:	2101      	movs	r1, #1
   db5c6:	4620      	mov	r0, r4
   db5c8:	f7fe ff92 	bl	da4f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   db5cc:	4632      	mov	r2, r6
   db5ce:	4629      	mov	r1, r5
   db5d0:	4620      	mov	r0, r4
   db5d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   db5d6:	f000 b809 	b.w	db5ec <__aeabi_atexit>
   db5da:	bf00      	nop
   db5dc:	2003e740 	.word	0x2003e740
   db5e0:	2003e108 	.word	0x2003e108
   db5e4:	000da4e1 	.word	0x000da4e1
   db5e8:	2003e750 	.word	0x2003e750

000db5ec <__aeabi_atexit>:
   db5ec:	460b      	mov	r3, r1
   db5ee:	4601      	mov	r1, r0
   db5f0:	4618      	mov	r0, r3
   db5f2:	f000 be35 	b.w	dc260 <__cxa_atexit>

000db5f6 <_ZSt25__throw_bad_function_callv>:
   db5f6:	b508      	push	{r3, lr}
   db5f8:	f7fe f882 	bl	d9700 <abort>

000db5fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   db5fc:	4b24      	ldr	r3, [pc, #144]	; (db690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   db5fe:	681a      	ldr	r2, [r3, #0]
   db600:	07d0      	lsls	r0, r2, #31
   db602:	bf5c      	itt	pl
   db604:	2201      	movpl	r2, #1
   db606:	601a      	strpl	r2, [r3, #0]
   db608:	4b22      	ldr	r3, [pc, #136]	; (db694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   db60a:	681a      	ldr	r2, [r3, #0]
   db60c:	07d1      	lsls	r1, r2, #31
   db60e:	bf5c      	itt	pl
   db610:	2201      	movpl	r2, #1
   db612:	601a      	strpl	r2, [r3, #0]
   db614:	4b20      	ldr	r3, [pc, #128]	; (db698 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   db616:	681a      	ldr	r2, [r3, #0]
   db618:	07d2      	lsls	r2, r2, #31
   db61a:	bf5c      	itt	pl
   db61c:	2201      	movpl	r2, #1
   db61e:	601a      	strpl	r2, [r3, #0]
   db620:	4b1e      	ldr	r3, [pc, #120]	; (db69c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   db622:	681a      	ldr	r2, [r3, #0]
   db624:	07d0      	lsls	r0, r2, #31
   db626:	bf5c      	itt	pl
   db628:	2201      	movpl	r2, #1
   db62a:	601a      	strpl	r2, [r3, #0]
   db62c:	4b1c      	ldr	r3, [pc, #112]	; (db6a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   db62e:	681a      	ldr	r2, [r3, #0]
   db630:	07d1      	lsls	r1, r2, #31
   db632:	bf5c      	itt	pl
   db634:	2201      	movpl	r2, #1
   db636:	601a      	strpl	r2, [r3, #0]
   db638:	4b1a      	ldr	r3, [pc, #104]	; (db6a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   db63a:	681a      	ldr	r2, [r3, #0]
   db63c:	07d2      	lsls	r2, r2, #31
   db63e:	bf5c      	itt	pl
   db640:	2201      	movpl	r2, #1
   db642:	601a      	strpl	r2, [r3, #0]
   db644:	4b18      	ldr	r3, [pc, #96]	; (db6a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   db646:	681a      	ldr	r2, [r3, #0]
   db648:	07d0      	lsls	r0, r2, #31
   db64a:	bf5c      	itt	pl
   db64c:	2201      	movpl	r2, #1
   db64e:	601a      	strpl	r2, [r3, #0]
   db650:	4b16      	ldr	r3, [pc, #88]	; (db6ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   db652:	681a      	ldr	r2, [r3, #0]
   db654:	07d1      	lsls	r1, r2, #31
   db656:	bf5c      	itt	pl
   db658:	2201      	movpl	r2, #1
   db65a:	601a      	strpl	r2, [r3, #0]
   db65c:	4b14      	ldr	r3, [pc, #80]	; (db6b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   db65e:	681a      	ldr	r2, [r3, #0]
   db660:	07d2      	lsls	r2, r2, #31
   db662:	bf5c      	itt	pl
   db664:	2201      	movpl	r2, #1
   db666:	601a      	strpl	r2, [r3, #0]
   db668:	4b12      	ldr	r3, [pc, #72]	; (db6b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   db66a:	681a      	ldr	r2, [r3, #0]
   db66c:	07d0      	lsls	r0, r2, #31
   db66e:	bf5c      	itt	pl
   db670:	2201      	movpl	r2, #1
   db672:	601a      	strpl	r2, [r3, #0]
   db674:	4b10      	ldr	r3, [pc, #64]	; (db6b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   db676:	681a      	ldr	r2, [r3, #0]
   db678:	07d1      	lsls	r1, r2, #31
   db67a:	bf5c      	itt	pl
   db67c:	2201      	movpl	r2, #1
   db67e:	601a      	strpl	r2, [r3, #0]
   db680:	4b0e      	ldr	r3, [pc, #56]	; (db6bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   db682:	681a      	ldr	r2, [r3, #0]
   db684:	07d2      	lsls	r2, r2, #31
   db686:	bf5c      	itt	pl
   db688:	2201      	movpl	r2, #1
   db68a:	601a      	strpl	r2, [r3, #0]
   db68c:	4770      	bx	lr
   db68e:	bf00      	nop
   db690:	2003e78c 	.word	0x2003e78c
   db694:	2003e788 	.word	0x2003e788
   db698:	2003e784 	.word	0x2003e784
   db69c:	2003e780 	.word	0x2003e780
   db6a0:	2003e77c 	.word	0x2003e77c
   db6a4:	2003e778 	.word	0x2003e778
   db6a8:	2003e774 	.word	0x2003e774
   db6ac:	2003e770 	.word	0x2003e770
   db6b0:	2003e76c 	.word	0x2003e76c
   db6b4:	2003e768 	.word	0x2003e768
   db6b8:	2003e764 	.word	0x2003e764
   db6bc:	2003e760 	.word	0x2003e760

000db6c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   db6c0:	4b18      	ldr	r3, [pc, #96]	; (db724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   db6c2:	681a      	ldr	r2, [r3, #0]
   db6c4:	07d1      	lsls	r1, r2, #31
   db6c6:	bf5c      	itt	pl
   db6c8:	2201      	movpl	r2, #1
   db6ca:	601a      	strpl	r2, [r3, #0]
   db6cc:	4b16      	ldr	r3, [pc, #88]	; (db728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   db6ce:	681a      	ldr	r2, [r3, #0]
   db6d0:	07d2      	lsls	r2, r2, #31
   db6d2:	bf5c      	itt	pl
   db6d4:	2201      	movpl	r2, #1
   db6d6:	601a      	strpl	r2, [r3, #0]
   db6d8:	4b14      	ldr	r3, [pc, #80]	; (db72c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   db6da:	681a      	ldr	r2, [r3, #0]
   db6dc:	07d0      	lsls	r0, r2, #31
   db6de:	bf5c      	itt	pl
   db6e0:	2201      	movpl	r2, #1
   db6e2:	601a      	strpl	r2, [r3, #0]
   db6e4:	4b12      	ldr	r3, [pc, #72]	; (db730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   db6e6:	681a      	ldr	r2, [r3, #0]
   db6e8:	07d1      	lsls	r1, r2, #31
   db6ea:	bf5c      	itt	pl
   db6ec:	2201      	movpl	r2, #1
   db6ee:	601a      	strpl	r2, [r3, #0]
   db6f0:	4b10      	ldr	r3, [pc, #64]	; (db734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   db6f2:	681a      	ldr	r2, [r3, #0]
   db6f4:	07d2      	lsls	r2, r2, #31
   db6f6:	bf5c      	itt	pl
   db6f8:	2201      	movpl	r2, #1
   db6fa:	601a      	strpl	r2, [r3, #0]
   db6fc:	4b0e      	ldr	r3, [pc, #56]	; (db738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   db6fe:	681a      	ldr	r2, [r3, #0]
   db700:	07d0      	lsls	r0, r2, #31
   db702:	bf5c      	itt	pl
   db704:	2201      	movpl	r2, #1
   db706:	601a      	strpl	r2, [r3, #0]
   db708:	4b0c      	ldr	r3, [pc, #48]	; (db73c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   db70a:	681a      	ldr	r2, [r3, #0]
   db70c:	07d1      	lsls	r1, r2, #31
   db70e:	bf5c      	itt	pl
   db710:	2201      	movpl	r2, #1
   db712:	601a      	strpl	r2, [r3, #0]
   db714:	4b0a      	ldr	r3, [pc, #40]	; (db740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   db716:	681a      	ldr	r2, [r3, #0]
   db718:	07d2      	lsls	r2, r2, #31
   db71a:	bf5c      	itt	pl
   db71c:	2201      	movpl	r2, #1
   db71e:	601a      	strpl	r2, [r3, #0]
   db720:	4770      	bx	lr
   db722:	bf00      	nop
   db724:	2003e7ac 	.word	0x2003e7ac
   db728:	2003e7a8 	.word	0x2003e7a8
   db72c:	2003e7a4 	.word	0x2003e7a4
   db730:	2003e7a0 	.word	0x2003e7a0
   db734:	2003e79c 	.word	0x2003e79c
   db738:	2003e798 	.word	0x2003e798
   db73c:	2003e794 	.word	0x2003e794
   db740:	2003e790 	.word	0x2003e790

000db744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   db744:	4b18      	ldr	r3, [pc, #96]	; (db7a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   db746:	681a      	ldr	r2, [r3, #0]
   db748:	07d1      	lsls	r1, r2, #31
   db74a:	bf5c      	itt	pl
   db74c:	2201      	movpl	r2, #1
   db74e:	601a      	strpl	r2, [r3, #0]
   db750:	4b16      	ldr	r3, [pc, #88]	; (db7ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   db752:	681a      	ldr	r2, [r3, #0]
   db754:	07d2      	lsls	r2, r2, #31
   db756:	bf5c      	itt	pl
   db758:	2201      	movpl	r2, #1
   db75a:	601a      	strpl	r2, [r3, #0]
   db75c:	4b14      	ldr	r3, [pc, #80]	; (db7b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   db75e:	681a      	ldr	r2, [r3, #0]
   db760:	07d0      	lsls	r0, r2, #31
   db762:	bf5c      	itt	pl
   db764:	2201      	movpl	r2, #1
   db766:	601a      	strpl	r2, [r3, #0]
   db768:	4b12      	ldr	r3, [pc, #72]	; (db7b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   db76a:	681a      	ldr	r2, [r3, #0]
   db76c:	07d1      	lsls	r1, r2, #31
   db76e:	bf5c      	itt	pl
   db770:	2201      	movpl	r2, #1
   db772:	601a      	strpl	r2, [r3, #0]
   db774:	4b10      	ldr	r3, [pc, #64]	; (db7b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   db776:	681a      	ldr	r2, [r3, #0]
   db778:	07d2      	lsls	r2, r2, #31
   db77a:	bf5c      	itt	pl
   db77c:	2201      	movpl	r2, #1
   db77e:	601a      	strpl	r2, [r3, #0]
   db780:	4b0e      	ldr	r3, [pc, #56]	; (db7bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   db782:	681a      	ldr	r2, [r3, #0]
   db784:	07d0      	lsls	r0, r2, #31
   db786:	bf5c      	itt	pl
   db788:	2201      	movpl	r2, #1
   db78a:	601a      	strpl	r2, [r3, #0]
   db78c:	4b0c      	ldr	r3, [pc, #48]	; (db7c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   db78e:	681a      	ldr	r2, [r3, #0]
   db790:	07d1      	lsls	r1, r2, #31
   db792:	bf5c      	itt	pl
   db794:	2201      	movpl	r2, #1
   db796:	601a      	strpl	r2, [r3, #0]
   db798:	4b0a      	ldr	r3, [pc, #40]	; (db7c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   db79a:	681a      	ldr	r2, [r3, #0]
   db79c:	07d2      	lsls	r2, r2, #31
   db79e:	bf5c      	itt	pl
   db7a0:	2201      	movpl	r2, #1
   db7a2:	601a      	strpl	r2, [r3, #0]
   db7a4:	4770      	bx	lr
   db7a6:	bf00      	nop
   db7a8:	2003e7cc 	.word	0x2003e7cc
   db7ac:	2003e7c8 	.word	0x2003e7c8
   db7b0:	2003e7c4 	.word	0x2003e7c4
   db7b4:	2003e7c0 	.word	0x2003e7c0
   db7b8:	2003e7bc 	.word	0x2003e7bc
   db7bc:	2003e7b8 	.word	0x2003e7b8
   db7c0:	2003e7b4 	.word	0x2003e7b4
   db7c4:	2003e7b0 	.word	0x2003e7b0

000db7c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   db7c8:	4b24      	ldr	r3, [pc, #144]	; (db85c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   db7ca:	681a      	ldr	r2, [r3, #0]
   db7cc:	07d0      	lsls	r0, r2, #31
   db7ce:	bf5c      	itt	pl
   db7d0:	2201      	movpl	r2, #1
   db7d2:	601a      	strpl	r2, [r3, #0]
   db7d4:	4b22      	ldr	r3, [pc, #136]	; (db860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   db7d6:	681a      	ldr	r2, [r3, #0]
   db7d8:	07d1      	lsls	r1, r2, #31
   db7da:	bf5c      	itt	pl
   db7dc:	2201      	movpl	r2, #1
   db7de:	601a      	strpl	r2, [r3, #0]
   db7e0:	4b20      	ldr	r3, [pc, #128]	; (db864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   db7e2:	681a      	ldr	r2, [r3, #0]
   db7e4:	07d2      	lsls	r2, r2, #31
   db7e6:	bf5c      	itt	pl
   db7e8:	2201      	movpl	r2, #1
   db7ea:	601a      	strpl	r2, [r3, #0]
   db7ec:	4b1e      	ldr	r3, [pc, #120]	; (db868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   db7ee:	681a      	ldr	r2, [r3, #0]
   db7f0:	07d0      	lsls	r0, r2, #31
   db7f2:	bf5c      	itt	pl
   db7f4:	2201      	movpl	r2, #1
   db7f6:	601a      	strpl	r2, [r3, #0]
   db7f8:	4b1c      	ldr	r3, [pc, #112]	; (db86c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   db7fa:	681a      	ldr	r2, [r3, #0]
   db7fc:	07d1      	lsls	r1, r2, #31
   db7fe:	bf5c      	itt	pl
   db800:	2201      	movpl	r2, #1
   db802:	601a      	strpl	r2, [r3, #0]
   db804:	4b1a      	ldr	r3, [pc, #104]	; (db870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   db806:	681a      	ldr	r2, [r3, #0]
   db808:	07d2      	lsls	r2, r2, #31
   db80a:	bf5c      	itt	pl
   db80c:	2201      	movpl	r2, #1
   db80e:	601a      	strpl	r2, [r3, #0]
   db810:	4b18      	ldr	r3, [pc, #96]	; (db874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   db812:	681a      	ldr	r2, [r3, #0]
   db814:	07d0      	lsls	r0, r2, #31
   db816:	bf5c      	itt	pl
   db818:	2201      	movpl	r2, #1
   db81a:	601a      	strpl	r2, [r3, #0]
   db81c:	4b16      	ldr	r3, [pc, #88]	; (db878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   db81e:	681a      	ldr	r2, [r3, #0]
   db820:	07d1      	lsls	r1, r2, #31
   db822:	bf5c      	itt	pl
   db824:	2201      	movpl	r2, #1
   db826:	601a      	strpl	r2, [r3, #0]
   db828:	4b14      	ldr	r3, [pc, #80]	; (db87c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   db82a:	681a      	ldr	r2, [r3, #0]
   db82c:	07d2      	lsls	r2, r2, #31
   db82e:	bf5c      	itt	pl
   db830:	2201      	movpl	r2, #1
   db832:	601a      	strpl	r2, [r3, #0]
   db834:	4b12      	ldr	r3, [pc, #72]	; (db880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   db836:	681a      	ldr	r2, [r3, #0]
   db838:	07d0      	lsls	r0, r2, #31
   db83a:	bf5c      	itt	pl
   db83c:	2201      	movpl	r2, #1
   db83e:	601a      	strpl	r2, [r3, #0]
   db840:	4b10      	ldr	r3, [pc, #64]	; (db884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   db842:	681a      	ldr	r2, [r3, #0]
   db844:	07d1      	lsls	r1, r2, #31
   db846:	bf5c      	itt	pl
   db848:	2201      	movpl	r2, #1
   db84a:	601a      	strpl	r2, [r3, #0]
   db84c:	4b0e      	ldr	r3, [pc, #56]	; (db888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   db84e:	681a      	ldr	r2, [r3, #0]
   db850:	07d2      	lsls	r2, r2, #31
   db852:	bf5c      	itt	pl
   db854:	2201      	movpl	r2, #1
   db856:	601a      	strpl	r2, [r3, #0]
   db858:	4770      	bx	lr
   db85a:	bf00      	nop
   db85c:	2003e7fc 	.word	0x2003e7fc
   db860:	2003e7f8 	.word	0x2003e7f8
   db864:	2003e7f4 	.word	0x2003e7f4
   db868:	2003e7f0 	.word	0x2003e7f0
   db86c:	2003e7ec 	.word	0x2003e7ec
   db870:	2003e7e8 	.word	0x2003e7e8
   db874:	2003e7e4 	.word	0x2003e7e4
   db878:	2003e7e0 	.word	0x2003e7e0
   db87c:	2003e7dc 	.word	0x2003e7dc
   db880:	2003e7d8 	.word	0x2003e7d8
   db884:	2003e7d4 	.word	0x2003e7d4
   db888:	2003e7d0 	.word	0x2003e7d0

000db88c <__aeabi_drsub>:
   db88c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   db890:	e002      	b.n	db898 <__adddf3>
   db892:	bf00      	nop

000db894 <__aeabi_dsub>:
   db894:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000db898 <__adddf3>:
   db898:	b530      	push	{r4, r5, lr}
   db89a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   db89e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   db8a2:	ea94 0f05 	teq	r4, r5
   db8a6:	bf08      	it	eq
   db8a8:	ea90 0f02 	teqeq	r0, r2
   db8ac:	bf1f      	itttt	ne
   db8ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   db8b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   db8b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   db8ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   db8be:	f000 80e2 	beq.w	dba86 <__adddf3+0x1ee>
   db8c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   db8c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   db8ca:	bfb8      	it	lt
   db8cc:	426d      	neglt	r5, r5
   db8ce:	dd0c      	ble.n	db8ea <__adddf3+0x52>
   db8d0:	442c      	add	r4, r5
   db8d2:	ea80 0202 	eor.w	r2, r0, r2
   db8d6:	ea81 0303 	eor.w	r3, r1, r3
   db8da:	ea82 0000 	eor.w	r0, r2, r0
   db8de:	ea83 0101 	eor.w	r1, r3, r1
   db8e2:	ea80 0202 	eor.w	r2, r0, r2
   db8e6:	ea81 0303 	eor.w	r3, r1, r3
   db8ea:	2d36      	cmp	r5, #54	; 0x36
   db8ec:	bf88      	it	hi
   db8ee:	bd30      	pophi	{r4, r5, pc}
   db8f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   db8f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   db8f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   db8fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   db900:	d002      	beq.n	db908 <__adddf3+0x70>
   db902:	4240      	negs	r0, r0
   db904:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db908:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   db90c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   db910:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   db914:	d002      	beq.n	db91c <__adddf3+0x84>
   db916:	4252      	negs	r2, r2
   db918:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   db91c:	ea94 0f05 	teq	r4, r5
   db920:	f000 80a7 	beq.w	dba72 <__adddf3+0x1da>
   db924:	f1a4 0401 	sub.w	r4, r4, #1
   db928:	f1d5 0e20 	rsbs	lr, r5, #32
   db92c:	db0d      	blt.n	db94a <__adddf3+0xb2>
   db92e:	fa02 fc0e 	lsl.w	ip, r2, lr
   db932:	fa22 f205 	lsr.w	r2, r2, r5
   db936:	1880      	adds	r0, r0, r2
   db938:	f141 0100 	adc.w	r1, r1, #0
   db93c:	fa03 f20e 	lsl.w	r2, r3, lr
   db940:	1880      	adds	r0, r0, r2
   db942:	fa43 f305 	asr.w	r3, r3, r5
   db946:	4159      	adcs	r1, r3
   db948:	e00e      	b.n	db968 <__adddf3+0xd0>
   db94a:	f1a5 0520 	sub.w	r5, r5, #32
   db94e:	f10e 0e20 	add.w	lr, lr, #32
   db952:	2a01      	cmp	r2, #1
   db954:	fa03 fc0e 	lsl.w	ip, r3, lr
   db958:	bf28      	it	cs
   db95a:	f04c 0c02 	orrcs.w	ip, ip, #2
   db95e:	fa43 f305 	asr.w	r3, r3, r5
   db962:	18c0      	adds	r0, r0, r3
   db964:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   db968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   db96c:	d507      	bpl.n	db97e <__adddf3+0xe6>
   db96e:	f04f 0e00 	mov.w	lr, #0
   db972:	f1dc 0c00 	rsbs	ip, ip, #0
   db976:	eb7e 0000 	sbcs.w	r0, lr, r0
   db97a:	eb6e 0101 	sbc.w	r1, lr, r1
   db97e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   db982:	d31b      	bcc.n	db9bc <__adddf3+0x124>
   db984:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   db988:	d30c      	bcc.n	db9a4 <__adddf3+0x10c>
   db98a:	0849      	lsrs	r1, r1, #1
   db98c:	ea5f 0030 	movs.w	r0, r0, rrx
   db990:	ea4f 0c3c 	mov.w	ip, ip, rrx
   db994:	f104 0401 	add.w	r4, r4, #1
   db998:	ea4f 5244 	mov.w	r2, r4, lsl #21
   db99c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   db9a0:	f080 809a 	bcs.w	dbad8 <__adddf3+0x240>
   db9a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   db9a8:	bf08      	it	eq
   db9aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   db9ae:	f150 0000 	adcs.w	r0, r0, #0
   db9b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   db9b6:	ea41 0105 	orr.w	r1, r1, r5
   db9ba:	bd30      	pop	{r4, r5, pc}
   db9bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   db9c0:	4140      	adcs	r0, r0
   db9c2:	eb41 0101 	adc.w	r1, r1, r1
   db9c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   db9ca:	f1a4 0401 	sub.w	r4, r4, #1
   db9ce:	d1e9      	bne.n	db9a4 <__adddf3+0x10c>
   db9d0:	f091 0f00 	teq	r1, #0
   db9d4:	bf04      	itt	eq
   db9d6:	4601      	moveq	r1, r0
   db9d8:	2000      	moveq	r0, #0
   db9da:	fab1 f381 	clz	r3, r1
   db9de:	bf08      	it	eq
   db9e0:	3320      	addeq	r3, #32
   db9e2:	f1a3 030b 	sub.w	r3, r3, #11
   db9e6:	f1b3 0220 	subs.w	r2, r3, #32
   db9ea:	da0c      	bge.n	dba06 <__adddf3+0x16e>
   db9ec:	320c      	adds	r2, #12
   db9ee:	dd08      	ble.n	dba02 <__adddf3+0x16a>
   db9f0:	f102 0c14 	add.w	ip, r2, #20
   db9f4:	f1c2 020c 	rsb	r2, r2, #12
   db9f8:	fa01 f00c 	lsl.w	r0, r1, ip
   db9fc:	fa21 f102 	lsr.w	r1, r1, r2
   dba00:	e00c      	b.n	dba1c <__adddf3+0x184>
   dba02:	f102 0214 	add.w	r2, r2, #20
   dba06:	bfd8      	it	le
   dba08:	f1c2 0c20 	rsble	ip, r2, #32
   dba0c:	fa01 f102 	lsl.w	r1, r1, r2
   dba10:	fa20 fc0c 	lsr.w	ip, r0, ip
   dba14:	bfdc      	itt	le
   dba16:	ea41 010c 	orrle.w	r1, r1, ip
   dba1a:	4090      	lslle	r0, r2
   dba1c:	1ae4      	subs	r4, r4, r3
   dba1e:	bfa2      	ittt	ge
   dba20:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   dba24:	4329      	orrge	r1, r5
   dba26:	bd30      	popge	{r4, r5, pc}
   dba28:	ea6f 0404 	mvn.w	r4, r4
   dba2c:	3c1f      	subs	r4, #31
   dba2e:	da1c      	bge.n	dba6a <__adddf3+0x1d2>
   dba30:	340c      	adds	r4, #12
   dba32:	dc0e      	bgt.n	dba52 <__adddf3+0x1ba>
   dba34:	f104 0414 	add.w	r4, r4, #20
   dba38:	f1c4 0220 	rsb	r2, r4, #32
   dba3c:	fa20 f004 	lsr.w	r0, r0, r4
   dba40:	fa01 f302 	lsl.w	r3, r1, r2
   dba44:	ea40 0003 	orr.w	r0, r0, r3
   dba48:	fa21 f304 	lsr.w	r3, r1, r4
   dba4c:	ea45 0103 	orr.w	r1, r5, r3
   dba50:	bd30      	pop	{r4, r5, pc}
   dba52:	f1c4 040c 	rsb	r4, r4, #12
   dba56:	f1c4 0220 	rsb	r2, r4, #32
   dba5a:	fa20 f002 	lsr.w	r0, r0, r2
   dba5e:	fa01 f304 	lsl.w	r3, r1, r4
   dba62:	ea40 0003 	orr.w	r0, r0, r3
   dba66:	4629      	mov	r1, r5
   dba68:	bd30      	pop	{r4, r5, pc}
   dba6a:	fa21 f004 	lsr.w	r0, r1, r4
   dba6e:	4629      	mov	r1, r5
   dba70:	bd30      	pop	{r4, r5, pc}
   dba72:	f094 0f00 	teq	r4, #0
   dba76:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   dba7a:	bf06      	itte	eq
   dba7c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   dba80:	3401      	addeq	r4, #1
   dba82:	3d01      	subne	r5, #1
   dba84:	e74e      	b.n	db924 <__adddf3+0x8c>
   dba86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dba8a:	bf18      	it	ne
   dba8c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   dba90:	d029      	beq.n	dbae6 <__adddf3+0x24e>
   dba92:	ea94 0f05 	teq	r4, r5
   dba96:	bf08      	it	eq
   dba98:	ea90 0f02 	teqeq	r0, r2
   dba9c:	d005      	beq.n	dbaaa <__adddf3+0x212>
   dba9e:	ea54 0c00 	orrs.w	ip, r4, r0
   dbaa2:	bf04      	itt	eq
   dbaa4:	4619      	moveq	r1, r3
   dbaa6:	4610      	moveq	r0, r2
   dbaa8:	bd30      	pop	{r4, r5, pc}
   dbaaa:	ea91 0f03 	teq	r1, r3
   dbaae:	bf1e      	ittt	ne
   dbab0:	2100      	movne	r1, #0
   dbab2:	2000      	movne	r0, #0
   dbab4:	bd30      	popne	{r4, r5, pc}
   dbab6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   dbaba:	d105      	bne.n	dbac8 <__adddf3+0x230>
   dbabc:	0040      	lsls	r0, r0, #1
   dbabe:	4149      	adcs	r1, r1
   dbac0:	bf28      	it	cs
   dbac2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   dbac6:	bd30      	pop	{r4, r5, pc}
   dbac8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   dbacc:	bf3c      	itt	cc
   dbace:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   dbad2:	bd30      	popcc	{r4, r5, pc}
   dbad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbad8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   dbadc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbae0:	f04f 0000 	mov.w	r0, #0
   dbae4:	bd30      	pop	{r4, r5, pc}
   dbae6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   dbaea:	bf1a      	itte	ne
   dbaec:	4619      	movne	r1, r3
   dbaee:	4610      	movne	r0, r2
   dbaf0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   dbaf4:	bf1c      	itt	ne
   dbaf6:	460b      	movne	r3, r1
   dbaf8:	4602      	movne	r2, r0
   dbafa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbafe:	bf06      	itte	eq
   dbb00:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   dbb04:	ea91 0f03 	teqeq	r1, r3
   dbb08:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   dbb0c:	bd30      	pop	{r4, r5, pc}
   dbb0e:	bf00      	nop

000dbb10 <__aeabi_ui2d>:
   dbb10:	f090 0f00 	teq	r0, #0
   dbb14:	bf04      	itt	eq
   dbb16:	2100      	moveq	r1, #0
   dbb18:	4770      	bxeq	lr
   dbb1a:	b530      	push	{r4, r5, lr}
   dbb1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbb20:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbb24:	f04f 0500 	mov.w	r5, #0
   dbb28:	f04f 0100 	mov.w	r1, #0
   dbb2c:	e750      	b.n	db9d0 <__adddf3+0x138>
   dbb2e:	bf00      	nop

000dbb30 <__aeabi_i2d>:
   dbb30:	f090 0f00 	teq	r0, #0
   dbb34:	bf04      	itt	eq
   dbb36:	2100      	moveq	r1, #0
   dbb38:	4770      	bxeq	lr
   dbb3a:	b530      	push	{r4, r5, lr}
   dbb3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbb40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbb44:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   dbb48:	bf48      	it	mi
   dbb4a:	4240      	negmi	r0, r0
   dbb4c:	f04f 0100 	mov.w	r1, #0
   dbb50:	e73e      	b.n	db9d0 <__adddf3+0x138>
   dbb52:	bf00      	nop

000dbb54 <__aeabi_f2d>:
   dbb54:	0042      	lsls	r2, r0, #1
   dbb56:	ea4f 01e2 	mov.w	r1, r2, asr #3
   dbb5a:	ea4f 0131 	mov.w	r1, r1, rrx
   dbb5e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   dbb62:	bf1f      	itttt	ne
   dbb64:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   dbb68:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbb6c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   dbb70:	4770      	bxne	lr
   dbb72:	f092 0f00 	teq	r2, #0
   dbb76:	bf14      	ite	ne
   dbb78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   dbb7c:	4770      	bxeq	lr
   dbb7e:	b530      	push	{r4, r5, lr}
   dbb80:	f44f 7460 	mov.w	r4, #896	; 0x380
   dbb84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   dbb88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbb8c:	e720      	b.n	db9d0 <__adddf3+0x138>
   dbb8e:	bf00      	nop

000dbb90 <__aeabi_ul2d>:
   dbb90:	ea50 0201 	orrs.w	r2, r0, r1
   dbb94:	bf08      	it	eq
   dbb96:	4770      	bxeq	lr
   dbb98:	b530      	push	{r4, r5, lr}
   dbb9a:	f04f 0500 	mov.w	r5, #0
   dbb9e:	e00a      	b.n	dbbb6 <__aeabi_l2d+0x16>

000dbba0 <__aeabi_l2d>:
   dbba0:	ea50 0201 	orrs.w	r2, r0, r1
   dbba4:	bf08      	it	eq
   dbba6:	4770      	bxeq	lr
   dbba8:	b530      	push	{r4, r5, lr}
   dbbaa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   dbbae:	d502      	bpl.n	dbbb6 <__aeabi_l2d+0x16>
   dbbb0:	4240      	negs	r0, r0
   dbbb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dbbb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   dbbba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   dbbbe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   dbbc2:	f43f aedc 	beq.w	db97e <__adddf3+0xe6>
   dbbc6:	f04f 0203 	mov.w	r2, #3
   dbbca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbbce:	bf18      	it	ne
   dbbd0:	3203      	addne	r2, #3
   dbbd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   dbbd6:	bf18      	it	ne
   dbbd8:	3203      	addne	r2, #3
   dbbda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   dbbde:	f1c2 0320 	rsb	r3, r2, #32
   dbbe2:	fa00 fc03 	lsl.w	ip, r0, r3
   dbbe6:	fa20 f002 	lsr.w	r0, r0, r2
   dbbea:	fa01 fe03 	lsl.w	lr, r1, r3
   dbbee:	ea40 000e 	orr.w	r0, r0, lr
   dbbf2:	fa21 f102 	lsr.w	r1, r1, r2
   dbbf6:	4414      	add	r4, r2
   dbbf8:	e6c1      	b.n	db97e <__adddf3+0xe6>
   dbbfa:	bf00      	nop

000dbbfc <__aeabi_dmul>:
   dbbfc:	b570      	push	{r4, r5, r6, lr}
   dbbfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbc02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbc06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbc0a:	bf1d      	ittte	ne
   dbc0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbc10:	ea94 0f0c 	teqne	r4, ip
   dbc14:	ea95 0f0c 	teqne	r5, ip
   dbc18:	f000 f8de 	bleq	dbdd8 <__aeabi_dmul+0x1dc>
   dbc1c:	442c      	add	r4, r5
   dbc1e:	ea81 0603 	eor.w	r6, r1, r3
   dbc22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   dbc26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   dbc2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   dbc2e:	bf18      	it	ne
   dbc30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   dbc34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbc38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dbc3c:	d038      	beq.n	dbcb0 <__aeabi_dmul+0xb4>
   dbc3e:	fba0 ce02 	umull	ip, lr, r0, r2
   dbc42:	f04f 0500 	mov.w	r5, #0
   dbc46:	fbe1 e502 	umlal	lr, r5, r1, r2
   dbc4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   dbc4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   dbc52:	f04f 0600 	mov.w	r6, #0
   dbc56:	fbe1 5603 	umlal	r5, r6, r1, r3
   dbc5a:	f09c 0f00 	teq	ip, #0
   dbc5e:	bf18      	it	ne
   dbc60:	f04e 0e01 	orrne.w	lr, lr, #1
   dbc64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   dbc68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   dbc6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   dbc70:	d204      	bcs.n	dbc7c <__aeabi_dmul+0x80>
   dbc72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   dbc76:	416d      	adcs	r5, r5
   dbc78:	eb46 0606 	adc.w	r6, r6, r6
   dbc7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   dbc80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   dbc84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   dbc88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   dbc8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   dbc90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbc94:	bf88      	it	hi
   dbc96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbc9a:	d81e      	bhi.n	dbcda <__aeabi_dmul+0xde>
   dbc9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   dbca0:	bf08      	it	eq
   dbca2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   dbca6:	f150 0000 	adcs.w	r0, r0, #0
   dbcaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbcae:	bd70      	pop	{r4, r5, r6, pc}
   dbcb0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   dbcb4:	ea46 0101 	orr.w	r1, r6, r1
   dbcb8:	ea40 0002 	orr.w	r0, r0, r2
   dbcbc:	ea81 0103 	eor.w	r1, r1, r3
   dbcc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   dbcc4:	bfc2      	ittt	gt
   dbcc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbcca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbcce:	bd70      	popgt	{r4, r5, r6, pc}
   dbcd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbcd4:	f04f 0e00 	mov.w	lr, #0
   dbcd8:	3c01      	subs	r4, #1
   dbcda:	f300 80ab 	bgt.w	dbe34 <__aeabi_dmul+0x238>
   dbcde:	f114 0f36 	cmn.w	r4, #54	; 0x36
   dbce2:	bfde      	ittt	le
   dbce4:	2000      	movle	r0, #0
   dbce6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   dbcea:	bd70      	pople	{r4, r5, r6, pc}
   dbcec:	f1c4 0400 	rsb	r4, r4, #0
   dbcf0:	3c20      	subs	r4, #32
   dbcf2:	da35      	bge.n	dbd60 <__aeabi_dmul+0x164>
   dbcf4:	340c      	adds	r4, #12
   dbcf6:	dc1b      	bgt.n	dbd30 <__aeabi_dmul+0x134>
   dbcf8:	f104 0414 	add.w	r4, r4, #20
   dbcfc:	f1c4 0520 	rsb	r5, r4, #32
   dbd00:	fa00 f305 	lsl.w	r3, r0, r5
   dbd04:	fa20 f004 	lsr.w	r0, r0, r4
   dbd08:	fa01 f205 	lsl.w	r2, r1, r5
   dbd0c:	ea40 0002 	orr.w	r0, r0, r2
   dbd10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   dbd14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   dbd18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbd1c:	fa21 f604 	lsr.w	r6, r1, r4
   dbd20:	eb42 0106 	adc.w	r1, r2, r6
   dbd24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbd28:	bf08      	it	eq
   dbd2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbd2e:	bd70      	pop	{r4, r5, r6, pc}
   dbd30:	f1c4 040c 	rsb	r4, r4, #12
   dbd34:	f1c4 0520 	rsb	r5, r4, #32
   dbd38:	fa00 f304 	lsl.w	r3, r0, r4
   dbd3c:	fa20 f005 	lsr.w	r0, r0, r5
   dbd40:	fa01 f204 	lsl.w	r2, r1, r4
   dbd44:	ea40 0002 	orr.w	r0, r0, r2
   dbd48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbd4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   dbd50:	f141 0100 	adc.w	r1, r1, #0
   dbd54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbd58:	bf08      	it	eq
   dbd5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbd5e:	bd70      	pop	{r4, r5, r6, pc}
   dbd60:	f1c4 0520 	rsb	r5, r4, #32
   dbd64:	fa00 f205 	lsl.w	r2, r0, r5
   dbd68:	ea4e 0e02 	orr.w	lr, lr, r2
   dbd6c:	fa20 f304 	lsr.w	r3, r0, r4
   dbd70:	fa01 f205 	lsl.w	r2, r1, r5
   dbd74:	ea43 0302 	orr.w	r3, r3, r2
   dbd78:	fa21 f004 	lsr.w	r0, r1, r4
   dbd7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbd80:	fa21 f204 	lsr.w	r2, r1, r4
   dbd84:	ea20 0002 	bic.w	r0, r0, r2
   dbd88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   dbd8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   dbd90:	bf08      	it	eq
   dbd92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   dbd96:	bd70      	pop	{r4, r5, r6, pc}
   dbd98:	f094 0f00 	teq	r4, #0
   dbd9c:	d10f      	bne.n	dbdbe <__aeabi_dmul+0x1c2>
   dbd9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   dbda2:	0040      	lsls	r0, r0, #1
   dbda4:	eb41 0101 	adc.w	r1, r1, r1
   dbda8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbdac:	bf08      	it	eq
   dbdae:	3c01      	subeq	r4, #1
   dbdb0:	d0f7      	beq.n	dbda2 <__aeabi_dmul+0x1a6>
   dbdb2:	ea41 0106 	orr.w	r1, r1, r6
   dbdb6:	f095 0f00 	teq	r5, #0
   dbdba:	bf18      	it	ne
   dbdbc:	4770      	bxne	lr
   dbdbe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   dbdc2:	0052      	lsls	r2, r2, #1
   dbdc4:	eb43 0303 	adc.w	r3, r3, r3
   dbdc8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   dbdcc:	bf08      	it	eq
   dbdce:	3d01      	subeq	r5, #1
   dbdd0:	d0f7      	beq.n	dbdc2 <__aeabi_dmul+0x1c6>
   dbdd2:	ea43 0306 	orr.w	r3, r3, r6
   dbdd6:	4770      	bx	lr
   dbdd8:	ea94 0f0c 	teq	r4, ip
   dbddc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbde0:	bf18      	it	ne
   dbde2:	ea95 0f0c 	teqne	r5, ip
   dbde6:	d00c      	beq.n	dbe02 <__aeabi_dmul+0x206>
   dbde8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbdec:	bf18      	it	ne
   dbdee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbdf2:	d1d1      	bne.n	dbd98 <__aeabi_dmul+0x19c>
   dbdf4:	ea81 0103 	eor.w	r1, r1, r3
   dbdf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbdfc:	f04f 0000 	mov.w	r0, #0
   dbe00:	bd70      	pop	{r4, r5, r6, pc}
   dbe02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dbe06:	bf06      	itte	eq
   dbe08:	4610      	moveq	r0, r2
   dbe0a:	4619      	moveq	r1, r3
   dbe0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dbe10:	d019      	beq.n	dbe46 <__aeabi_dmul+0x24a>
   dbe12:	ea94 0f0c 	teq	r4, ip
   dbe16:	d102      	bne.n	dbe1e <__aeabi_dmul+0x222>
   dbe18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   dbe1c:	d113      	bne.n	dbe46 <__aeabi_dmul+0x24a>
   dbe1e:	ea95 0f0c 	teq	r5, ip
   dbe22:	d105      	bne.n	dbe30 <__aeabi_dmul+0x234>
   dbe24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   dbe28:	bf1c      	itt	ne
   dbe2a:	4610      	movne	r0, r2
   dbe2c:	4619      	movne	r1, r3
   dbe2e:	d10a      	bne.n	dbe46 <__aeabi_dmul+0x24a>
   dbe30:	ea81 0103 	eor.w	r1, r1, r3
   dbe34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   dbe38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbe3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   dbe40:	f04f 0000 	mov.w	r0, #0
   dbe44:	bd70      	pop	{r4, r5, r6, pc}
   dbe46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   dbe4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   dbe4e:	bd70      	pop	{r4, r5, r6, pc}

000dbe50 <__aeabi_ddiv>:
   dbe50:	b570      	push	{r4, r5, r6, lr}
   dbe52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   dbe56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   dbe5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   dbe5e:	bf1d      	ittte	ne
   dbe60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   dbe64:	ea94 0f0c 	teqne	r4, ip
   dbe68:	ea95 0f0c 	teqne	r5, ip
   dbe6c:	f000 f8a7 	bleq	dbfbe <__aeabi_ddiv+0x16e>
   dbe70:	eba4 0405 	sub.w	r4, r4, r5
   dbe74:	ea81 0e03 	eor.w	lr, r1, r3
   dbe78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbe7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   dbe80:	f000 8088 	beq.w	dbf94 <__aeabi_ddiv+0x144>
   dbe84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   dbe88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   dbe8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   dbe90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   dbe94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   dbe98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   dbe9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   dbea0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   dbea4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   dbea8:	429d      	cmp	r5, r3
   dbeaa:	bf08      	it	eq
   dbeac:	4296      	cmpeq	r6, r2
   dbeae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   dbeb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   dbeb6:	d202      	bcs.n	dbebe <__aeabi_ddiv+0x6e>
   dbeb8:	085b      	lsrs	r3, r3, #1
   dbeba:	ea4f 0232 	mov.w	r2, r2, rrx
   dbebe:	1ab6      	subs	r6, r6, r2
   dbec0:	eb65 0503 	sbc.w	r5, r5, r3
   dbec4:	085b      	lsrs	r3, r3, #1
   dbec6:	ea4f 0232 	mov.w	r2, r2, rrx
   dbeca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   dbece:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   dbed2:	ebb6 0e02 	subs.w	lr, r6, r2
   dbed6:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbeda:	bf22      	ittt	cs
   dbedc:	1ab6      	subcs	r6, r6, r2
   dbede:	4675      	movcs	r5, lr
   dbee0:	ea40 000c 	orrcs.w	r0, r0, ip
   dbee4:	085b      	lsrs	r3, r3, #1
   dbee6:	ea4f 0232 	mov.w	r2, r2, rrx
   dbeea:	ebb6 0e02 	subs.w	lr, r6, r2
   dbeee:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbef2:	bf22      	ittt	cs
   dbef4:	1ab6      	subcs	r6, r6, r2
   dbef6:	4675      	movcs	r5, lr
   dbef8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   dbefc:	085b      	lsrs	r3, r3, #1
   dbefe:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf02:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf06:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf0a:	bf22      	ittt	cs
   dbf0c:	1ab6      	subcs	r6, r6, r2
   dbf0e:	4675      	movcs	r5, lr
   dbf10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   dbf14:	085b      	lsrs	r3, r3, #1
   dbf16:	ea4f 0232 	mov.w	r2, r2, rrx
   dbf1a:	ebb6 0e02 	subs.w	lr, r6, r2
   dbf1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   dbf22:	bf22      	ittt	cs
   dbf24:	1ab6      	subcs	r6, r6, r2
   dbf26:	4675      	movcs	r5, lr
   dbf28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   dbf2c:	ea55 0e06 	orrs.w	lr, r5, r6
   dbf30:	d018      	beq.n	dbf64 <__aeabi_ddiv+0x114>
   dbf32:	ea4f 1505 	mov.w	r5, r5, lsl #4
   dbf36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   dbf3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   dbf3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   dbf42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   dbf46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   dbf4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   dbf4e:	d1c0      	bne.n	dbed2 <__aeabi_ddiv+0x82>
   dbf50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbf54:	d10b      	bne.n	dbf6e <__aeabi_ddiv+0x11e>
   dbf56:	ea41 0100 	orr.w	r1, r1, r0
   dbf5a:	f04f 0000 	mov.w	r0, #0
   dbf5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   dbf62:	e7b6      	b.n	dbed2 <__aeabi_ddiv+0x82>
   dbf64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   dbf68:	bf04      	itt	eq
   dbf6a:	4301      	orreq	r1, r0
   dbf6c:	2000      	moveq	r0, #0
   dbf6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   dbf72:	bf88      	it	hi
   dbf74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   dbf78:	f63f aeaf 	bhi.w	dbcda <__aeabi_dmul+0xde>
   dbf7c:	ebb5 0c03 	subs.w	ip, r5, r3
   dbf80:	bf04      	itt	eq
   dbf82:	ebb6 0c02 	subseq.w	ip, r6, r2
   dbf86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   dbf8a:	f150 0000 	adcs.w	r0, r0, #0
   dbf8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   dbf92:	bd70      	pop	{r4, r5, r6, pc}
   dbf94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   dbf98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   dbf9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   dbfa0:	bfc2      	ittt	gt
   dbfa2:	ebd4 050c 	rsbsgt	r5, r4, ip
   dbfa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   dbfaa:	bd70      	popgt	{r4, r5, r6, pc}
   dbfac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dbfb0:	f04f 0e00 	mov.w	lr, #0
   dbfb4:	3c01      	subs	r4, #1
   dbfb6:	e690      	b.n	dbcda <__aeabi_dmul+0xde>
   dbfb8:	ea45 0e06 	orr.w	lr, r5, r6
   dbfbc:	e68d      	b.n	dbcda <__aeabi_dmul+0xde>
   dbfbe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   dbfc2:	ea94 0f0c 	teq	r4, ip
   dbfc6:	bf08      	it	eq
   dbfc8:	ea95 0f0c 	teqeq	r5, ip
   dbfcc:	f43f af3b 	beq.w	dbe46 <__aeabi_dmul+0x24a>
   dbfd0:	ea94 0f0c 	teq	r4, ip
   dbfd4:	d10a      	bne.n	dbfec <__aeabi_ddiv+0x19c>
   dbfd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   dbfda:	f47f af34 	bne.w	dbe46 <__aeabi_dmul+0x24a>
   dbfde:	ea95 0f0c 	teq	r5, ip
   dbfe2:	f47f af25 	bne.w	dbe30 <__aeabi_dmul+0x234>
   dbfe6:	4610      	mov	r0, r2
   dbfe8:	4619      	mov	r1, r3
   dbfea:	e72c      	b.n	dbe46 <__aeabi_dmul+0x24a>
   dbfec:	ea95 0f0c 	teq	r5, ip
   dbff0:	d106      	bne.n	dc000 <__aeabi_ddiv+0x1b0>
   dbff2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   dbff6:	f43f aefd 	beq.w	dbdf4 <__aeabi_dmul+0x1f8>
   dbffa:	4610      	mov	r0, r2
   dbffc:	4619      	mov	r1, r3
   dbffe:	e722      	b.n	dbe46 <__aeabi_dmul+0x24a>
   dc000:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   dc004:	bf18      	it	ne
   dc006:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   dc00a:	f47f aec5 	bne.w	dbd98 <__aeabi_dmul+0x19c>
   dc00e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   dc012:	f47f af0d 	bne.w	dbe30 <__aeabi_dmul+0x234>
   dc016:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   dc01a:	f47f aeeb 	bne.w	dbdf4 <__aeabi_dmul+0x1f8>
   dc01e:	e712      	b.n	dbe46 <__aeabi_dmul+0x24a>

000dc020 <__gedf2>:
   dc020:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   dc024:	e006      	b.n	dc034 <__cmpdf2+0x4>
   dc026:	bf00      	nop

000dc028 <__ledf2>:
   dc028:	f04f 0c01 	mov.w	ip, #1
   dc02c:	e002      	b.n	dc034 <__cmpdf2+0x4>
   dc02e:	bf00      	nop

000dc030 <__cmpdf2>:
   dc030:	f04f 0c01 	mov.w	ip, #1
   dc034:	f84d cd04 	str.w	ip, [sp, #-4]!
   dc038:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc03c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc040:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc044:	bf18      	it	ne
   dc046:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   dc04a:	d01b      	beq.n	dc084 <__cmpdf2+0x54>
   dc04c:	b001      	add	sp, #4
   dc04e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   dc052:	bf0c      	ite	eq
   dc054:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   dc058:	ea91 0f03 	teqne	r1, r3
   dc05c:	bf02      	ittt	eq
   dc05e:	ea90 0f02 	teqeq	r0, r2
   dc062:	2000      	moveq	r0, #0
   dc064:	4770      	bxeq	lr
   dc066:	f110 0f00 	cmn.w	r0, #0
   dc06a:	ea91 0f03 	teq	r1, r3
   dc06e:	bf58      	it	pl
   dc070:	4299      	cmppl	r1, r3
   dc072:	bf08      	it	eq
   dc074:	4290      	cmpeq	r0, r2
   dc076:	bf2c      	ite	cs
   dc078:	17d8      	asrcs	r0, r3, #31
   dc07a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   dc07e:	f040 0001 	orr.w	r0, r0, #1
   dc082:	4770      	bx	lr
   dc084:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   dc088:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc08c:	d102      	bne.n	dc094 <__cmpdf2+0x64>
   dc08e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   dc092:	d107      	bne.n	dc0a4 <__cmpdf2+0x74>
   dc094:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   dc098:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   dc09c:	d1d6      	bne.n	dc04c <__cmpdf2+0x1c>
   dc09e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   dc0a2:	d0d3      	beq.n	dc04c <__cmpdf2+0x1c>
   dc0a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   dc0a8:	4770      	bx	lr
   dc0aa:	bf00      	nop

000dc0ac <__aeabi_cdrcmple>:
   dc0ac:	4684      	mov	ip, r0
   dc0ae:	4610      	mov	r0, r2
   dc0b0:	4662      	mov	r2, ip
   dc0b2:	468c      	mov	ip, r1
   dc0b4:	4619      	mov	r1, r3
   dc0b6:	4663      	mov	r3, ip
   dc0b8:	e000      	b.n	dc0bc <__aeabi_cdcmpeq>
   dc0ba:	bf00      	nop

000dc0bc <__aeabi_cdcmpeq>:
   dc0bc:	b501      	push	{r0, lr}
   dc0be:	f7ff ffb7 	bl	dc030 <__cmpdf2>
   dc0c2:	2800      	cmp	r0, #0
   dc0c4:	bf48      	it	mi
   dc0c6:	f110 0f00 	cmnmi.w	r0, #0
   dc0ca:	bd01      	pop	{r0, pc}

000dc0cc <__aeabi_dcmpeq>:
   dc0cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc0d0:	f7ff fff4 	bl	dc0bc <__aeabi_cdcmpeq>
   dc0d4:	bf0c      	ite	eq
   dc0d6:	2001      	moveq	r0, #1
   dc0d8:	2000      	movne	r0, #0
   dc0da:	f85d fb08 	ldr.w	pc, [sp], #8
   dc0de:	bf00      	nop

000dc0e0 <__aeabi_dcmplt>:
   dc0e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc0e4:	f7ff ffea 	bl	dc0bc <__aeabi_cdcmpeq>
   dc0e8:	bf34      	ite	cc
   dc0ea:	2001      	movcc	r0, #1
   dc0ec:	2000      	movcs	r0, #0
   dc0ee:	f85d fb08 	ldr.w	pc, [sp], #8
   dc0f2:	bf00      	nop

000dc0f4 <__aeabi_dcmple>:
   dc0f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc0f8:	f7ff ffe0 	bl	dc0bc <__aeabi_cdcmpeq>
   dc0fc:	bf94      	ite	ls
   dc0fe:	2001      	movls	r0, #1
   dc100:	2000      	movhi	r0, #0
   dc102:	f85d fb08 	ldr.w	pc, [sp], #8
   dc106:	bf00      	nop

000dc108 <__aeabi_dcmpge>:
   dc108:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc10c:	f7ff ffce 	bl	dc0ac <__aeabi_cdrcmple>
   dc110:	bf94      	ite	ls
   dc112:	2001      	movls	r0, #1
   dc114:	2000      	movhi	r0, #0
   dc116:	f85d fb08 	ldr.w	pc, [sp], #8
   dc11a:	bf00      	nop

000dc11c <__aeabi_dcmpgt>:
   dc11c:	f84d ed08 	str.w	lr, [sp, #-8]!
   dc120:	f7ff ffc4 	bl	dc0ac <__aeabi_cdrcmple>
   dc124:	bf34      	ite	cc
   dc126:	2001      	movcc	r0, #1
   dc128:	2000      	movcs	r0, #0
   dc12a:	f85d fb08 	ldr.w	pc, [sp], #8
   dc12e:	bf00      	nop

000dc130 <__aeabi_d2iz>:
   dc130:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc134:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc138:	d215      	bcs.n	dc166 <__aeabi_d2iz+0x36>
   dc13a:	d511      	bpl.n	dc160 <__aeabi_d2iz+0x30>
   dc13c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc140:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc144:	d912      	bls.n	dc16c <__aeabi_d2iz+0x3c>
   dc146:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc14a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc14e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc152:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   dc156:	fa23 f002 	lsr.w	r0, r3, r2
   dc15a:	bf18      	it	ne
   dc15c:	4240      	negne	r0, r0
   dc15e:	4770      	bx	lr
   dc160:	f04f 0000 	mov.w	r0, #0
   dc164:	4770      	bx	lr
   dc166:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc16a:	d105      	bne.n	dc178 <__aeabi_d2iz+0x48>
   dc16c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   dc170:	bf08      	it	eq
   dc172:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   dc176:	4770      	bx	lr
   dc178:	f04f 0000 	mov.w	r0, #0
   dc17c:	4770      	bx	lr
   dc17e:	bf00      	nop

000dc180 <__aeabi_d2uiz>:
   dc180:	004a      	lsls	r2, r1, #1
   dc182:	d211      	bcs.n	dc1a8 <__aeabi_d2uiz+0x28>
   dc184:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   dc188:	d211      	bcs.n	dc1ae <__aeabi_d2uiz+0x2e>
   dc18a:	d50d      	bpl.n	dc1a8 <__aeabi_d2uiz+0x28>
   dc18c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   dc190:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   dc194:	d40e      	bmi.n	dc1b4 <__aeabi_d2uiz+0x34>
   dc196:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc19a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   dc19e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   dc1a2:	fa23 f002 	lsr.w	r0, r3, r2
   dc1a6:	4770      	bx	lr
   dc1a8:	f04f 0000 	mov.w	r0, #0
   dc1ac:	4770      	bx	lr
   dc1ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   dc1b2:	d102      	bne.n	dc1ba <__aeabi_d2uiz+0x3a>
   dc1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   dc1b8:	4770      	bx	lr
   dc1ba:	f04f 0000 	mov.w	r0, #0
   dc1be:	4770      	bx	lr

000dc1c0 <__aeabi_d2f>:
   dc1c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   dc1c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   dc1c8:	bf24      	itt	cs
   dc1ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   dc1ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   dc1d2:	d90d      	bls.n	dc1f0 <__aeabi_d2f+0x30>
   dc1d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   dc1d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   dc1dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   dc1e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   dc1e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   dc1e8:	bf08      	it	eq
   dc1ea:	f020 0001 	biceq.w	r0, r0, #1
   dc1ee:	4770      	bx	lr
   dc1f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   dc1f4:	d121      	bne.n	dc23a <__aeabi_d2f+0x7a>
   dc1f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   dc1fa:	bfbc      	itt	lt
   dc1fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   dc200:	4770      	bxlt	lr
   dc202:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   dc206:	ea4f 5252 	mov.w	r2, r2, lsr #21
   dc20a:	f1c2 0218 	rsb	r2, r2, #24
   dc20e:	f1c2 0c20 	rsb	ip, r2, #32
   dc212:	fa10 f30c 	lsls.w	r3, r0, ip
   dc216:	fa20 f002 	lsr.w	r0, r0, r2
   dc21a:	bf18      	it	ne
   dc21c:	f040 0001 	orrne.w	r0, r0, #1
   dc220:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   dc224:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   dc228:	fa03 fc0c 	lsl.w	ip, r3, ip
   dc22c:	ea40 000c 	orr.w	r0, r0, ip
   dc230:	fa23 f302 	lsr.w	r3, r3, r2
   dc234:	ea4f 0343 	mov.w	r3, r3, lsl #1
   dc238:	e7cc      	b.n	dc1d4 <__aeabi_d2f+0x14>
   dc23a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   dc23e:	d107      	bne.n	dc250 <__aeabi_d2f+0x90>
   dc240:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   dc244:	bf1e      	ittt	ne
   dc246:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   dc24a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   dc24e:	4770      	bxne	lr
   dc250:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   dc254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   dc258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   dc25c:	4770      	bx	lr
   dc25e:	bf00      	nop

000dc260 <__cxa_atexit>:
   dc260:	b510      	push	{r4, lr}
   dc262:	4c05      	ldr	r4, [pc, #20]	; (dc278 <__cxa_atexit+0x18>)
   dc264:	4613      	mov	r3, r2
   dc266:	b12c      	cbz	r4, dc274 <__cxa_atexit+0x14>
   dc268:	460a      	mov	r2, r1
   dc26a:	4601      	mov	r1, r0
   dc26c:	2002      	movs	r0, #2
   dc26e:	f3af 8000 	nop.w
   dc272:	bd10      	pop	{r4, pc}
   dc274:	4620      	mov	r0, r4
   dc276:	bd10      	pop	{r4, pc}
   dc278:	00000000 	.word	0x00000000

000dc27c <ldiv>:
   dc27c:	2900      	cmp	r1, #0
   dc27e:	b510      	push	{r4, lr}
   dc280:	fb91 f4f2 	sdiv	r4, r1, r2
   dc284:	fb02 1314 	mls	r3, r2, r4, r1
   dc288:	db04      	blt.n	dc294 <ldiv+0x18>
   dc28a:	2b00      	cmp	r3, #0
   dc28c:	da07      	bge.n	dc29e <ldiv+0x22>
   dc28e:	3401      	adds	r4, #1
   dc290:	1a9b      	subs	r3, r3, r2
   dc292:	e004      	b.n	dc29e <ldiv+0x22>
   dc294:	2b00      	cmp	r3, #0
   dc296:	bfc4      	itt	gt
   dc298:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   dc29c:	189b      	addgt	r3, r3, r2
   dc29e:	6004      	str	r4, [r0, #0]
   dc2a0:	6043      	str	r3, [r0, #4]
   dc2a2:	bd10      	pop	{r4, pc}

000dc2a4 <memcmp>:
   dc2a4:	b510      	push	{r4, lr}
   dc2a6:	3901      	subs	r1, #1
   dc2a8:	4402      	add	r2, r0
   dc2aa:	4290      	cmp	r0, r2
   dc2ac:	d007      	beq.n	dc2be <memcmp+0x1a>
   dc2ae:	f810 3b01 	ldrb.w	r3, [r0], #1
   dc2b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc2b6:	42a3      	cmp	r3, r4
   dc2b8:	d0f7      	beq.n	dc2aa <memcmp+0x6>
   dc2ba:	1b18      	subs	r0, r3, r4
   dc2bc:	bd10      	pop	{r4, pc}
   dc2be:	2000      	movs	r0, #0
   dc2c0:	bd10      	pop	{r4, pc}

000dc2c2 <memcpy>:
   dc2c2:	b510      	push	{r4, lr}
   dc2c4:	1e43      	subs	r3, r0, #1
   dc2c6:	440a      	add	r2, r1
   dc2c8:	4291      	cmp	r1, r2
   dc2ca:	d004      	beq.n	dc2d6 <memcpy+0x14>
   dc2cc:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc2d0:	f803 4f01 	strb.w	r4, [r3, #1]!
   dc2d4:	e7f8      	b.n	dc2c8 <memcpy+0x6>
   dc2d6:	bd10      	pop	{r4, pc}

000dc2d8 <memset>:
   dc2d8:	4402      	add	r2, r0
   dc2da:	4603      	mov	r3, r0
   dc2dc:	4293      	cmp	r3, r2
   dc2de:	d002      	beq.n	dc2e6 <memset+0xe>
   dc2e0:	f803 1b01 	strb.w	r1, [r3], #1
   dc2e4:	e7fa      	b.n	dc2dc <memset+0x4>
   dc2e6:	4770      	bx	lr

000dc2e8 <srand>:
   dc2e8:	b538      	push	{r3, r4, r5, lr}
   dc2ea:	4b12      	ldr	r3, [pc, #72]	; (dc334 <srand+0x4c>)
   dc2ec:	681c      	ldr	r4, [r3, #0]
   dc2ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc2f0:	4605      	mov	r5, r0
   dc2f2:	b9d3      	cbnz	r3, dc32a <srand+0x42>
   dc2f4:	2018      	movs	r0, #24
   dc2f6:	f7fd f9e3 	bl	d96c0 <malloc>
   dc2fa:	f243 330e 	movw	r3, #13070	; 0x330e
   dc2fe:	63a0      	str	r0, [r4, #56]	; 0x38
   dc300:	8003      	strh	r3, [r0, #0]
   dc302:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dc306:	8043      	strh	r3, [r0, #2]
   dc308:	f241 2334 	movw	r3, #4660	; 0x1234
   dc30c:	8083      	strh	r3, [r0, #4]
   dc30e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dc312:	80c3      	strh	r3, [r0, #6]
   dc314:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dc318:	8103      	strh	r3, [r0, #8]
   dc31a:	2305      	movs	r3, #5
   dc31c:	8143      	strh	r3, [r0, #10]
   dc31e:	230b      	movs	r3, #11
   dc320:	8183      	strh	r3, [r0, #12]
   dc322:	2201      	movs	r2, #1
   dc324:	2300      	movs	r3, #0
   dc326:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc32a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc32c:	2200      	movs	r2, #0
   dc32e:	611d      	str	r5, [r3, #16]
   dc330:	615a      	str	r2, [r3, #20]
   dc332:	bd38      	pop	{r3, r4, r5, pc}
   dc334:	2003e104 	.word	0x2003e104

000dc338 <rand>:
   dc338:	4b19      	ldr	r3, [pc, #100]	; (dc3a0 <rand+0x68>)
   dc33a:	b510      	push	{r4, lr}
   dc33c:	681c      	ldr	r4, [r3, #0]
   dc33e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dc340:	b9d3      	cbnz	r3, dc378 <rand+0x40>
   dc342:	2018      	movs	r0, #24
   dc344:	f7fd f9bc 	bl	d96c0 <malloc>
   dc348:	f243 330e 	movw	r3, #13070	; 0x330e
   dc34c:	63a0      	str	r0, [r4, #56]	; 0x38
   dc34e:	8003      	strh	r3, [r0, #0]
   dc350:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dc354:	8043      	strh	r3, [r0, #2]
   dc356:	f241 2334 	movw	r3, #4660	; 0x1234
   dc35a:	8083      	strh	r3, [r0, #4]
   dc35c:	f24e 636d 	movw	r3, #58989	; 0xe66d
   dc360:	80c3      	strh	r3, [r0, #6]
   dc362:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   dc366:	8103      	strh	r3, [r0, #8]
   dc368:	2305      	movs	r3, #5
   dc36a:	8143      	strh	r3, [r0, #10]
   dc36c:	230b      	movs	r3, #11
   dc36e:	8183      	strh	r3, [r0, #12]
   dc370:	2201      	movs	r2, #1
   dc372:	2300      	movs	r3, #0
   dc374:	e9c0 2304 	strd	r2, r3, [r0, #16]
   dc378:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   dc37a:	4c0a      	ldr	r4, [pc, #40]	; (dc3a4 <rand+0x6c>)
   dc37c:	690b      	ldr	r3, [r1, #16]
   dc37e:	6948      	ldr	r0, [r1, #20]
   dc380:	4a09      	ldr	r2, [pc, #36]	; (dc3a8 <rand+0x70>)
   dc382:	435c      	muls	r4, r3
   dc384:	fb02 4000 	mla	r0, r2, r0, r4
   dc388:	fba3 2302 	umull	r2, r3, r3, r2
   dc38c:	3201      	adds	r2, #1
   dc38e:	4403      	add	r3, r0
   dc390:	f143 0300 	adc.w	r3, r3, #0
   dc394:	e9c1 2304 	strd	r2, r3, [r1, #16]
   dc398:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   dc39c:	bd10      	pop	{r4, pc}
   dc39e:	bf00      	nop
   dc3a0:	2003e104 	.word	0x2003e104
   dc3a4:	5851f42d 	.word	0x5851f42d
   dc3a8:	4c957f2d 	.word	0x4c957f2d

000dc3ac <strcpy>:
   dc3ac:	4603      	mov	r3, r0
   dc3ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   dc3b2:	f803 2b01 	strb.w	r2, [r3], #1
   dc3b6:	2a00      	cmp	r2, #0
   dc3b8:	d1f9      	bne.n	dc3ae <strcpy+0x2>
   dc3ba:	4770      	bx	lr

000dc3bc <strdup>:
   dc3bc:	4b02      	ldr	r3, [pc, #8]	; (dc3c8 <strdup+0xc>)
   dc3be:	4601      	mov	r1, r0
   dc3c0:	6818      	ldr	r0, [r3, #0]
   dc3c2:	f000 b803 	b.w	dc3cc <_strdup_r>
   dc3c6:	bf00      	nop
   dc3c8:	2003e104 	.word	0x2003e104

000dc3cc <_strdup_r>:
   dc3cc:	b570      	push	{r4, r5, r6, lr}
   dc3ce:	4606      	mov	r6, r0
   dc3d0:	4608      	mov	r0, r1
   dc3d2:	460c      	mov	r4, r1
   dc3d4:	f000 f80d 	bl	dc3f2 <strlen>
   dc3d8:	1c45      	adds	r5, r0, #1
   dc3da:	4629      	mov	r1, r5
   dc3dc:	4630      	mov	r0, r6
   dc3de:	f7fd f997 	bl	d9710 <_malloc_r>
   dc3e2:	4606      	mov	r6, r0
   dc3e4:	b118      	cbz	r0, dc3ee <_strdup_r+0x22>
   dc3e6:	462a      	mov	r2, r5
   dc3e8:	4621      	mov	r1, r4
   dc3ea:	f7ff ff6a 	bl	dc2c2 <memcpy>
   dc3ee:	4630      	mov	r0, r6
   dc3f0:	bd70      	pop	{r4, r5, r6, pc}

000dc3f2 <strlen>:
   dc3f2:	4603      	mov	r3, r0
   dc3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   dc3f8:	2a00      	cmp	r2, #0
   dc3fa:	d1fb      	bne.n	dc3f4 <strlen+0x2>
   dc3fc:	1a18      	subs	r0, r3, r0
   dc3fe:	3801      	subs	r0, #1
   dc400:	4770      	bx	lr

000dc402 <strncmp>:
   dc402:	b530      	push	{r4, r5, lr}
   dc404:	b182      	cbz	r2, dc428 <strncmp+0x26>
   dc406:	1e45      	subs	r5, r0, #1
   dc408:	3901      	subs	r1, #1
   dc40a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   dc40e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   dc412:	42a3      	cmp	r3, r4
   dc414:	d106      	bne.n	dc424 <strncmp+0x22>
   dc416:	43ec      	mvns	r4, r5
   dc418:	4414      	add	r4, r2
   dc41a:	42e0      	cmn	r0, r4
   dc41c:	d001      	beq.n	dc422 <strncmp+0x20>
   dc41e:	2b00      	cmp	r3, #0
   dc420:	d1f3      	bne.n	dc40a <strncmp+0x8>
   dc422:	461c      	mov	r4, r3
   dc424:	1b18      	subs	r0, r3, r4
   dc426:	bd30      	pop	{r4, r5, pc}
   dc428:	4610      	mov	r0, r2
   dc42a:	bd30      	pop	{r4, r5, pc}

000dc42c <strncpy>:
   dc42c:	b510      	push	{r4, lr}
   dc42e:	4603      	mov	r3, r0
   dc430:	b142      	cbz	r2, dc444 <strncpy+0x18>
   dc432:	f811 4b01 	ldrb.w	r4, [r1], #1
   dc436:	f803 4b01 	strb.w	r4, [r3], #1
   dc43a:	3a01      	subs	r2, #1
   dc43c:	2c00      	cmp	r4, #0
   dc43e:	d1f7      	bne.n	dc430 <strncpy+0x4>
   dc440:	441a      	add	r2, r3
   dc442:	e000      	b.n	dc446 <strncpy+0x1a>
   dc444:	bd10      	pop	{r4, pc}
   dc446:	4293      	cmp	r3, r2
   dc448:	d002      	beq.n	dc450 <strncpy+0x24>
   dc44a:	f803 4b01 	strb.w	r4, [r3], #1
   dc44e:	e7fa      	b.n	dc446 <strncpy+0x1a>
   dc450:	bd10      	pop	{r4, pc}

000dc452 <strnlen>:
   dc452:	b510      	push	{r4, lr}
   dc454:	4603      	mov	r3, r0
   dc456:	4401      	add	r1, r0
   dc458:	428b      	cmp	r3, r1
   dc45a:	d004      	beq.n	dc466 <strnlen+0x14>
   dc45c:	781a      	ldrb	r2, [r3, #0]
   dc45e:	1c5c      	adds	r4, r3, #1
   dc460:	b10a      	cbz	r2, dc466 <strnlen+0x14>
   dc462:	4623      	mov	r3, r4
   dc464:	e7f8      	b.n	dc458 <strnlen+0x6>
   dc466:	1a18      	subs	r0, r3, r0
   dc468:	bd10      	pop	{r4, pc}

000dc46a <link_code_end>:
	...

000dc46c <dynalib_user>:
   dc46c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   dc47c:	0000 0000                                   ....

000dc480 <_ZL11itmDisplay5>:
   dc480:	6143 6f72 7375 6c65 3c00                         Carousel.

000dc489 <_ZL7itmBack>:
   dc489:	203c 6142 6b63 4200                              < Back.

000dc490 <_ZL11itmDisplay1>:
   dc490:	6142 6764 2065 614d 7172 6575 0065 0000     Badge Marquee...

000dc4a0 <_ZL8mnuMusic>:
   dc4a0:	c556 000d c524 000d c56c 000d c5ad 000d     V...$...l.......
   dc4b0:	c55c 000d c489 000d                         \.......

000dc4b8 <_ZL11itmDisplay2>:
   dc4b8:	614e 656d 4100                                   Name.

000dc4bd <_ZL12itmRootAbout>:
   dc4bd:	6241 756f 0074                              About.

000dc4c3 <_ZL11itmRootMesh>:
   dc4c3:	654d 6873 5420 6f6f 736c 5300                    Mesh Tools.

000dc4ce <_ZL14itmRootSensors>:
   dc4ce:	6553 736e 726f 0073                         Sensors.

000dc4d6 <_ZL8itmMesh1>:
   dc4d6:	654d 6873 4920 666e 006f                    Mesh Info.

000dc4e0 <_ZL8itmMesh2>:
   dc4e0:	6548 6c6c 206f 6950 676e 4700                    Hello Ping.

000dc4eb <_ZL8itmMesh3>:
   dc4eb:	6147 6574 6177 2079 6950 676e 5000               Gateway Ping.

000dc4f8 <_ZL10itmBlinky2>:
   dc4f8:	7550 736c 6e69 0067                         Pulsing.

000dc500 <_ZL8mnuGames>:
   dc500:	c604 000d c5cc 000d c5da 000d c544 000d     ............D...
   dc510:	c489 000d                                   ....

000dc514 <_ZL10mnuSensors>:
   dc514:	c4c3 000d c6d7 000d c6e7 000d c489 000d     ................

000dc524 <_ZL9itmMusic1>:
   dc524:	614d 6972 206f 7453 7261 0074               Mario Start.

000dc530 <_ZL7mnuMesh>:
   dc530:	c4c3 000d c4d6 000d c4e0 000d c4eb 000d     ................
   dc540:	c489 000d                                   ....

000dc544 <_ZL8itmGame3>:
   dc544:	6953 6f6d 206e 6153 7379 4200                    Simon Says.

000dc54f <_ZL13itmRootBlinky>:
   dc54f:	6c42 6e69 796b 4d00                              Blinky.

000dc556 <_ZL12itmRootMusic>:
   dc556:	754d 6973 0063                              Music.

000dc55c <_ZL9itmMusic4>:
   dc55c:	6542 2065 6547 7365 4b00                         Bee Gees.

000dc565 <_ZL12itmGraphics4>:
   dc565:	6f4b 616e 696d 4d00                              Konami.

000dc56c <_ZL9itmMusic2>:
   dc56c:	614d 6972 206f 6147 656d 4f20 6576 0072     Mario Game Over.

000dc57c <_ZL13itmAnimation1>:
   dc57c:	6e53 776f 6c66 6b61 7365 5400                    Snowflakes.

000dc587 <_ZL13itmAnimation4>:
   dc587:	7254 6169 676e 656c 0073                    Triangles.

000dc591 <_ZL13itmAnimation5>:
   dc591:	6f52 6e75 2064 6552 7463 0073               Round Rects.

000dc59d <_ZL13itmAnimation6>:
   dc59d:	6353 6f72 6c6c 5420 7865 0074               Scroll Text.

000dc5a9 <_ZL13itmAnimation7>:
   dc5a9:	6c41 006c                                   All.

000dc5ad <_ZL9itmMusic3>:
   dc5ad:	654e 6576 2072 6f47 6e6e 0061               Never Gonna.

000dc5b9 <_ZL12itmGraphics1>:
   dc5b9:	7053 7261 006b                              Spark.

000dc5bf <_ZL12itmGraphics2>:
   dc5bf:	7053 6365 7274 0061                         Spectra.

000dc5c7 <_ZL12itmGraphics3>:
   dc5c7:	654d 6873 4500                                   Mesh.

000dc5cc <_ZL8itmGame1>:
   dc5cc:	7445 6863 6120 5320 656b 6374 0068          Etch a Sketch.

000dc5da <_ZL8itmGame2>:
   dc5da:	6e53 6b61 0065                              Snake.

000dc5e0 <_ZL13mnuAnimations>:
   dc5e0:	c630 000d c57c 000d c658 000d c60a 000d     0...|...X.......
   dc5f0:	c587 000d c591 000d c59d 000d c5a9 000d     ................
   dc600:	c489 000d                                   ....

000dc604 <_ZL12itmRootGames>:
   dc604:	6147 656d 0073                              Games.

000dc60a <_ZL13itmAnimation3>:
   dc60a:	6552 7463 6e61 6c67 7365 5300                    Rectangles.

000dc615 <_ZL7itmRoot>:
   dc615:	7053 6365 7274 2061 3032 3831 4220 6461     Spectra 2018 Bad
   dc625:	6567 4400                                        ge.

000dc628 <_ZL14itmRootDisplay>:
   dc628:	6944 7073 616c 0079                         Display.

000dc630 <_ZL17itmRootAnimations>:
   dc630:	6e41 6d69 7461 6f69 736e 0000               Animations..

000dc63c <_ZL9mnuBlinky>:
   dc63c:	c54f 000d c69b 000d c4f8 000d c6bc 000d     O...............
   dc64c:	c6c8 000d c6cf 000d c489 000d               ............

000dc658 <_ZL13itmAnimation2>:
   dc658:	6943 6372 656c 0073                         Circles.

000dc660 <_ZL10mnuDisplay>:
   dc660:	c628 000d c490 000d c4b8 000d c67c 000d     (...........|...
   dc670:	c68b 000d c480 000d c489 000d               ............

000dc67c <_ZL11itmDisplay3>:
   dc67c:	7754 7469 6574 2072 6148 646e 656c 5400          Twitter Handle.

000dc68b <_ZL11itmDisplay4>:
   dc68b:	6554 706d 2620 4820 6d75 6469 7469 0079     Temp & Humidity.

000dc69b <_ZL10itmBlinky1>:
   dc69b:	6843 7361 0065 0000 6700                         Chase....

000dc6a4 <_ZL11mnuGraphics>:
   dc6a4:	c767 000d c5b9 000d c5bf 000d c5c7 000d     g...............
   dc6b4:	c565 000d c489 000d                         e.......

000dc6bc <_ZL10itmBlinky3>:
   dc6bc:	7550 736c 2065 6843 7361 0065               Pulse Chase.

000dc6c8 <_ZL10itmBlinky4>:
   dc6c8:	6152 646e 6d6f 5300                              Random.

000dc6cf <_ZL10itmBlinky5>:
   dc6cf:	6553 2d65 6173 0077                         See-saw.

000dc6d7 <_ZL11itmSensors1>:
   dc6d7:	6554 706d 2620 4820 6d75 6469 7469 0079     Temp & Humidity.

000dc6e7 <_ZL11itmSensors2>:
   dc6e7:	6142 7474 7265 2079 7453 7461 7375 7700     Battery Status.w
   dc6f7:	6165 6572 4672 614e 656d 7700 6165 6572     earerFName.weare
   dc707:	4c72 614e 656d 7700 6165 6572 5472 7477     rLName.wearerTwt
   dc717:	7274 6300 7275 6572 746e 6554 706d 6300     tr.currentTemp.c
   dc727:	7275 6572 746e 7548 7500 6470 7461 4665     urrentHu.updateF
   dc737:	614e 656d 7500 6470 7461 4c65 614e 656d     Name.updateLName
   dc747:	7500 6470 7461 5465 7477 7274 6300 6568     .updateTwttr.che
   dc757:	6b63 6554 706d 7000 6c75 6573 654c 0064     ckTemp.pulseLed.

000dc767 <_ZL15itmRootGraphics>:
   dc767:	7247 7061 6968 7363 0000                         Graphics.

000dc770 <_ZL15logo16_glcd_bmp>:
   dc770:	0000 0000 0001 8811 300d e00e e007 dc3b     .........0....;.
   dc780:	d817 e007 700e b009 8811 0001 0000 0000     .....p..........
   dc790:	5023 7261 6974 0000 cde1 000d cdec 000d     #Parti..........
   dc7a0:	cdfa 000d                                   ....

000dc7a4 <_ZL9tempImage>:
   dc7a4:	c003 f00f 781e 1818 1c38 1c38 1c38 1c38     .....x..8.8.8.8.
   dc7b4:	1c38 1c38 1c38 1c38 1c38 1c38 1c38 1c38     8.8.8.8.8.8.8.8.
   dc7c4:	1c38 1c38 1c38 1c38 1c38 1c38 1c38 1c38     8.8.8.8.8.8.8.8.
   dc7d4:	1c38 1c38 fc3f fc3f fc3f fc3f fe7f fe7f     8.8.?.?.?.?.....
   dc7e4:	ffff ffff ffff ffff ffff ffff fe7f fe7f     ................
   dc7f4:	fc3f f81f e007                              ?.....

000dc7fa <_ZL15batteryLowImage>:
   dc7fa:	ff3f ffff ffff fcff 7f00 ffff ffff ffff     ?...............
   dc80a:	00fe ffff ffff ffff ffff ff00 ffff ffff     ................
   dc81a:	ffff 00ff 00f0 0000 0000 0f00 f000 0000     ................
   dc82a:	0000 0000 000f 00f0 0000 0000 0f00 f0fc     ................
   dc83a:	0000 0000 0000 fe0f fff0 c0ff 0000 0f00     ................
   dc84a:	f0ff ffff 00c0 0000 ff0f fff0 80ff 0000     ................
   dc85a:	0f00 f00f ffff 0080 0000 0f0f fff0 00ff     ................
   dc86a:	0000 0f00 f00f ffff 0000 0000 0f0f fff0     ................
   dc87a:	00fe 0000 0f00 f00f fcff 0000 0000 0f0f     ................
   dc88a:	fff0 00fc 0000 0f00 f00f fcff 0000 0000     ................
   dc89a:	0f0f fff0 00fc 0000 0f00 f00f f8ff 0000     ................
   dc8aa:	0000 0f0f fff0 00f8 0000 0f00 f00f f0ff     ................
   dc8ba:	0000 0000 0f0f fff0 00e0 0000 0f00 f0ff     ................
   dc8ca:	e0ff 0000 0000 ff0f 00f0 0000 0000 0f00     ................
   dc8da:	f0fe 0000 0000 0000 fe0f 00f0 0000 0000     ................
   dc8ea:	0f00 f000 0000 0000 0000 000f ffff ffff     ................
   dc8fa:	ffff ffff ff00 ffff ffff ffff 00ff ff7f     ................
   dc90a:	ffff ffff feff 3f00 ffff ffff ffff 00fc     .......?........

000dc91a <_ZL13humidityImage>:
   dc91a:	6000 0000 0060 f000 0100 00f8 fc03 0300     .`..`...........
   dc92a:	00fc fe07 0f00 00ff ff1f 1f80 80ff 7f3c     ..............<.
   dc93a:	38c0 c03f 3979 78e0 e031 63fc fff0 f0c7     .8?.y9.x1..c....
   dc94a:	8fff fff0 f01f 3ffe fcf0 f063 c978 79e0     .......?..c.x..y
   dc95a:	e0c9 c13f 3fc0 c0f7 ff1f 0780 00fe f801     ..?..?..........
	...

000dc96b <_ZL11spectraLogo>:
	...
   dca6f:	0000 ff7f fcff 0000 0000 0000 0000 0000     ................
   dca7f:	0100 0000 0000 0000 0000 0000 0000 0000     ................
   dca8f:	0100 0000 0100 0000 0000 0000 0000 0000     ................
   dca9f:	0200 0000 0000 0080 0000 0000 0000 0000     ................
   dcaaf:	0200 0000 0000 0080 0000 0000 0000 0000     ................
   dcabf:	0400 0000 0000 0040 0000 0000 0000 0000     ......@.........
   dcacf:	0000 0000 0000 0040 0000 0000 0000 0000     ......@.........
   dcadf:	0800 0000 0000 0020 0000 0000 0000 0000     ...... .........
   dcaef:	1000 0000 0000 0000 0000 0000 0000 0000     ................
   dcaff:	1000 0000 0000 0010 0000 0000 0000 0000     ................
   dcb0f:	2000 0000 0000 0008 0000 0000 0000 0000     . ..............
   dcb1f:	2000 0000 0000 0008 0000 0000 0000 0000     . ..............
   dcb2f:	4000 0000 0000 0004 0000 0000 0000 0000     .@..............
	...
   dcb4f:	8f00 009f 0000 0002 0000 0000 0000 0000     ................
   dcb5f:	6001 c0f0 0000 0001 0000 0000 0000 0000     .`..............
   dcb6f:	8101 1008 0000 0001 0000 0000 0000 0000     ................
   dcb7f:	0203 0804 0000 8000 0000 0000 0000 0000     ................
   dcb8f:	0402 0402 0000 8000 0000 0000 0000 0000     ................
   dcb9f:	0804 0201 0000 c000 0000 0000 0000 0000     ................
   dcbaf:	1008 8000 0000 0001 0000 0000 0000 0000     ................
   dcbbf:	2008 4100 0000 2001 0000 0000 0000 0000     . .A... ........
   dcbcf:	2010 4000 0080 1002 0000 0000 0000 0000     . .@............
   dcbdf:	4010 2000 0040 1004 0000 0000 0000 0000     .@. @...........
   dcbef:	8010 2000 0040 1004 0000 0000 0000 0000     ... @...........
   dcbff:	8010 1000 0020 1008 0000 0000 0000 0000     .... ...........
   dcc0f:	0009 0800 0020 2000 0000 0000 0000 0000     .... .. ........
   dcc1f:	000a 0800 0010 2010 0000 0000 0000 0000     ....... ........
   dcc2f:	0006 0400 0008 4020 0000 0000 0000 0000     ...... @........
   dcc3f:	0000 0200 0000 8000 0000 0000 0000 0000     ................
   dcc4f:	0002 0200 0004 8040 0000 0000 0000 0000     ......@.........
   dcc5f:	0001 0100 0002 0081 0000 0000 0000 0000     ................
   dcc6f:	0001 0000 0181 0003 0000 0000 0000 0000     ................
   dcc7f:	8000 0000 8240 000e 0000 0000 0000 0000     ....@...........
   dcc8f:	0000 0000 2810 0010 0000 0000 0000 0000     .....(..........
   dcc9f:	4000 0000 ef07 00c4 0000 0000 0000 0000     .@..............
   dccaf:	2000 0000 0000 0008 0000 0000 0000 0000     . ..............
   dccbf:	2000 0000 0000 0008 0000 0000 0000 0000     . ..............
   dcccf:	1000 0000 0000 0010 0000 0000 0000 0000     ................
   dccdf:	1000 0000 0000 0010 0000 0000 0000 0000     ................
   dccef:	0800 0000 0000 0020 0000 0000 0000 0000     ...... .........
	...
   dcd0f:	0400 0000 0000 0040 0000 0000 0000 0000     ......@.........
   dcd1f:	0200 0000 0000 0080 0000 0000 0000 0000     ................
   dcd2f:	0200 0000 0000 0080 0000 0000 0000 0000     ................
   dcd3f:	0100 0000 0100 0000 0000 0000 0000 0000     ................
   dcd4f:	0100 0000 0100 0000 0000 0000 0000 0000     ................
   dcd5f:	0000 ff7f fcff 0000 0000 0000 6150 7472     ............Part
   dcd6f:	4269 6461 6567 5300 6570 7463 6172 3120     iBadge.Spectra 1
   dcd7f:	0038 0066 7548 696d 6964 7974 2500 4200     8.f.Humidity.%.B
   dcd8f:	7461 6574 7972 2d20 0020 6f59 2075 6f67     attery - .You go
   dcd9f:	2074 2061 656d 6873 7020 6e69 2167 4800     t a mesh ping!.H
   dcdaf:	6c65 6f6c 202c 7325 0021 6557 636c 6d6f     ello, %s!.Welcom
   dcdbf:	2065 6f74 5320 6570 7463 6172 0021 654d     e to Spectra!.Me
   dcdcf:	6873 4e20 7465 6f77 6b72 5320 6174 7574     sh Network Statu
   dcddf:	0073 7243 6165 6574 2064 7962 6100 4720     s.Created by.a G
   dcdef:	4f4c 4142 204c 6574 6d61 6100 2074 6150     LOBAL team.at Pa
   dcdff:	7472 6369 656c 0021                         rticle!.

000dce07 <_ZL10konamiLogo>:
	...
   dce2f:	ffff 0000 0000 0000 0000 0000 0000 0100     ................
   dce3f:	ffff 0000 0000 0000 0000 0000 0000 0100     ................
   dce4f:	feff 0000 0000 0000 0000 0000 0000 0100     ................
   dce5f:	feff 0000 0000 0000 0000 0000 0000 0300     ................
   dce6f:	feff 0000 0000 0000 0000 0000 0000 0300     ................
   dce7f:	fcff 0000 0000 0000 0000 0000 0000 0300     ................
   dce8f:	fcff 0000 0000 0000 0000 0000 0000 0700     ................
   dce9f:	f8ff 0000 0000 0000 0000 0000 0000 0700     ................
   dceaf:	f8ff 0000 0000 0000 0000 0000 0000 0f00     ................
   dcebf:	f0ff 0000 0000 0000 0000 0000 0000 1f00     ................
   dcecf:	e0ff 0000 0000 0000 0000 0000 0000 1f00     ................
   dcedf:	c0ff 0000 0000 0000 0000 0000 0000 3f00     ...............?
   dceef:	80ff 0000 0000 0000 0000 0000 0000 7f00     ................
   dceff:	00ff 0000 0000 0000 0000 0000 0000 ff01     ................
   dcf0f:	00fc 0000 0000 0000 0000 0000 0000 ff3f     ..............?.
   dcf1f:	3f80 e0ff 0000 0000 0000 0000 0300 f8ff     .?..............
   dcf2f:	3f00 c0ff 0000 0000 0000 0000 0f00 e0ff     .?..............
   dcf3f:	3f00 c0ff 0000 0000 0000 0000 1f00 c0ff     .?..............
   dcf4f:	7f00 c0ff 0000 0000 0000 0000 3f00 80ff     .............?..
   dcf5f:	7f00 80ff 0000 0000 0000 0000 3f00 80ff     .............?..
   dcf6f:	7f00 80ff 0000 0000 0000 0000 7f00 80ff     ................
   dcf7f:	ff00 80ff 0000 0000 0000 0000 ff00 00ff     ................
   dcf8f:	ff00 00ff 0000 0000 0000 0000 ff00 00ff     ................
   dcf9f:	ff01 00fe 0000 0000 0000 0000 ff01 00fe     ................
   dcfaf:	ff01 00fe 0000 0000 0000 0000 ff01 00fe     ................
   dcfbf:	ff01 00fc 0000 0000 0000 0000 ff01 00fe     ................
   dcfcf:	ff03 00f8 0000 0000 0000 0000 ff03 00fc     ................
   dcfdf:	ff07 00f0 0000 0000 0000 0000 ff03 00fc     ................
   dcfef:	ff0f 00e0 0000 0000 0000 0000 ff07 00fc     ................
   dcfff:	ff7f 0080 0000 0000 0000 0000 ff07 07fc     ................
   dd00f:	f0ff 0000 0000 0000 0000 0000 0000 7f00     ................
   dd01f:	00ff 0000 0000 0000 0000 0000 0000 ff01     ................
   dd02f:	00fe 0000 0000 0000 0000 0000 0000 ff03     ................
   dd03f:	00fc 0000 0000 0000 0000 0000 0000 ff07     ................
   dd04f:	00f8 0000 0000 0000 0000 0000 0000 ff0f     ................
   dd05f:	00f0 0000 0000 0000 0000 0000 0000 ff0f     ................
   dd06f:	00f0 0000 0000 0000 0000 0000 0000 ff1f     ................
   dd07f:	00e0 0000 0000 0000 0000 0000 0000 ff3f     ..............?.
   dd08f:	00c0 0000 0000 0000 0000 0000 0000 ff3f     ..............?.
   dd09f:	00c0 0000 0000 0000 0000 0000 0000 ff7f     ................
   dd0af:	00c0 0000 0000 0000 0000 0000 0000 ff7f     ................
   dd0bf:	0080 0000 0000 0000 0000 0000 0000 ff7f     ................
   dd0cf:	0080 0000 0000 0000 0000 0000 0000 ffff     ................
   dd0df:	0080 0000 0000 0000 0000 0000 0000 ffff     ................
	...
   dd0fb:	0000 ffff 0000 0000 0000 0000 0000 0000     ................
	...
   dd15b:	7300 3cbe 0fe3 c01c 0000 0000 0000 0000     .s.<............
   dd16b:	6e00 7de3 1fcf c03d 0000 0000 0000 0000     .n.}..=.........
   dd17b:	ec00 7dc3 1f8d 8079 0000 0000 0000 0000     ...}..y.........
   dd18b:	f900 7dc7 3f9d 807b 0000 0000 0000 0000     ...}.?{.........
   dd19b:	d900 5fc7 36b9 80d3 0000 0000 0000 0000     ..._.6..........
   dd1ab:	d901 df86 363f 00d3 0000 0000 0000 0000     ....?6..........
   dd1bb:	9901 9fce 777f 00b7 0000 0000 0000 0000     .....w..........
   dd1cb:	8d03 9ffc 67e1 0036 0000 0000 0000 0000     .....g6.........
   dd1db:	8c03 9ef9 67c1 0036 0000 0000 0000 0000     .....g6.........
	...

000dd207 <_ZL18batteryMediumImage>:
   dd207:	ff3f ffff ffff fcff 7f00 ffff ffff ffff     ?...............
   dd217:	00fe ffff ffff ffff ffff ff00 ffff ffff     ................
   dd227:	ffff 00ff 00f0 0000 0000 0f00 f000 0000     ................
   dd237:	0000 0000 000f 00f0 0000 0000 0f00 f0fc     ................
   dd247:	0000 0000 0000 fe0f fff0 cfff c0ff 0f00     ................
   dd257:	f0ff ffff ffcf 00c0 ff0f fff0 9fff c0ff     ................
   dd267:	0f00 f00f ffff ffbf 00c0 0f0f fff0 3fff     ...............?
   dd277:	80ff 0f00 f00f ffff ff3f 0080 0f0f fff0     ........?.......
   dd287:	7ffe 00ff 0f00 f00f fcff fe7f 0000 0f0f     ................
   dd297:	fff0 fffc 00fe 0f00 f00f fcff fcff 0000     ................
   dd2a7:	0f0f fff0 fffd 00fc 0f00 f00f f9ff fcff     ................
   dd2b7:	0000 0f0f fff0 fffb 00fc 0f00 f00f f3ff     ................
   dd2c7:	f8ff 0000 0f0f fff0 ffe3 00f0 0f00 f0ff     ................
   dd2d7:	e7ff f0ff 0000 ff0f 00f0 0000 0000 0f00     ................
   dd2e7:	f0fe 0000 0000 0000 fe0f 00f0 0000 0000     ................
   dd2f7:	0f00 f000 0000 0000 0000 000f ffff ffff     ................
   dd307:	ffff ffff ff00 ffff ffff ffff 00ff ff7f     ................
   dd317:	ffff ffff feff 3f00 ffff ffff ffff 00fc     .......?........

000dd327 <_ZL16batteryFullImage>:
   dd327:	ff3f ffff ffff fcff 7f00 ffff ffff ffff     ?...............
   dd337:	00fe ffff ffff ffff ffff ff00 ffff ffff     ................
   dd347:	ffff 00ff 00f0 0000 0000 0f00 f000 0000     ................
   dd357:	0000 0000 000f 00f0 0000 0000 0f00 f0fc     ................
   dd367:	0000 0000 0000 fe0f fff0 cfff c7ff 0fff     ................
   dd377:	f0ff ffff ffcf ffc7 ff0f fff0 9fff cfff     ................
   dd387:	0fff f00f ffff ffbf ffdf 0f0f fff0 3fff     ...............?
   dd397:	9fff 0fff f00f ffff ff3f ffbf 0f0f fff0     ........?.......
   dd3a7:	7ffe 3fff 0fff f00f fcff fe7f ff3f 0f0f     ...?........?...
   dd3b7:	fff0 fffc 7ffe 0fff f00f fcff fcff ff7f     ................
   dd3c7:	0f0f fff0 fffd fffc 0fff f00f f9ff fcff     ................
   dd3d7:	ffff 0f0f fff0 fffb fffd 0fff f00f f3ff     ................
   dd3e7:	f9ff ffff 0f0f fff0 ffe3 fff3 0fff f0ff     ................
   dd3f7:	e7ff f3ff ffff ff0f 00f0 0000 0000 0f00     ................
   dd407:	f0fe 0000 0000 0000 fe0f 00f0 0000 0000     ................
   dd417:	0f00 f000 0000 0000 0000 000f ffff ffff     ................
   dd427:	ffff ffff ff00 ffff ffff ffff 00ff ff7f     ................
   dd437:	ffff ffff feff 3f00 ffff ffff ffff 00fc     .......?........

000dd447 <_ZL8meshLogo>:
   dd447:	3f00 f8ff 0000 0000 7f00 fcff 0000 0000     .?..............
   dd457:	7f00 fcff 0000 0000 ff00 fcff 0000 0000     ................
   dd467:	e001 0e00 0000 0000 e001 0e00 0000 0000     ................
   dd477:	c003 0700 0080 0000 c003 0700 0080 0000     ................
   dd487:	8007 0300 00c0 0000 8007 0300 00c0 0000     ................
   dd497:	000f 0300 00c0 0000 001e 0100 00e0 0000     ................
   dd4a7:	001e 0100 00e0 0000 003c 0000 0070 0000     ........<...p...
   dd4b7:	003c 0000 0078 0000 0078 0000 ff3f 00fc     <...x...x...?...
   dd4c7:	00f0 0000 ff3f 00fe 00f0 0000 ff3f 00ff     ....?.......?...
   dd4d7:	0078 0000 ff3f 00ff 0078 0000 0038 8007     x...?...x...8...
   dd4e7:	003c 0000 0070 8007 001e 0100 00f0 c003     <...p...........
   dd4f7:	001e 0100 00e0 e001 000f 0300 00c0 e001     ................
   dd507:	000f 0300 00c0 f000 c003 0300 00c0 7800     ...............x
   dd517:	c003 0300 00c0 7800 c003 0700 0080 7c00     .......x.......|
   dd527:	e001 0e00 0000 3c00 ff00 fcff 0000 1e00     .......<........
   dd537:	ff00 fcff 0000 0f00 7f00 fcff 0000 0f00     ................
   dd547:	7f00 fcff 0000 0f00 ff00 fcff 0000 1e00     ................
   dd557:	e001 0e00 0000 3c00 c003 0700 0080 3c00     .......<.......<
   dd567:	c003 0700 0080 7800 c003 0700 0080 7800     .......x.......x
   dd577:	8007 0300 00c0 f000 000f 0300 00c0 e001     ................
   dd587:	001e 0100 00e0 e001 001e 0100 00e0 c003     ................
   dd597:	003c 0000 0070 c003 003c 0000 0070 8007     <...p...<...p...
   dd5a7:	0078 0000 ff3f 00ef 00f0 0000 ff3f 00ff     x...?.......?...
   dd5b7:	00f0 0000 ff3f 00fe 0078 0000 ff3f 00fe     ....?...x...?...
   dd5c7:	0078 0000 0038 0000 003c 0000 0070 0000     x...8...<...p...
   dd5d7:	001e 0000 0070 0000 001e 0100 00e0 0000     ....p...........
   dd5e7:	000f 0300 00c0 0000 000f 0300 00c0 0000     ................
   dd5f7:	8007 0300 00c0 0000 8007 0300 00c0 0000     ................
   dd607:	c003 0700 0080 0000 e001 0e00 0000 0000     ................
   dd617:	e001 0e00 0000 0000 f000 1c00 0000 0000     ................
   dd627:	ff00 fcff 0000 0000 7f00 fcff 0000 0000     ................
   dd637:	3f00 f8ff 0000 0000                         .?......

000dd63f <_ZL9sparkLogo>:
	...
   dd663:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   dd673:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   dd683:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   dd693:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd6a3:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd6b3:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd6c3:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
   dd6d3:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
   dd6e3:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
   dd6f3:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
   dd703:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
   dd713:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
   dd723:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
   dd733:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
   dd743:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
   dd753:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
   dd763:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
   dd773:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
   dd783:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
   dd793:	0000 ffc3 c3ff 0000 0000 0000 0000 0000     ................
   dd7a3:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
   dd7b3:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
   dd7c3:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
   dd7d3:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
   dd7e3:	0000 ff43 c2ff 0000 0000 0000 0000 0000     ..C.............
   dd7f3:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
   dd803:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
   dd813:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
   dd823:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
   dd833:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
   dd843:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
   dd853:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
   dd863:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
   dd873:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
   dd883:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
   dd893:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
   dd8a3:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
   dd8b3:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
   dd8c3:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd8d3:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd8e3:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   dd8f3:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   dd903:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   dd913:	0000 0100 0080 0000 0000 0000 0000 0000     ................
	...

000dd93f <_ZL17batteryEmptyImage>:
   dd93f:	ff3f ffff ffff fcff 7f00 ffff ffff ffff     ?...............
   dd94f:	00fe ffff ffff ffff ffff ff00 ffff ffff     ................
   dd95f:	ffff 00ff 00f0 0000 0000 0f00 f000 0000     ................
   dd96f:	0000 0000 000f 00f0 0000 0000 0f00 f0fc     ................
   dd97f:	0000 0000 0000 fe0f 00f0 0000 0000 0f00     ................
   dd98f:	f0ff 0000 0000 0000 ff0f 00f0 0000 0000     ................
   dd99f:	0f00 f00f 0000 0000 0000 0f0f 00f0 0000     ................
   dd9af:	0000 0f00 f00f 0000 0000 0000 0f0f 00f0     ................
   dd9bf:	0000 0000 0f00 f00f 0000 0000 0000 0f0f     ................
   dd9cf:	00f0 0000 0000 0f00 f00f 0000 0000 0000     ................
   dd9df:	0f0f 00f0 0000 0000 0f00 f00f 0000 0000     ................
   dd9ef:	0000 0f0f 00f0 0000 0000 0f00 f00f 0000     ................
   dd9ff:	0000 0000 0f0f 00f0 0000 0000 0f00 f0ff     ................
   dda0f:	0000 0000 0000 ff0f 00f0 0000 0000 0f00     ................
   dda1f:	f0fe 0000 0000 0000 fe0f 00f0 0000 0000     ................
   dda2f:	0f00 f000 0000 0000 0000 000f ffff ffff     ................
   dda3f:	ffff ffff ff00 ffff ffff ffff 00ff ff7f     ................
   dda4f:	ffff ffff feff 3f00 ffff ffff ffff 00fc     .......?........
   dda5f:	6f74 6577 2d72 6573 646e 7a00 6361 2d68     tower-send.zach-
   dda6f:	7562 7474 6e6f 6800 6c65 6f6c 0021 656d     button.hello!.me
   dda7f:	6873 702d 6e69 0067 6548 6c6c 206f 6970     sh-ping.Hello pi
   dda8f:	676e 0021 6167 6574 6177 2d79 6970 676e     ng!.gateway-ping
   dda9f:	4700 7461 7765 7961 7020 6e69 2167 7200     .Gateway ping!.r
   ddaaf:	6465 6200 756c 0065 7267 6565 006e 6579     ed.blue.green.ye
   ddabf:	6c6c 776f 7b00 7422 6d65 2270 003a 222c     llow.{"temp":.,"
   ddacf:	7568 696d 6964 7974 3a22 7d00 6500 766e     humidity":.}.env
   ddadf:	732d 6e65 6f73 7372 6200 7461 6574 7972     -sensors.battery
   ddaef:	632d 6168 6772 0065 2020 7445 6863 4120     -charge.  Etch A
   ddaff:	2000 5320 656b 6374 0068 7355 2065 6874     .  Sketch.Use th
   ddb0f:	2065 6f6a 7379 6974 6b63 2e2e 002e 6353     e joystick....Sc
   ddb1f:	726f 3a65 0020 4147 454d 4f20 4556 2052     ore: .GAME OVER 
   ddb2f:	283a 4300                                        :(.

000ddb32 <_ZL5score>:
   ddb32:	7543 7272 6e65 2074 6353 726f 0065 0010     Current Score...
   ddb42:	0012 0011 0013 6f74 6577 2d72 7566 6c6c     ......tower-full
   ddb52:	7400 776f 7265 662d 6c75 2d6c 6c73 6d6f     .tower-full-slom
   ddb62:	006f 6167 6574 6177 2d79 6573 7574 2d70     o.gateway-setup-
   ddb72:	6c63 6369 656b 0064 6341 6974 6576 4300     clicked.Active.C
   ddb82:	6e6f 656e 7463 6e69 0067 694c 7473 6e65     onnecting.Listen
   ddb92:	6e69 0067 0000                              ing...

000ddb98 <_ZL19notes_MarioGameOver>:
   ddb98:	000f 0000 0106 0000 0008 0000 0000 0000     ................
   ddba8:	0008 0000 0000 0000 0008 0000 00c4 0000     ................
   ddbb8:	0008 0000 0000 0000 0004 0000 00a5 0000     ................
   ddbc8:	0004 0000 00dc 0000 0006 0000 00f7 0000     ................
   ddbd8:	0006 0000 00dc 0000 0006 0000 00d0 0000     ................
   ddbe8:	0006 0000 00e9 0000 0006 0000 00d0 0000     ................
   ddbf8:	0006 0000 00c4 0000 0008 0000 00af 0000     ................
   ddc08:	0008 0000 00c4 0000 0004 0000               ............

000ddc14 <_ZL13beegeesMelody>:
   ddc14:	0188 0000 01b8 0000 0000 0000 020b 0000     ................
	...
   ddc2c:	0188 0000 0000 0000 0000 0000 0000 0000     ................
   ddc3c:	014a 0000 0000 0000 0126 0000 014a 0000     J.......&...J...
   ddc4c:	0188 0000 0000 0000 0126 0000 014a 0000     ........&...J...
   ddc5c:	0000 0000 0188 0000 0000 0000 0000 0000     ................
   ddc6c:	0126 0000 0000 0000 014a 0000 0000 0000     &.......J.......
   ddc7c:	0188 0000 0000 0000 01b8 0000 0000 0000     ................
   ddc8c:	020b 0000 0000 0000                         ........

000ddc94 <_ZL18notes_MarioStartup>:
   ddc94:	000b 0000 014a 0000 0008 0000 014a 0000     ....J.......J...
   ddca4:	0008 0000 0000 0000 0008 0000 014a 0000     ............J...
   ddcb4:	0008 0000 0000 0000 0008 0000 0106 0000     ................
   ddcc4:	0008 0000 014a 0000 0008 0000 0000 0000     ....J...........
   ddcd4:	0008 0000 0188 0000 0008 0000 0000 0000     ................
   ddce4:	0003 0000 00c4 0000 0008 0000               ............

000ddcf0 <_ZL9sparkLogo>:
	...
   ddd14:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   ddd24:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   ddd34:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   ddd44:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddd54:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddd64:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddd74:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
   ddd84:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
   ddd94:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
   ddda4:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
   dddb4:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
   dddc4:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
   dddd4:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
   ddde4:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
   dddf4:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
   dde04:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
   dde14:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
   dde24:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
   dde34:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
   dde44:	0000 ffc3 c3ff 0000 0000 0000 0000 0000     ................
   dde54:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
   dde64:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
   dde74:	ff3f fff0 0fff fcff 0000 0000 0000 0000     ?...............
   dde84:	0f00 ffc1 83ff 00f0 0000 0000 0000 0000     ................
   dde94:	0000 ff43 c2ff 0000 0000 0000 0000 0000     ..C.............
   ddea4:	0000 ff07 e0ff 0000 0000 0000 0000 0000     ................
   ddeb4:	0000 ff0f f0ff 0000 0000 0000 0000 0000     ................
   ddec4:	0000 ff1f f8ff 0000 0000 0000 0000 0000     ................
   dded4:	0000 fe3f f87f 0000 0000 0000 0000 0000     ..?.............
   ddee4:	0000 f03f fc0f 0000 0000 0000 0000 0000     ..?.............
   ddef4:	0000 e07f fe07 0000 0000 0000 0000 0000     ................
   ddf04:	0000 81ff ff81 0000 0000 0000 0000 0000     ................
   ddf14:	0100 03fc 3fc0 0080 0000 0000 0000 0000     .....?..........
   ddf24:	0300 0ff0 0fe0 00c0 0000 0000 0000 0000     ................
   ddf34:	0700 07e0 07e0 00e0 0000 0000 0000 0000     ................
   ddf44:	0700 0700 00e0 00e0 0000 0000 0000 0000     ................
   ddf54:	1c00 0700 00e0 0038 0000 0000 0000 0000     ......8.........
   ddf64:	1800 0300 00c0 0018 0000 0000 0000 0000     ................
   ddf74:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddf84:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddf94:	0000 0300 00c0 0000 0000 0000 0000 0000     ................
   ddfa4:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   ddfb4:	0000 0100 0080 0000 0000 0000 0000 0000     ................
   ddfc4:	0000 0100 0080 0000 0000 0000 0000 0000     ................
	...

000ddff0 <_ZTV12Adafruit_GFX>:
	...
   de000:	8171 000d a2d5 000d 40a5 000d 75c1 000d     q........@...u..
   de010:	76e1 000d 76fd 000d 7681 000d 7717 000d     .v...v...v...w..
   de020:	774f 000d 776b 000d                         Ow..kw..

000de028 <_ZL4font>:
   de028:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   de038:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   de048:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   de058:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   de068:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   de078:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   de088:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   de098:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   de0a8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   de0b8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   de0c8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   de0d8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   de0e8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   de0f8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   de108:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   de118:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   de128:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   de138:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   de148:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   de158:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   de168:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   de178:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   de188:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   de198:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   de1a8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   de1b8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   de1c8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   de1d8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   de1e8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   de1f8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   de208:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   de218:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   de228:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   de238:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   de248:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   de258:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   de268:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   de278:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   de288:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   de298:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   de2a8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   de2b8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   de2c8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   de2d8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   de2e8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   de2f8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   de308:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   de318:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   de328:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   de338:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   de348:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   de358:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   de368:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   de378:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   de388:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   de398:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   de3a8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   de3b8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   de3c8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   de3d8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   de3e8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   de3f8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   de408:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   de418:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   de428:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   de438:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   de448:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   de458:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   de468:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   de478:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   de488:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   de498:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   de4a8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   de4b8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   de4c8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   de4d8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   de4e8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   de4f8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   de508:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   de518:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000de524 <_ZTV16Adafruit_SSD1306>:
	...
   de52c:	40cd 000d 487d 000d 8171 000d a2d5 000d     .@..}H..q.......
   de53c:	8515 000d 75c1 000d 8379 000d 8205 000d     .....u..y.......
   de54c:	7681 000d 7717 000d 774f 000d 776b 000d     .v...w..Ow..kw..

000de55c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   de564:	974d 000d 9753 000d 977b 000d 975f 000d     M...S...{..._...
   de574:	974f 000d                                   O...

000de578 <_ZTV7TwoWire>:
	...
   de580:	9ced 000d 9d37 000d 9d0f 000d 9cef 000d     ....7...........
   de590:	9d17 000d 9d1f 000d 9d27 000d 9d2f 000d     ........'.../...

000de5a0 <_ZTV9IPAddress>:
	...
   de5a8:	9e31 000d 7531 000d 7555 000d 6e6c 6600     1...1u..Uu..ln.f
   de5b8:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   de5c8:	2500 3130 7530 0020 205d 2c00 0020 2928     .%010u .] ., .()
   de5d8:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
   de5e8:	6400 7465 6961 736c 3d20 0020 6162 6475     .details = .baud
   de5f8:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   de608:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   de618:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   de628:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   de638:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   de648:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   de658:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   de668:	7070 6e00 6e6f 0065 7274 6361 0065 6e69     pp.none.trace.in
   de678:	6f66 7700 7261 006e 7265 6f72 0072 6170     fo.warn.error.pa
   de688:	696e 0063 6c61 006c                         nic.all.

000de690 <_ZTVN5spark12NetworkClassE>:
	...
   de698:	40a5 000d                                   .@..

000de69c <_ZTVN5spark9MeshClassE>:
	...
   de6a4:	9f19 000d 6666 3330 3a3a 3a31 3031 3130     ....ff03::1:1001
   de6b4:	7400 3168 7700 7269 6e69 0067 6170 7372     .th1.wiring.pars
   de6c4:	2065 6170 6b63 7465 2520 0064               e packet %d.

000de6d0 <_ZTV8SPIClass>:
	...
   de6d8:	a4e1 000d a4e3 000d                         ........

000de6e0 <_ZL14clock_divisors>:
   de6e0:	0800 1810 2820 3830                         .... (08

000de6e8 <_ZTV21StringPrintableHelper>:
	...
   de6f0:	a5f7 000d a5f9 000d a801 000d a7d3 000d     ................
   de700:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
   de710:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
   de720:	6100 6373 6974 656d 7200 6365 6965 6576     .asctime.receive
   de730:	2064 6425 6220 7479 7365 6620 6f72 206d     d %d bytes from 
   de740:	7325 2523 0064 6573 646e 6150 6b63 7465     %s#%d.sendPacket
   de750:	7320 7a69 2065 6425 202c 7325 2523 0064      size %d, %s#%d.
   de760:	6562 6967 206e 6170 6b63 7465 2520 2373     begin packet %s#
   de770:	6425 0000                                   %d..

000de774 <_ZTV3UDP>:
	...
   de77c:	7535 000d 7561 000d a949 000d aa77 000d     5u..au..I...w...
   de78c:	a941 000d a95f 000d a97d 000d a997 000d     A..._...}.......
   de79c:	a9bb 000d aa5b 000d ae0d 000d ad91 000d     ....[...........
   de7ac:	abc5 000d a931 000d afad 000d ab49 000d     ....1.......I...
   de7bc:	adc9 000d af73 000d aaa1 000d a937 000d     ....s.......7...
   de7cc:	ad71 000d a93d 000d a999 000d fff0 ffff     q...=...........
   de7dc:	0000 0000 a9b3 000d                         ........

000de7e4 <_ZTV11USARTSerial>:
	...
   de7ec:	b02d 000d b051 000d b05d 000d a2d5 000d     -...Q...].......
   de7fc:	b039 000d b045 000d b03f 000d b04b 000d     9...E...?...K...
   de80c:	b02f 000d b033 000d                         /...3...

000de814 <_ZTV9USBSerial>:
	...
   de81c:	b105 000d b149 000d b123 000d a2d5 000d     ....I...#.......
   de82c:	b11d 000d b107 000d b10f 000d b143 000d     ............C...
   de83c:	b117 000d b101 000d                         ........

000de844 <__sf_fake_stdin>:
	...

000de864 <__sf_fake_stdout>:
	...

000de884 <__sf_fake_stderr>:
	...
   de8a4:	0043                                        C.

000de8a6 <link_const_variable_data_end>:
	...

000de8a8 <link_constructors_location>:
   de8a8:	000d4889 	.word	0x000d4889
   de8ac:	000d5c89 	.word	0x000d5c89
   de8b0:	000d66e5 	.word	0x000d66e5
   de8b4:	000d6ad1 	.word	0x000d6ad1
   de8b8:	000d7575 	.word	0x000d7575
   de8bc:	000d9f09 	.word	0x000d9f09
   de8c0:	000da299 	.word	0x000da299
   de8c4:	000da4c5 	.word	0x000da4c5
   de8c8:	000da8ad 	.word	0x000da8ad
   de8cc:	000da8c9 	.word	0x000da8c9
   de8d0:	000db5a9 	.word	0x000db5a9
   de8d4:	000db5fd 	.word	0x000db5fd
   de8d8:	000db6c1 	.word	0x000db6c1
   de8dc:	000db745 	.word	0x000db745
   de8e0:	000db7c9 	.word	0x000db7c9

000de8e4 <link_constructors_end>:
	...
